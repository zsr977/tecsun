// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.19.1
// source: api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BillboardNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BillboardNull) Reset() {
	*x = BillboardNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillboardNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillboardNull) ProtoMessage() {}

func (x *BillboardNull) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillboardNull.ProtoReflect.Descriptor instead.
func (*BillboardNull) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

type OneBillboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content    string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Count      int32  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	ReadNum    int32  `protobuf:"varint,5,opt,name=read_num,json=readNum,proto3" json:"read_num,omitempty"`
	UnreadNum  int32  `protobuf:"varint,6,opt,name=unread_num,json=unreadNum,proto3" json:"unread_num,omitempty"`
	UsefulNum  int32  `protobuf:"varint,7,opt,name=useful_num,json=usefulNum,proto3" json:"useful_num,omitempty"`
	UselessNum int32  `protobuf:"varint,8,opt,name=useless_num,json=uselessNum,proto3" json:"useless_num,omitempty"`
	SkipNum    int32  `protobuf:"varint,9,opt,name=skip_num,json=skipNum,proto3" json:"skip_num,omitempty"`
	CreateTime string `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Status     int32  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	Page       string `protobuf:"bytes,12,opt,name=page,proto3" json:"page,omitempty"`
	Size       string `protobuf:"bytes,13,opt,name=size,proto3" json:"size,omitempty"`
	Tenant     string `protobuf:"bytes,14,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *OneBillboard) Reset() {
	*x = OneBillboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneBillboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneBillboard) ProtoMessage() {}

func (x *OneBillboard) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneBillboard.ProtoReflect.Descriptor instead.
func (*OneBillboard) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *OneBillboard) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *OneBillboard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *OneBillboard) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *OneBillboard) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *OneBillboard) GetReadNum() int32 {
	if x != nil {
		return x.ReadNum
	}
	return 0
}

func (x *OneBillboard) GetUnreadNum() int32 {
	if x != nil {
		return x.UnreadNum
	}
	return 0
}

func (x *OneBillboard) GetUsefulNum() int32 {
	if x != nil {
		return x.UsefulNum
	}
	return 0
}

func (x *OneBillboard) GetUselessNum() int32 {
	if x != nil {
		return x.UselessNum
	}
	return 0
}

func (x *OneBillboard) GetSkipNum() int32 {
	if x != nil {
		return x.SkipNum
	}
	return 0
}

func (x *OneBillboard) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *OneBillboard) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OneBillboard) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *OneBillboard) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *OneBillboard) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

type BillboardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows  []*OneBillboard `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	Total int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Size  int32           `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Pages int32           `protobuf:"varint,4,opt,name=pages,proto3" json:"pages,omitempty"`
}

func (x *BillboardList) Reset() {
	*x = BillboardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillboardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillboardList) ProtoMessage() {}

func (x *BillboardList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillboardList.ProtoReflect.Descriptor instead.
func (*BillboardList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *BillboardList) GetRows() []*OneBillboard {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *BillboardList) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BillboardList) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BillboardList) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

type ClientNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientNull) Reset() {
	*x = ClientNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientNull) ProtoMessage() {}

func (x *ClientNull) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientNull.ProtoReflect.Descriptor instead.
func (*ClientNull) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

type ClientCompanyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *anypb.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ClientCompanyList) Reset() {
	*x = ClientCompanyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCompanyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCompanyList) ProtoMessage() {}

func (x *ClientCompanyList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCompanyList.ProtoReflect.Descriptor instead.
func (*ClientCompanyList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *ClientCompanyList) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type ClientCompanyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrgId string `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Page  string `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	Size  string `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ClientCompanyInfo) Reset() {
	*x = ClientCompanyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCompanyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCompanyInfo) ProtoMessage() {}

func (x *ClientCompanyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCompanyInfo.ProtoReflect.Descriptor instead.
func (*ClientCompanyInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *ClientCompanyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientCompanyInfo) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ClientCompanyInfo) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *ClientCompanyInfo) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

type ClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant      string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Url         string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Code        string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	State       string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Key         string `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	TemplateId  string `protobuf:"bytes,7,opt,name=templateId,proto3" json:"templateId,omitempty"`
	Content     string `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	Title       string `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	Params      string `protobuf:"bytes,10,opt,name=params,proto3" json:"params,omitempty"`
	TemplateMId string `protobuf:"bytes,11,opt,name=templateMId,proto3" json:"templateMId,omitempty"`
	Recievers   string `protobuf:"bytes,12,opt,name=recievers,proto3" json:"recievers,omitempty"`
	InitCode    string `protobuf:"bytes,13,opt,name=initCode,proto3" json:"initCode,omitempty"`
	AppId       string `protobuf:"bytes,14,opt,name=appId,proto3" json:"appId,omitempty"`
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfo.ProtoReflect.Descriptor instead.
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *ClientInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *ClientInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClientInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ClientInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ClientInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ClientInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ClientInfo) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *ClientInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ClientInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ClientInfo) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *ClientInfo) GetTemplateMId() string {
	if x != nil {
		return x.TemplateMId
	}
	return ""
}

func (x *ClientInfo) GetRecievers() string {
	if x != nil {
		return x.Recievers
	}
	return ""
}

func (x *ClientInfo) GetInitCode() string {
	if x != nil {
		return x.InitCode
	}
	return ""
}

func (x *ClientInfo) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type UserClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone      string   `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Uuid       string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name       string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IsModify   int32    `protobuf:"varint,4,opt,name=isModify,proto3" json:"isModify,omitempty"`
	IsBind     int32    `protobuf:"varint,5,opt,name=isBind,proto3" json:"isBind,omitempty"`
	IdCard     string   `protobuf:"bytes,6,opt,name=idCard,proto3" json:"idCard,omitempty"`
	IcCard     string   `protobuf:"bytes,7,opt,name=icCard,proto3" json:"icCard,omitempty"`
	Gender     string   `protobuf:"bytes,8,opt,name=gender,proto3" json:"gender,omitempty"`
	Email      string   `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`
	Disabled   bool     `protobuf:"varint,10,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Department []string `protobuf:"bytes,11,rep,name=department,proto3" json:"department,omitempty"`
	Company    string   `protobuf:"bytes,12,opt,name=company,proto3" json:"company,omitempty"`
	AvatarUuid string   `protobuf:"bytes,13,opt,name=avatarUuid,proto3" json:"avatarUuid,omitempty"`
	Avatar     string   `protobuf:"bytes,14,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *UserClientInfo) Reset() {
	*x = UserClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserClientInfo) ProtoMessage() {}

func (x *UserClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserClientInfo.ProtoReflect.Descriptor instead.
func (*UserClientInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *UserClientInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserClientInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UserClientInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserClientInfo) GetIsModify() int32 {
	if x != nil {
		return x.IsModify
	}
	return 0
}

func (x *UserClientInfo) GetIsBind() int32 {
	if x != nil {
		return x.IsBind
	}
	return 0
}

func (x *UserClientInfo) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *UserClientInfo) GetIcCard() string {
	if x != nil {
		return x.IcCard
	}
	return ""
}

func (x *UserClientInfo) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserClientInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserClientInfo) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *UserClientInfo) GetDepartment() []string {
	if x != nil {
		return x.Department
	}
	return nil
}

func (x *UserClientInfo) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *UserClientInfo) GetAvatarUuid() string {
	if x != nil {
		return x.AvatarUuid
	}
	return ""
}

func (x *UserClientInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone    string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Url      string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Userid   string `protobuf:"bytes,4,opt,name=userid,proto3" json:"userid,omitempty"`
	Mobile   string `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Type     string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Tenant   string `protobuf:"bytes,7,opt,name=tenant,proto3" json:"tenant,omitempty"`
	MobileNo string `protobuf:"bytes,8,opt,name=mobileNo,proto3" json:"mobileNo,omitempty"`
	UserName string `protobuf:"bytes,9,opt,name=userName,proto3" json:"userName,omitempty"`
	IDcard   string `protobuf:"bytes,10,opt,name=iDcard,proto3" json:"iDcard,omitempty"`
	OpenId   string `protobuf:"bytes,11,opt,name=openId,proto3" json:"openId,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *UserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UserInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UserInfo) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *UserInfo) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UserInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UserInfo) GetMobileNo() string {
	if x != nil {
		return x.MobileNo
	}
	return ""
}

func (x *UserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfo) GetIDcard() string {
	if x != nil {
		return x.IDcard
	}
	return ""
}

func (x *UserInfo) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

type MessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant    string   `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Signature string   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Timestamp string   `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	NonceStr  string   `protobuf:"bytes,4,opt,name=nonceStr,proto3" json:"nonceStr,omitempty"`
	Type      string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Encrypt   string   `protobuf:"bytes,6,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
	AppId     string   `protobuf:"bytes,7,opt,name=appId,proto3" json:"appId,omitempty"`
	Url       string   `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	Debug     bool     `protobuf:"varint,9,opt,name=debug,proto3" json:"debug,omitempty"`
	Beta      bool     `protobuf:"varint,10,opt,name=beta,proto3" json:"beta,omitempty"`
	JsApiList []string `protobuf:"bytes,11,rep,name=jsApiList,proto3" json:"jsApiList,omitempty"`
	Ticket    string   `protobuf:"bytes,12,opt,name=ticket,proto3" json:"ticket,omitempty"`
	CorpId    string   `protobuf:"bytes,13,opt,name=corpId,proto3" json:"corpId,omitempty"`
	AgentId   string   `protobuf:"bytes,14,opt,name=agentId,proto3" json:"agentId,omitempty"`
	Msg       string   `protobuf:"bytes,15,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *MessageInfo) Reset() {
	*x = MessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageInfo) ProtoMessage() {}

func (x *MessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageInfo.ProtoReflect.Descriptor instead.
func (*MessageInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *MessageInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *MessageInfo) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *MessageInfo) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *MessageInfo) GetNonceStr() string {
	if x != nil {
		return x.NonceStr
	}
	return ""
}

func (x *MessageInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MessageInfo) GetEncrypt() string {
	if x != nil {
		return x.Encrypt
	}
	return ""
}

func (x *MessageInfo) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *MessageInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageInfo) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *MessageInfo) GetBeta() bool {
	if x != nil {
		return x.Beta
	}
	return false
}

func (x *MessageInfo) GetJsApiList() []string {
	if x != nil {
		return x.JsApiList
	}
	return nil
}

func (x *MessageInfo) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *MessageInfo) GetCorpId() string {
	if x != nil {
		return x.CorpId
	}
	return ""
}

func (x *MessageInfo) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *MessageInfo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type MediaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant     string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	MediaId    string `protobuf:"bytes,3,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
	Uuid       string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Url        string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Name       string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	ExpireTime string `protobuf:"bytes,7,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
}

func (x *MediaInfo) Reset() {
	*x = MediaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaInfo) ProtoMessage() {}

func (x *MediaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaInfo.ProtoReflect.Descriptor instead.
func (*MediaInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *MediaInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *MediaInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MediaInfo) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *MediaInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *MediaInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MediaInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MediaInfo) GetExpireTime() string {
	if x != nil {
		return x.ExpireTime
	}
	return ""
}

type DeviceNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceNull) Reset() {
	*x = DeviceNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceNull) ProtoMessage() {}

func (x *DeviceNull) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceNull.ProtoReflect.Descriptor instead.
func (*DeviceNull) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

type CompanyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64          `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size  int64          `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Total int64          `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Rows  []*CompanyInfo `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *CompanyList) Reset() {
	*x = CompanyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyList) ProtoMessage() {}

func (x *CompanyList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyList.ProtoReflect.Descriptor instead.
func (*CompanyList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *CompanyList) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CompanyList) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CompanyList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CompanyList) GetRows() []*CompanyInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

type MecList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64      `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size  int64      `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Total int64      `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Rows  []*MecInfo `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *MecList) Reset() {
	*x = MecList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MecList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MecList) ProtoMessage() {}

func (x *MecList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MecList.ProtoReflect.Descriptor instead.
func (*MecList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

func (x *MecList) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *MecList) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MecList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MecList) GetRows() []*MecInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

type DeviceUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Phone  string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Card   string `protobuf:"bytes,4,opt,name=card,proto3" json:"card,omitempty"`
	Tenant string `protobuf:"bytes,5,opt,name=Tenant,proto3" json:"Tenant,omitempty"`
}

func (x *DeviceUserInfo) Reset() {
	*x = DeviceUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUserInfo) ProtoMessage() {}

func (x *DeviceUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUserInfo.ProtoReflect.Descriptor instead.
func (*DeviceUserInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14}
}

func (x *DeviceUserInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *DeviceUserInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DeviceUserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *DeviceUserInfo) GetCard() string {
	if x != nil {
		return x.Card
	}
	return ""
}

func (x *DeviceUserInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

type CompanyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Tenant     string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Remark     string `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`
	Address    string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Company    string `protobuf:"bytes,6,opt,name=company,proto3" json:"company,omitempty"`
	Directions string `protobuf:"bytes,7,opt,name=directions,proto3" json:"directions,omitempty"`
	Area       string `protobuf:"bytes,8,opt,name=area,proto3" json:"area,omitempty"`
	Url        string `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Page       int64  `protobuf:"varint,10,opt,name=page,proto3" json:"page,omitempty"`
	Size       int64  `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	CreateTime string `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime string `protobuf:"bytes,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Passage    string `protobuf:"bytes,14,opt,name=passage,proto3" json:"passage,omitempty"`
}

func (x *CompanyInfo) Reset() {
	*x = CompanyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyInfo) ProtoMessage() {}

func (x *CompanyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyInfo.ProtoReflect.Descriptor instead.
func (*CompanyInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15}
}

func (x *CompanyInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CompanyInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *CompanyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompanyInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CompanyInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CompanyInfo) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *CompanyInfo) GetDirections() string {
	if x != nil {
		return x.Directions
	}
	return ""
}

func (x *CompanyInfo) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *CompanyInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CompanyInfo) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CompanyInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CompanyInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CompanyInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CompanyInfo) GetPassage() string {
	if x != nil {
		return x.Passage
	}
	return ""
}

type TrafficList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages   int64          `protobuf:"varint,1,opt,name=pages,proto3" json:"pages,omitempty"`
	Size    int64          `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Total   int64          `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Rows    []*TrafficInfo `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
	Current int64          `protobuf:"varint,5,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *TrafficList) Reset() {
	*x = TrafficList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficList) ProtoMessage() {}

func (x *TrafficList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficList.ProtoReflect.Descriptor instead.
func (*TrafficList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{16}
}

func (x *TrafficList) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *TrafficList) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TrafficList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TrafficList) GetRows() []*TrafficInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *TrafficList) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

type TrafficInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant      string  `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	CatchPhoto  string  `protobuf:"bytes,2,opt,name=catchPhoto,proto3" json:"catchPhoto,omitempty"`
	CertNumber  string  `protobuf:"bytes,3,opt,name=certNumber,proto3" json:"certNumber,omitempty"`
	DepName     string  `protobuf:"bytes,4,opt,name=depName,proto3" json:"depName,omitempty"`
	DeviceName  string  `protobuf:"bytes,5,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	DeviceNo    string  `protobuf:"bytes,6,opt,name=deviceNo,proto3" json:"deviceNo,omitempty"`
	FaceScore   string  `protobuf:"bytes,7,opt,name=faceScore,proto3" json:"faceScore,omitempty"`
	IcCard      string  `protobuf:"bytes,8,opt,name=icCard,proto3" json:"icCard,omitempty"`
	MatchPhoto  string  `protobuf:"bytes,9,opt,name=matchPhoto,proto3" json:"matchPhoto,omitempty"`
	Name        string  `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Park        string  `protobuf:"bytes,11,opt,name=park,proto3" json:"park,omitempty"`
	PlateColor  string  `protobuf:"bytes,12,opt,name=plateColor,proto3" json:"plateColor,omitempty"`
	PlateNumber string  `protobuf:"bytes,13,opt,name=plateNumber,proto3" json:"plateNumber,omitempty"`
	RecordId    string  `protobuf:"bytes,14,opt,name=recordId,proto3" json:"recordId,omitempty"`
	VisitTime   string  `protobuf:"bytes,15,opt,name=visitTime,proto3" json:"visitTime,omitempty"`
	CertKind    int32   `protobuf:"varint,16,opt,name=certKind,proto3" json:"certKind,omitempty"`
	People      int32   `protobuf:"varint,17,opt,name=people,proto3" json:"people,omitempty"`
	Temp        int32   `protobuf:"varint,18,opt,name=temp,proto3" json:"temp,omitempty"`
	Status      int32   `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty"`
	Type        int32   `protobuf:"varint,20,opt,name=type,proto3" json:"type,omitempty"`
	Page        float64 `protobuf:"fixed64,21,opt,name=page,proto3" json:"page,omitempty"`
	Size        float64 `protobuf:"fixed64,22,opt,name=size,proto3" json:"size,omitempty"`
	Uuid        string  `protobuf:"bytes,23,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *TrafficInfo) Reset() {
	*x = TrafficInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficInfo) ProtoMessage() {}

func (x *TrafficInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficInfo.ProtoReflect.Descriptor instead.
func (*TrafficInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{17}
}

func (x *TrafficInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *TrafficInfo) GetCatchPhoto() string {
	if x != nil {
		return x.CatchPhoto
	}
	return ""
}

func (x *TrafficInfo) GetCertNumber() string {
	if x != nil {
		return x.CertNumber
	}
	return ""
}

func (x *TrafficInfo) GetDepName() string {
	if x != nil {
		return x.DepName
	}
	return ""
}

func (x *TrafficInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *TrafficInfo) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

func (x *TrafficInfo) GetFaceScore() string {
	if x != nil {
		return x.FaceScore
	}
	return ""
}

func (x *TrafficInfo) GetIcCard() string {
	if x != nil {
		return x.IcCard
	}
	return ""
}

func (x *TrafficInfo) GetMatchPhoto() string {
	if x != nil {
		return x.MatchPhoto
	}
	return ""
}

func (x *TrafficInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrafficInfo) GetPark() string {
	if x != nil {
		return x.Park
	}
	return ""
}

func (x *TrafficInfo) GetPlateColor() string {
	if x != nil {
		return x.PlateColor
	}
	return ""
}

func (x *TrafficInfo) GetPlateNumber() string {
	if x != nil {
		return x.PlateNumber
	}
	return ""
}

func (x *TrafficInfo) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *TrafficInfo) GetVisitTime() string {
	if x != nil {
		return x.VisitTime
	}
	return ""
}

func (x *TrafficInfo) GetCertKind() int32 {
	if x != nil {
		return x.CertKind
	}
	return 0
}

func (x *TrafficInfo) GetPeople() int32 {
	if x != nil {
		return x.People
	}
	return 0
}

func (x *TrafficInfo) GetTemp() int32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *TrafficInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TrafficInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TrafficInfo) GetPage() float64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TrafficInfo) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TrafficInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant             string  `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	BelongsList        string  `protobuf:"bytes,2,opt,name=belongsList,proto3" json:"belongsList,omitempty"`
	CarKind            string  `protobuf:"bytes,3,opt,name=carKind,proto3" json:"carKind,omitempty"`
	CarNumber          string  `protobuf:"bytes,4,opt,name=carNumber,proto3" json:"carNumber,omitempty"`
	CardNo             string  `protobuf:"bytes,5,opt,name=cardNo,proto3" json:"cardNo,omitempty"`
	CatchPhoto         string  `protobuf:"bytes,6,opt,name=catchPhoto,proto3" json:"catchPhoto,omitempty"`
	CertKind           string  `protobuf:"bytes,7,opt,name=certKind,proto3" json:"certKind,omitempty"`
	CertNumber         string  `protobuf:"bytes,8,opt,name=certNumber,proto3" json:"certNumber,omitempty"`
	CertPhoto          string  `protobuf:"bytes,9,opt,name=certPhoto,proto3" json:"certPhoto,omitempty"`
	DeviceNo           string  `protobuf:"bytes,10,opt,name=deviceNo,proto3" json:"deviceNo,omitempty"`
	Extend             string  `protobuf:"bytes,11,opt,name=extend,proto3" json:"extend,omitempty"`
	FaceScore          string  `protobuf:"bytes,12,opt,name=faceScore,proto3" json:"faceScore,omitempty"`
	InDoorName         string  `protobuf:"bytes,13,opt,name=inDoorName,proto3" json:"inDoorName,omitempty"`
	OutDoorName        string  `protobuf:"bytes,14,opt,name=outDoorName,proto3" json:"outDoorName,omitempty"`
	Reason             string  `protobuf:"bytes,15,opt,name=reason,proto3" json:"reason,omitempty"`
	VisitNo            string  `protobuf:"bytes,16,opt,name=visitNo,proto3" json:"visitNo,omitempty"`
	VisitTime          string  `protobuf:"bytes,17,opt,name=visitTime,proto3" json:"visitTime,omitempty"`
	VisitedCompany     string  `protobuf:"bytes,18,opt,name=visitedCompany,proto3" json:"visitedCompany,omitempty"`
	VisitedDept        string  `protobuf:"bytes,19,opt,name=visitedDept,proto3" json:"visitedDept,omitempty"`
	VisitedMobilePhone string  `protobuf:"bytes,20,opt,name=visitedMobilePhone,proto3" json:"visitedMobilePhone,omitempty"`
	VisitedName        string  `protobuf:"bytes,21,opt,name=visitedName,proto3" json:"visitedName,omitempty"`
	VisitedPost        string  `protobuf:"bytes,22,opt,name=visitedPost,proto3" json:"visitedPost,omitempty"`
	VisitedRoomNum     string  `protobuf:"bytes,23,opt,name=visitedRoomNum,proto3" json:"visitedRoomNum,omitempty"`
	VisitedTel         string  `protobuf:"bytes,24,opt,name=visitedTel,proto3" json:"visitedTel,omitempty"`
	VisitorAddress     string  `protobuf:"bytes,25,opt,name=visitorAddress,proto3" json:"visitorAddress,omitempty"`
	VisitorCompany     string  `protobuf:"bytes,26,opt,name=visitorCompany,proto3" json:"visitorCompany,omitempty"`
	VisitorName        string  `protobuf:"bytes,27,opt,name=visitorName,proto3" json:"visitorName,omitempty"`
	VisitorPhone       string  `protobuf:"bytes,28,opt,name=visitorPhone,proto3" json:"visitorPhone,omitempty"`
	Status             float64 `protobuf:"fixed64,29,opt,name=status,proto3" json:"status,omitempty"`
	VisitedSex         float64 `protobuf:"fixed64,30,opt,name=visitedSex,proto3" json:"visitedSex,omitempty"`
	VisitorCount       float64 `protobuf:"fixed64,31,opt,name=visitorCount,proto3" json:"visitorCount,omitempty"`
	VisitorSex         float64 `protobuf:"fixed64,32,opt,name=visitorSex,proto3" json:"visitorSex,omitempty"`
	DeviceName         string  `protobuf:"bytes,33,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	LeaveTime          string  `protobuf:"bytes,34,opt,name=leaveTime,proto3" json:"leaveTime,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{18}
}

func (x *DeviceInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *DeviceInfo) GetBelongsList() string {
	if x != nil {
		return x.BelongsList
	}
	return ""
}

func (x *DeviceInfo) GetCarKind() string {
	if x != nil {
		return x.CarKind
	}
	return ""
}

func (x *DeviceInfo) GetCarNumber() string {
	if x != nil {
		return x.CarNumber
	}
	return ""
}

func (x *DeviceInfo) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *DeviceInfo) GetCatchPhoto() string {
	if x != nil {
		return x.CatchPhoto
	}
	return ""
}

func (x *DeviceInfo) GetCertKind() string {
	if x != nil {
		return x.CertKind
	}
	return ""
}

func (x *DeviceInfo) GetCertNumber() string {
	if x != nil {
		return x.CertNumber
	}
	return ""
}

func (x *DeviceInfo) GetCertPhoto() string {
	if x != nil {
		return x.CertPhoto
	}
	return ""
}

func (x *DeviceInfo) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

func (x *DeviceInfo) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

func (x *DeviceInfo) GetFaceScore() string {
	if x != nil {
		return x.FaceScore
	}
	return ""
}

func (x *DeviceInfo) GetInDoorName() string {
	if x != nil {
		return x.InDoorName
	}
	return ""
}

func (x *DeviceInfo) GetOutDoorName() string {
	if x != nil {
		return x.OutDoorName
	}
	return ""
}

func (x *DeviceInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *DeviceInfo) GetVisitNo() string {
	if x != nil {
		return x.VisitNo
	}
	return ""
}

func (x *DeviceInfo) GetVisitTime() string {
	if x != nil {
		return x.VisitTime
	}
	return ""
}

func (x *DeviceInfo) GetVisitedCompany() string {
	if x != nil {
		return x.VisitedCompany
	}
	return ""
}

func (x *DeviceInfo) GetVisitedDept() string {
	if x != nil {
		return x.VisitedDept
	}
	return ""
}

func (x *DeviceInfo) GetVisitedMobilePhone() string {
	if x != nil {
		return x.VisitedMobilePhone
	}
	return ""
}

func (x *DeviceInfo) GetVisitedName() string {
	if x != nil {
		return x.VisitedName
	}
	return ""
}

func (x *DeviceInfo) GetVisitedPost() string {
	if x != nil {
		return x.VisitedPost
	}
	return ""
}

func (x *DeviceInfo) GetVisitedRoomNum() string {
	if x != nil {
		return x.VisitedRoomNum
	}
	return ""
}

func (x *DeviceInfo) GetVisitedTel() string {
	if x != nil {
		return x.VisitedTel
	}
	return ""
}

func (x *DeviceInfo) GetVisitorAddress() string {
	if x != nil {
		return x.VisitorAddress
	}
	return ""
}

func (x *DeviceInfo) GetVisitorCompany() string {
	if x != nil {
		return x.VisitorCompany
	}
	return ""
}

func (x *DeviceInfo) GetVisitorName() string {
	if x != nil {
		return x.VisitorName
	}
	return ""
}

func (x *DeviceInfo) GetVisitorPhone() string {
	if x != nil {
		return x.VisitorPhone
	}
	return ""
}

func (x *DeviceInfo) GetStatus() float64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeviceInfo) GetVisitedSex() float64 {
	if x != nil {
		return x.VisitedSex
	}
	return 0
}

func (x *DeviceInfo) GetVisitorCount() float64 {
	if x != nil {
		return x.VisitorCount
	}
	return 0
}

func (x *DeviceInfo) GetVisitorSex() float64 {
	if x != nil {
		return x.VisitorSex
	}
	return 0
}

func (x *DeviceInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfo) GetLeaveTime() string {
	if x != nil {
		return x.LeaveTime
	}
	return ""
}

type MecInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company    string `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	Area       string `protobuf:"bytes,2,opt,name=area,proto3" json:"area,omitempty"`
	Cert       string `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
	Remark     string `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`
	Name       string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Signature  string `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Mac        string `protobuf:"bytes,7,opt,name=mac,proto3" json:"mac,omitempty"`
	Uuid       string `protobuf:"bytes,8,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CreateTime string `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	OnlineTime string `protobuf:"bytes,10,opt,name=onlineTime,proto3" json:"onlineTime,omitempty"`
}

func (x *MecInfo) Reset() {
	*x = MecInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MecInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MecInfo) ProtoMessage() {}

func (x *MecInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MecInfo.ProtoReflect.Descriptor instead.
func (*MecInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{19}
}

func (x *MecInfo) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *MecInfo) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *MecInfo) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *MecInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *MecInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MecInfo) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *MecInfo) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *MecInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *MecInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *MecInfo) GetOnlineTime() string {
	if x != nil {
		return x.OnlineTime
	}
	return ""
}

type PassageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant       string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	No           string `protobuf:"bytes,2,opt,name=no,proto3" json:"no,omitempty"`
	Face         string `protobuf:"bytes,3,opt,name=face,proto3" json:"face,omitempty"`
	IdCard       string `protobuf:"bytes,4,opt,name=idCard,proto3" json:"idCard,omitempty"`
	QrCode       string `protobuf:"bytes,5,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	GuestUuid    string `protobuf:"bytes,6,opt,name=guestUuid,proto3" json:"guestUuid,omitempty"`
	GuestName    string `protobuf:"bytes,7,opt,name=guestName,proto3" json:"guestName,omitempty"`
	GuestSex     string `protobuf:"bytes,8,opt,name=guestSex,proto3" json:"guestSex,omitempty"`
	GuestPhone   string `protobuf:"bytes,9,opt,name=guestPhone,proto3" json:"guestPhone,omitempty"`
	GuestCompany string `protobuf:"bytes,10,opt,name=guestCompany,proto3" json:"guestCompany,omitempty"`
	StaffUuid    string `protobuf:"bytes,11,opt,name=staffUuid,proto3" json:"staffUuid,omitempty"`
	StaffName    string `protobuf:"bytes,12,opt,name=staffName,proto3" json:"staffName,omitempty"`
	StaffSex     string `protobuf:"bytes,13,opt,name=staffSex,proto3" json:"staffSex,omitempty"`
	StaffPhone   string `protobuf:"bytes,14,opt,name=staffPhone,proto3" json:"staffPhone,omitempty"`
	StaffCompany string `protobuf:"bytes,15,opt,name=staffCompany,proto3" json:"staffCompany,omitempty"`
	StaffUnit    string `protobuf:"bytes,16,opt,name=staffUnit,proto3" json:"staffUnit,omitempty"`
	Area         string `protobuf:"bytes,17,opt,name=area,proto3" json:"area,omitempty"`
	StartTime    string `protobuf:"bytes,18,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime      string `protobuf:"bytes,19,opt,name=endTime,proto3" json:"endTime,omitempty"`
	CarNumber    string `protobuf:"bytes,20,opt,name=carNumber,proto3" json:"carNumber,omitempty"`
	Reason       string `protobuf:"bytes,21,opt,name=reason,proto3" json:"reason,omitempty"`
	Note         string `protobuf:"bytes,22,opt,name=note,proto3" json:"note,omitempty"`
	Uuid         string `protobuf:"bytes,23,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *PassageInfo) Reset() {
	*x = PassageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassageInfo) ProtoMessage() {}

func (x *PassageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassageInfo.ProtoReflect.Descriptor instead.
func (*PassageInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{20}
}

func (x *PassageInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *PassageInfo) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *PassageInfo) GetFace() string {
	if x != nil {
		return x.Face
	}
	return ""
}

func (x *PassageInfo) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *PassageInfo) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *PassageInfo) GetGuestUuid() string {
	if x != nil {
		return x.GuestUuid
	}
	return ""
}

func (x *PassageInfo) GetGuestName() string {
	if x != nil {
		return x.GuestName
	}
	return ""
}

func (x *PassageInfo) GetGuestSex() string {
	if x != nil {
		return x.GuestSex
	}
	return ""
}

func (x *PassageInfo) GetGuestPhone() string {
	if x != nil {
		return x.GuestPhone
	}
	return ""
}

func (x *PassageInfo) GetGuestCompany() string {
	if x != nil {
		return x.GuestCompany
	}
	return ""
}

func (x *PassageInfo) GetStaffUuid() string {
	if x != nil {
		return x.StaffUuid
	}
	return ""
}

func (x *PassageInfo) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *PassageInfo) GetStaffSex() string {
	if x != nil {
		return x.StaffSex
	}
	return ""
}

func (x *PassageInfo) GetStaffPhone() string {
	if x != nil {
		return x.StaffPhone
	}
	return ""
}

func (x *PassageInfo) GetStaffCompany() string {
	if x != nil {
		return x.StaffCompany
	}
	return ""
}

func (x *PassageInfo) GetStaffUnit() string {
	if x != nil {
		return x.StaffUnit
	}
	return ""
}

func (x *PassageInfo) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *PassageInfo) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *PassageInfo) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *PassageInfo) GetCarNumber() string {
	if x != nil {
		return x.CarNumber
	}
	return ""
}

func (x *PassageInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PassageInfo) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *PassageInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type RecordList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages   int64               `protobuf:"varint,1,opt,name=pages,proto3" json:"pages,omitempty"`
	Size    int64               `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Total   int64               `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Rows    []*DeviceRecordInfo `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
	Current int64               `protobuf:"varint,5,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *RecordList) Reset() {
	*x = RecordList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordList) ProtoMessage() {}

func (x *RecordList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordList.ProtoReflect.Descriptor instead.
func (*RecordList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{21}
}

func (x *RecordList) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *RecordList) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *RecordList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RecordList) GetRows() []*DeviceRecordInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *RecordList) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

type DeviceRecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant         string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	PersonId       string `protobuf:"bytes,2,opt,name=personId,proto3" json:"personId,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CardNo         string `protobuf:"bytes,4,opt,name=cardNo,proto3" json:"cardNo,omitempty"`
	VisitorCompany string `protobuf:"bytes,5,opt,name=visitorCompany,proto3" json:"visitorCompany,omitempty"`
	VisitorSex     string `protobuf:"bytes,6,opt,name=visitorSex,proto3" json:"visitorSex,omitempty"`
	IcCode         string `protobuf:"bytes,7,opt,name=icCode,proto3" json:"icCode,omitempty"`
	QrCode         string `protobuf:"bytes,8,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	CarNumber      string `protobuf:"bytes,9,opt,name=carNumber,proto3" json:"carNumber,omitempty"`
	Time           string `protobuf:"bytes,10,opt,name=time,proto3" json:"time,omitempty"`
	EndTime        string `protobuf:"bytes,11,opt,name=endTime,proto3" json:"endTime,omitempty"`
	ImgUrl         string `protobuf:"bytes,12,opt,name=imgUrl,proto3" json:"imgUrl,omitempty"`
	KeyWord        string `protobuf:"bytes,13,opt,name=keyWord,proto3" json:"keyWord,omitempty"`
	VisitorPhone   string `protobuf:"bytes,14,opt,name=visitorPhone,proto3" json:"visitorPhone,omitempty"`
	VisitedPhone   string `protobuf:"bytes,15,opt,name=visitedPhone,proto3" json:"visitedPhone,omitempty"`
	VisitedName    string `protobuf:"bytes,16,opt,name=visitedName,proto3" json:"visitedName,omitempty"`
	VisitedCompany string `protobuf:"bytes,17,opt,name=visitedCompany,proto3" json:"visitedCompany,omitempty"`
	VisitedSex     string `protobuf:"bytes,18,opt,name=visitedSex,proto3" json:"visitedSex,omitempty"`
	VisitedUnit    string `protobuf:"bytes,19,opt,name=visitedUnit,proto3" json:"visitedUnit,omitempty"`
	Reason         string `protobuf:"bytes,20,opt,name=reason,proto3" json:"reason,omitempty"`
	Passport       string `protobuf:"bytes,21,opt,name=passport,proto3" json:"passport,omitempty"`
	DriverLicense  string `protobuf:"bytes,22,opt,name=driverLicense,proto3" json:"driverLicense,omitempty"`
	SocialCard     string `protobuf:"bytes,23,opt,name=socialCard,proto3" json:"socialCard,omitempty"`
	HkPass         string `protobuf:"bytes,24,opt,name=hkPass,proto3" json:"hkPass,omitempty"`
	IcCard         string `protobuf:"bytes,25,opt,name=icCard,proto3" json:"icCard,omitempty"`
}

func (x *DeviceRecordInfo) Reset() {
	*x = DeviceRecordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRecordInfo) ProtoMessage() {}

func (x *DeviceRecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRecordInfo.ProtoReflect.Descriptor instead.
func (*DeviceRecordInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{22}
}

func (x *DeviceRecordInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *DeviceRecordInfo) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *DeviceRecordInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceRecordInfo) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *DeviceRecordInfo) GetVisitorCompany() string {
	if x != nil {
		return x.VisitorCompany
	}
	return ""
}

func (x *DeviceRecordInfo) GetVisitorSex() string {
	if x != nil {
		return x.VisitorSex
	}
	return ""
}

func (x *DeviceRecordInfo) GetIcCode() string {
	if x != nil {
		return x.IcCode
	}
	return ""
}

func (x *DeviceRecordInfo) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *DeviceRecordInfo) GetCarNumber() string {
	if x != nil {
		return x.CarNumber
	}
	return ""
}

func (x *DeviceRecordInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *DeviceRecordInfo) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *DeviceRecordInfo) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

func (x *DeviceRecordInfo) GetKeyWord() string {
	if x != nil {
		return x.KeyWord
	}
	return ""
}

func (x *DeviceRecordInfo) GetVisitorPhone() string {
	if x != nil {
		return x.VisitorPhone
	}
	return ""
}

func (x *DeviceRecordInfo) GetVisitedPhone() string {
	if x != nil {
		return x.VisitedPhone
	}
	return ""
}

func (x *DeviceRecordInfo) GetVisitedName() string {
	if x != nil {
		return x.VisitedName
	}
	return ""
}

func (x *DeviceRecordInfo) GetVisitedCompany() string {
	if x != nil {
		return x.VisitedCompany
	}
	return ""
}

func (x *DeviceRecordInfo) GetVisitedSex() string {
	if x != nil {
		return x.VisitedSex
	}
	return ""
}

func (x *DeviceRecordInfo) GetVisitedUnit() string {
	if x != nil {
		return x.VisitedUnit
	}
	return ""
}

func (x *DeviceRecordInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *DeviceRecordInfo) GetPassport() string {
	if x != nil {
		return x.Passport
	}
	return ""
}

func (x *DeviceRecordInfo) GetDriverLicense() string {
	if x != nil {
		return x.DriverLicense
	}
	return ""
}

func (x *DeviceRecordInfo) GetSocialCard() string {
	if x != nil {
		return x.SocialCard
	}
	return ""
}

func (x *DeviceRecordInfo) GetHkPass() string {
	if x != nil {
		return x.HkPass
	}
	return ""
}

func (x *DeviceRecordInfo) GetIcCard() string {
	if x != nil {
		return x.IcCard
	}
	return ""
}

type HelperNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HelperNull) Reset() {
	*x = HelperNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelperNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelperNull) ProtoMessage() {}

func (x *HelperNull) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelperNull.ProtoReflect.Descriptor instead.
func (*HelperNull) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{23}
}

type Faq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Question   string `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	Answer     string `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`
	Status     bool   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime string `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *Faq) Reset() {
	*x = Faq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Faq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Faq) ProtoMessage() {}

func (x *Faq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Faq.ProtoReflect.Descriptor instead.
func (*Faq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{24}
}

func (x *Faq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Faq) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *Faq) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *Faq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Faq) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type Faqs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Pages int64  `protobuf:"varint,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Page  string `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	Size  string `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	Rows  []*Faq `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *Faqs) Reset() {
	*x = Faqs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Faqs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Faqs) ProtoMessage() {}

func (x *Faqs) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Faqs.ProtoReflect.Descriptor instead.
func (*Faqs) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{25}
}

func (x *Faqs) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Faqs) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *Faqs) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *Faqs) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *Faqs) GetRows() []*Faq {
	if x != nil {
		return x.Rows
	}
	return nil
}

// The request message containing the user's name.
type RegisterManagerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *RegisterManagerReq) Reset() {
	*x = RegisterManagerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterManagerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterManagerReq) ProtoMessage() {}

func (x *RegisterManagerReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterManagerReq.ProtoReflect.Descriptor instead.
func (*RegisterManagerReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{26}
}

func (x *RegisterManagerReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type RegisterManagerRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rid string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
}

func (x *RegisterManagerRes) Reset() {
	*x = RegisterManagerRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterManagerRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterManagerRes) ProtoMessage() {}

func (x *RegisterManagerRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterManagerRes.ProtoReflect.Descriptor instead.
func (*RegisterManagerRes) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{27}
}

func (x *RegisterManagerRes) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

type ChangeNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rid  string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ChangeNameReq) Reset() {
	*x = ChangeNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeNameReq) ProtoMessage() {}

func (x *ChangeNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeNameReq.ProtoReflect.Descriptor instead.
func (*ChangeNameReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{28}
}

func (x *ChangeNameReq) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *ChangeNameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ChangeTFAReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rid string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Tfa bool   `protobuf:"varint,2,opt,name=tfa,proto3" json:"tfa,omitempty"`
}

func (x *ChangeTFAReq) Reset() {
	*x = ChangeTFAReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeTFAReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTFAReq) ProtoMessage() {}

func (x *ChangeTFAReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTFAReq.ProtoReflect.Descriptor instead.
func (*ChangeTFAReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{29}
}

func (x *ChangeTFAReq) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *ChangeTFAReq) GetTfa() bool {
	if x != nil {
		return x.Tfa
	}
	return false
}

type ChangePhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rid   string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Phone string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *ChangePhoneReq) Reset() {
	*x = ChangePhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePhoneReq) ProtoMessage() {}

func (x *ChangePhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePhoneReq.ProtoReflect.Descriptor instead.
func (*ChangePhoneReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{30}
}

func (x *ChangePhoneReq) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *ChangePhoneReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type ChangePasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rid         string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	NewPassword string `protobuf:"bytes,3,opt,name=newPassword,proto3" json:"newPassword,omitempty"`
}

func (x *ChangePasswordReq) Reset() {
	*x = ChangePasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordReq) ProtoMessage() {}

func (x *ChangePasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordReq.ProtoReflect.Descriptor instead.
func (*ChangePasswordReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{31}
}

func (x *ChangePasswordReq) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *ChangePasswordReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ChangePasswordReq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type ChangeAccountAndPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rid      string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Account  string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ChangeAccountAndPasswordReq) Reset() {
	*x = ChangeAccountAndPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAccountAndPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAccountAndPasswordReq) ProtoMessage() {}

func (x *ChangeAccountAndPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAccountAndPasswordReq.ProtoReflect.Descriptor instead.
func (*ChangeAccountAndPasswordReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{32}
}

func (x *ChangeAccountAndPasswordReq) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *ChangeAccountAndPasswordReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ChangeAccountAndPasswordReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ChangePasswordByPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone       string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	NewPassword string `protobuf:"bytes,2,opt,name=newPassword,proto3" json:"newPassword,omitempty"`
}

func (x *ChangePasswordByPhoneReq) Reset() {
	*x = ChangePasswordByPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordByPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordByPhoneReq) ProtoMessage() {}

func (x *ChangePasswordByPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordByPhoneReq.ProtoReflect.Descriptor instead.
func (*ChangePasswordByPhoneReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{33}
}

func (x *ChangePasswordByPhoneReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ChangePasswordByPhoneReq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type LoginByPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *LoginByPhoneReq) Reset() {
	*x = LoginByPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginByPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginByPhoneReq) ProtoMessage() {}

func (x *LoginByPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginByPhoneReq.ProtoReflect.Descriptor instead.
func (*LoginByPhoneReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{34}
}

func (x *LoginByPhoneReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type LoginByPhoneRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rid     string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Phone   string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Account string `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	Tfa     bool   `protobuf:"varint,5,opt,name=tfa,proto3" json:"tfa,omitempty"`
}

func (x *LoginByPhoneRes) Reset() {
	*x = LoginByPhoneRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginByPhoneRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginByPhoneRes) ProtoMessage() {}

func (x *LoginByPhoneRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginByPhoneRes.ProtoReflect.Descriptor instead.
func (*LoginByPhoneRes) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{35}
}

func (x *LoginByPhoneRes) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *LoginByPhoneRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoginByPhoneRes) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *LoginByPhoneRes) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *LoginByPhoneRes) GetTfa() bool {
	if x != nil {
		return x.Tfa
	}
	return false
}

type GetLoginManagerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *GetLoginManagerReq) Reset() {
	*x = GetLoginManagerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoginManagerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoginManagerReq) ProtoMessage() {}

func (x *GetLoginManagerReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoginManagerReq.ProtoReflect.Descriptor instead.
func (*GetLoginManagerReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{36}
}

func (x *GetLoginManagerReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type GetLoginManagerRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rid      string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Phone    string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Account  string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	Tfa      bool   `protobuf:"varint,6,opt,name=tfa,proto3" json:"tfa,omitempty"`
}

func (x *GetLoginManagerRes) Reset() {
	*x = GetLoginManagerRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoginManagerRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoginManagerRes) ProtoMessage() {}

func (x *GetLoginManagerRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoginManagerRes.ProtoReflect.Descriptor instead.
func (*GetLoginManagerRes) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{37}
}

func (x *GetLoginManagerRes) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *GetLoginManagerRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetLoginManagerRes) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetLoginManagerRes) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *GetLoginManagerRes) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GetLoginManagerRes) GetTfa() bool {
	if x != nil {
		return x.Tfa
	}
	return false
}

type DeleteAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rid string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
}

func (x *DeleteAccountReq) Reset() {
	*x = DeleteAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountReq) ProtoMessage() {}

func (x *DeleteAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountReq.ProtoReflect.Descriptor instead.
func (*DeleteAccountReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteAccountReq) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

type CreateTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MRid string `protobuf:"bytes,1,opt,name=mRid,proto3" json:"mRid,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *CreateTeamReq) Reset() {
	*x = CreateTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamReq) ProtoMessage() {}

func (x *CreateTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamReq.ProtoReflect.Descriptor instead.
func (*CreateTeamReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{39}
}

func (x *CreateTeamReq) GetMRid() string {
	if x != nil {
		return x.MRid
	}
	return ""
}

func (x *CreateTeamReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// The response message containing the greetings
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{40}
}

type MessageNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MessageNull) Reset() {
	*x = MessageNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageNull) ProtoMessage() {}

func (x *MessageNull) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageNull.ProtoReflect.Descriptor instead.
func (*MessageNull) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{41}
}

type AndroidMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string  `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Name  string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Time  string  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Type  float64 `protobuf:"fixed64,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AndroidMsg) Reset() {
	*x = AndroidMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidMsg) ProtoMessage() {}

func (x *AndroidMsg) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidMsg.ProtoReflect.Descriptor instead.
func (*AndroidMsg) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{42}
}

func (x *AndroidMsg) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *AndroidMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AndroidMsg) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *AndroidMsg) GetType() float64 {
	if x != nil {
		return x.Type
	}
	return 0
}

type CheckCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Code  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *CheckCode) Reset() {
	*x = CheckCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCode) ProtoMessage() {}

func (x *CheckCode) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCode.ProtoReflect.Descriptor instead.
func (*CheckCode) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{43}
}

func (x *CheckCode) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CheckCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type TotalMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Total  int64  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TotalMsg) Reset() {
	*x = TotalMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalMsg) ProtoMessage() {}

func (x *TotalMsg) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalMsg.ProtoReflect.Descriptor instead.
func (*TotalMsg) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{44}
}

func (x *TotalMsg) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *TotalMsg) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OrgNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrgNull) Reset() {
	*x = OrgNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgNull) ProtoMessage() {}

func (x *OrgNull) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgNull.ProtoReflect.Descriptor instead.
func (*OrgNull) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{45}
}

type Any struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *anypb.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Any) Reset() {
	*x = Any{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Any) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Any) ProtoMessage() {}

func (x *Any) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Any.ProtoReflect.Descriptor instead.
func (*Any) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{46}
}

func (x *Any) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type OrgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Phone          string  `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Title          string  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	UnitUuid       string  `protobuf:"bytes,4,opt,name=unitUuid,proto3" json:"unitUuid,omitempty"`
	Gender         float64 `protobuf:"fixed64,5,opt,name=gender,proto3" json:"gender,omitempty"`
	IsLeader       float64 `protobuf:"fixed64,6,opt,name=isLeader,proto3" json:"isLeader,omitempty"`
	Tenant         string  `protobuf:"bytes,7,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Ticket         string  `protobuf:"bytes,8,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Company        string  `protobuf:"bytes,9,opt,name=company,proto3" json:"company,omitempty"`
	Uuid           string  `protobuf:"bytes,10,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Status         bool    `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	IdCard         string  `protobuf:"bytes,12,opt,name=idCard,proto3" json:"idCard,omitempty"`
	UserUuid       string  `protobuf:"bytes,13,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	Ranks          string  `protobuf:"bytes,14,opt,name=ranks,proto3" json:"ranks,omitempty"`
	Work           string  `protobuf:"bytes,15,opt,name=work,proto3" json:"work,omitempty"`
	PageNum        float64 `protobuf:"fixed64,16,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	SizeNum        float64 `protobuf:"fixed64,17,opt,name=sizeNum,proto3" json:"sizeNum,omitempty"`
	Avatar         string  `protobuf:"bytes,18,opt,name=avatar,proto3" json:"avatar,omitempty"`
	City           string  `protobuf:"bytes,19,opt,name=city,proto3" json:"city,omitempty"`
	Country        string  `protobuf:"bytes,20,opt,name=country,proto3" json:"country,omitempty"`
	Province       string  `protobuf:"bytes,21,opt,name=province,proto3" json:"province,omitempty"`
	Data           string  `protobuf:"bytes,22,opt,name=data,proto3" json:"data,omitempty"`
	ParUuid        string  `protobuf:"bytes,23,opt,name=parUuid,proto3" json:"parUuid,omitempty"`
	InsideUuid     string  `protobuf:"bytes,24,opt,name=insideUuid,proto3" json:"insideUuid,omitempty"`
	PageNumStr     string  `protobuf:"bytes,25,opt,name=pageNumStr,proto3" json:"pageNumStr,omitempty"`
	SizeNumStr     string  `protobuf:"bytes,26,opt,name=sizeNumStr,proto3" json:"sizeNumStr,omitempty"`
	StatusStr      string  `protobuf:"bytes,27,opt,name=statusStr,proto3" json:"statusStr,omitempty"`
	UnitUuidModify string  `protobuf:"bytes,28,opt,name=unitUuidModify,proto3" json:"unitUuidModify,omitempty"`
	FileName       string  `protobuf:"bytes,29,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileType       string  `protobuf:"bytes,30,opt,name=fileType,proto3" json:"fileType,omitempty"`
	FileData       []byte  `protobuf:"bytes,31,opt,name=fileData,proto3" json:"fileData,omitempty"`
	Types          string  `protobuf:"bytes,32,opt,name=types,proto3" json:"types,omitempty"`
	Key            string  `protobuf:"bytes,33,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *OrgReq) Reset() {
	*x = OrgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgReq) ProtoMessage() {}

func (x *OrgReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgReq.ProtoReflect.Descriptor instead.
func (*OrgReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{47}
}

func (x *OrgReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrgReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *OrgReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *OrgReq) GetUnitUuid() string {
	if x != nil {
		return x.UnitUuid
	}
	return ""
}

func (x *OrgReq) GetGender() float64 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *OrgReq) GetIsLeader() float64 {
	if x != nil {
		return x.IsLeader
	}
	return 0
}

func (x *OrgReq) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *OrgReq) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *OrgReq) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *OrgReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *OrgReq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *OrgReq) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *OrgReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *OrgReq) GetRanks() string {
	if x != nil {
		return x.Ranks
	}
	return ""
}

func (x *OrgReq) GetWork() string {
	if x != nil {
		return x.Work
	}
	return ""
}

func (x *OrgReq) GetPageNum() float64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *OrgReq) GetSizeNum() float64 {
	if x != nil {
		return x.SizeNum
	}
	return 0
}

func (x *OrgReq) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *OrgReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *OrgReq) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *OrgReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *OrgReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *OrgReq) GetParUuid() string {
	if x != nil {
		return x.ParUuid
	}
	return ""
}

func (x *OrgReq) GetInsideUuid() string {
	if x != nil {
		return x.InsideUuid
	}
	return ""
}

func (x *OrgReq) GetPageNumStr() string {
	if x != nil {
		return x.PageNumStr
	}
	return ""
}

func (x *OrgReq) GetSizeNumStr() string {
	if x != nil {
		return x.SizeNumStr
	}
	return ""
}

func (x *OrgReq) GetStatusStr() string {
	if x != nil {
		return x.StatusStr
	}
	return ""
}

func (x *OrgReq) GetUnitUuidModify() string {
	if x != nil {
		return x.UnitUuidModify
	}
	return ""
}

func (x *OrgReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *OrgReq) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *OrgReq) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *OrgReq) GetTypes() string {
	if x != nil {
		return x.Types
	}
	return ""
}

func (x *OrgReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type OrgRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid              string               `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	User              *User                `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Users             []*User              `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	AllUser           *AllUser             `protobuf:"bytes,4,opt,name=allUser,proto3" json:"allUser,omitempty"`
	Ids               []string             `protobuf:"bytes,5,rep,name=ids,proto3" json:"ids,omitempty"`
	Js                string               `protobuf:"bytes,6,opt,name=js,proto3" json:"js,omitempty"`
	IsLeader          bool                 `protobuf:"varint,7,opt,name=IsLeader,proto3" json:"IsLeader,omitempty"`
	UnitMemberAndUser []*UnitMemberAndUser `protobuf:"bytes,8,rep,name=unitMemberAndUser,proto3" json:"unitMemberAndUser,omitempty"`
	UserUnit          []*UserUnit          `protobuf:"bytes,9,rep,name=userUnit,proto3" json:"userUnit,omitempty"`
	Data              string               `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	ClientIds         *ClientIds           `protobuf:"bytes,11,opt,name=clientIds,proto3" json:"clientIds,omitempty"`
	Company           string               `protobuf:"bytes,12,opt,name=company,proto3" json:"company,omitempty"`
	Modify            int32                `protobuf:"varint,13,opt,name=modify,proto3" json:"modify,omitempty"`
	IsBlacklist       bool                 `protobuf:"varint,14,opt,name=isBlacklist,proto3" json:"isBlacklist,omitempty"`
}

func (x *OrgRes) Reset() {
	*x = OrgRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgRes) ProtoMessage() {}

func (x *OrgRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgRes.ProtoReflect.Descriptor instead.
func (*OrgRes) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{48}
}

func (x *OrgRes) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *OrgRes) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *OrgRes) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *OrgRes) GetAllUser() *AllUser {
	if x != nil {
		return x.AllUser
	}
	return nil
}

func (x *OrgRes) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *OrgRes) GetJs() string {
	if x != nil {
		return x.Js
	}
	return ""
}

func (x *OrgRes) GetIsLeader() bool {
	if x != nil {
		return x.IsLeader
	}
	return false
}

func (x *OrgRes) GetUnitMemberAndUser() []*UnitMemberAndUser {
	if x != nil {
		return x.UnitMemberAndUser
	}
	return nil
}

func (x *OrgRes) GetUserUnit() []*UserUnit {
	if x != nil {
		return x.UserUnit
	}
	return nil
}

func (x *OrgRes) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *OrgRes) GetClientIds() *ClientIds {
	if x != nil {
		return x.ClientIds
	}
	return nil
}

func (x *OrgRes) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *OrgRes) GetModify() int32 {
	if x != nil {
		return x.Modify
	}
	return 0
}

func (x *OrgRes) GetIsBlacklist() bool {
	if x != nil {
		return x.IsBlacklist
	}
	return false
}

type AllUserMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int64      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Size    int64      `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Pages   int64      `protobuf:"varint,3,opt,name=pages,proto3" json:"pages,omitempty"`
	Current int64      `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`
	Records []*AllUser `protobuf:"bytes,5,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *AllUserMap) Reset() {
	*x = AllUserMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllUserMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllUserMap) ProtoMessage() {}

func (x *AllUserMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllUserMap.ProtoReflect.Descriptor instead.
func (*AllUserMap) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{49}
}

func (x *AllUserMap) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AllUserMap) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AllUserMap) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *AllUserMap) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *AllUserMap) GetRecords() []*AllUser {
	if x != nil {
		return x.Records
	}
	return nil
}

type ChildUnitMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int64        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Size    int64        `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Pages   int64        `protobuf:"varint,3,opt,name=pages,proto3" json:"pages,omitempty"`
	Current int64        `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`
	Records []*ChildUnit `protobuf:"bytes,5,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ChildUnitMap) Reset() {
	*x = ChildUnitMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildUnitMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildUnitMap) ProtoMessage() {}

func (x *ChildUnitMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildUnitMap.ProtoReflect.Descriptor instead.
func (*ChildUnitMap) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{50}
}

func (x *ChildUnitMap) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ChildUnitMap) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChildUnitMap) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *ChildUnitMap) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *ChildUnitMap) GetRecords() []*ChildUnit {
	if x != nil {
		return x.Records
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Phone      string   `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Name       string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Avatar     string   `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	AvatarUuid string   `protobuf:"bytes,5,opt,name=avatarUuid,proto3" json:"avatarUuid,omitempty"`
	Gender     string   `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender,omitempty"`
	IdCard     string   `protobuf:"bytes,7,opt,name=idCard,proto3" json:"idCard,omitempty"`
	IsModify   int32    `protobuf:"varint,8,opt,name=isModify,proto3" json:"isModify,omitempty"`
	IsBind     int32    `protobuf:"varint,9,opt,name=isBind,proto3" json:"isBind,omitempty"`
	Email      string   `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
	IcCard     string   `protobuf:"bytes,11,opt,name=icCard,proto3" json:"icCard,omitempty"`
	Department []string `protobuf:"bytes,12,rep,name=department,proto3" json:"department,omitempty"`
	Company    string   `protobuf:"bytes,13,opt,name=company,proto3" json:"company,omitempty"`
	Disabled   bool     `protobuf:"varint,14,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{51}
}

func (x *User) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *User) GetAvatarUuid() string {
	if x != nil {
		return x.AvatarUuid
	}
	return ""
}

func (x *User) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *User) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *User) GetIsModify() int32 {
	if x != nil {
		return x.IsModify
	}
	return 0
}

func (x *User) GetIsBind() int32 {
	if x != nil {
		return x.IsBind
	}
	return 0
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetIcCard() string {
	if x != nil {
		return x.IcCard
	}
	return ""
}

func (x *User) GetDepartment() []string {
	if x != nil {
		return x.Department
	}
	return nil
}

func (x *User) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *User) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type AllUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Avatar    string   `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Name      string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UnitName  []string `protobuf:"bytes,4,rep,name=unitName,proto3" json:"unitName,omitempty"`
	IdCard    string   `protobuf:"bytes,5,opt,name=idCard,proto3" json:"idCard,omitempty"`
	Phone     string   `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Email     string   `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	Gender    string   `protobuf:"bytes,8,opt,name=gender,proto3" json:"gender,omitempty"`
	Country   string   `protobuf:"bytes,9,opt,name=country,proto3" json:"country,omitempty"`
	Province  string   `protobuf:"bytes,10,opt,name=province,proto3" json:"province,omitempty"`
	City      string   `protobuf:"bytes,11,opt,name=city,proto3" json:"city,omitempty"`
	IsBind    string   `protobuf:"bytes,12,opt,name=isBind,proto3" json:"isBind,omitempty"`
	Company   string   `protobuf:"bytes,13,opt,name=company,proto3" json:"company,omitempty"`
	Blacklist int32    `protobuf:"varint,14,opt,name=blacklist,proto3" json:"blacklist,omitempty"`
}

func (x *AllUser) Reset() {
	*x = AllUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllUser) ProtoMessage() {}

func (x *AllUser) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllUser.ProtoReflect.Descriptor instead.
func (*AllUser) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{52}
}

func (x *AllUser) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AllUser) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *AllUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AllUser) GetUnitName() []string {
	if x != nil {
		return x.UnitName
	}
	return nil
}

func (x *AllUser) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *AllUser) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *AllUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AllUser) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *AllUser) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AllUser) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *AllUser) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AllUser) GetIsBind() string {
	if x != nil {
		return x.IsBind
	}
	return ""
}

func (x *AllUser) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *AllUser) GetBlacklist() int32 {
	if x != nil {
		return x.Blacklist
	}
	return 0
}

type ChildUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentUuid string   `protobuf:"bytes,3,opt,name=parentUuid,proto3" json:"parentUuid,omitempty"`
	Leader     []string `protobuf:"bytes,4,rep,name=leader,proto3" json:"leader,omitempty"`
}

func (x *ChildUnit) Reset() {
	*x = ChildUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildUnit) ProtoMessage() {}

func (x *ChildUnit) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildUnit.ProtoReflect.Descriptor instead.
func (*ChildUnit) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{53}
}

func (x *ChildUnit) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ChildUnit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChildUnit) GetParentUuid() string {
	if x != nil {
		return x.ParentUuid
	}
	return ""
}

func (x *ChildUnit) GetLeader() []string {
	if x != nil {
		return x.Leader
	}
	return nil
}

type UnitMemberAndUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UnitUuid   string `protobuf:"bytes,2,opt,name=unitUuid,proto3" json:"unitUuid,omitempty"`
	InsideUuid string `protobuf:"bytes,3,opt,name=insideUuid,proto3" json:"insideUuid,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Gender     int32  `protobuf:"varint,5,opt,name=gender,proto3" json:"gender,omitempty"`
	Phone      string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Avatar     string `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Title      string `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	IsLeader   int32  `protobuf:"varint,9,opt,name=isLeader,proto3" json:"isLeader,omitempty"`
}

func (x *UnitMemberAndUser) Reset() {
	*x = UnitMemberAndUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitMemberAndUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitMemberAndUser) ProtoMessage() {}

func (x *UnitMemberAndUser) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitMemberAndUser.ProtoReflect.Descriptor instead.
func (*UnitMemberAndUser) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{54}
}

func (x *UnitMemberAndUser) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UnitMemberAndUser) GetUnitUuid() string {
	if x != nil {
		return x.UnitUuid
	}
	return ""
}

func (x *UnitMemberAndUser) GetInsideUuid() string {
	if x != nil {
		return x.InsideUuid
	}
	return ""
}

func (x *UnitMemberAndUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UnitMemberAndUser) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *UnitMemberAndUser) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UnitMemberAndUser) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UnitMemberAndUser) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UnitMemberAndUser) GetIsLeader() int32 {
	if x != nil {
		return x.IsLeader
	}
	return 0
}

type UserUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UnitUuid string `protobuf:"bytes,2,opt,name=unitUuid,proto3" json:"unitUuid,omitempty"`
}

func (x *UserUnit) Reset() {
	*x = UserUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUnit) ProtoMessage() {}

func (x *UserUnit) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUnit.ProtoReflect.Descriptor instead.
func (*UserUnit) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{55}
}

func (x *UserUnit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserUnit) GetUnitUuid() string {
	if x != nil {
		return x.UnitUuid
	}
	return ""
}

type ClientIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WechatId   string `protobuf:"bytes,1,opt,name=wechatId,proto3" json:"wechatId,omitempty"`
	WorkId     string `protobuf:"bytes,2,opt,name=workId,proto3" json:"workId,omitempty"`
	DingTalkId string `protobuf:"bytes,3,opt,name=dingTalkId,proto3" json:"dingTalkId,omitempty"`
	LarkId     string `protobuf:"bytes,4,opt,name=larkId,proto3" json:"larkId,omitempty"`
	IId        string `protobuf:"bytes,5,opt,name=iId,proto3" json:"iId,omitempty"`
	Phone      string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *ClientIds) Reset() {
	*x = ClientIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientIds) ProtoMessage() {}

func (x *ClientIds) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientIds.ProtoReflect.Descriptor instead.
func (*ClientIds) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{56}
}

func (x *ClientIds) GetWechatId() string {
	if x != nil {
		return x.WechatId
	}
	return ""
}

func (x *ClientIds) GetWorkId() string {
	if x != nil {
		return x.WorkId
	}
	return ""
}

func (x *ClientIds) GetDingTalkId() string {
	if x != nil {
		return x.DingTalkId
	}
	return ""
}

func (x *ClientIds) GetLarkId() string {
	if x != nil {
		return x.LarkId
	}
	return ""
}

func (x *ClientIds) GetIId() string {
	if x != nil {
		return x.IId
	}
	return ""
}

func (x *ClientIds) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type PassageNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PassageNull) Reset() {
	*x = PassageNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassageNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassageNull) ProtoMessage() {}

func (x *PassageNull) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassageNull.ProtoReflect.Descriptor instead.
func (*PassageNull) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{57}
}

type PassageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant                string                 `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	UserUuid              string                 `protobuf:"bytes,2,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	InsideUuid            string                 `protobuf:"bytes,3,opt,name=insideUuid,proto3" json:"insideUuid,omitempty"`
	PageNum               float64                `protobuf:"fixed64,4,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	SizeNum               float64                `protobuf:"fixed64,5,opt,name=sizeNum,proto3" json:"sizeNum,omitempty"`
	Status                bool                   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	StatusFloat           float64                `protobuf:"fixed64,7,opt,name=statusFloat,proto3" json:"statusFloat,omitempty"`
	Uuid                  string                 `protobuf:"bytes,8,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Reason                string                 `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty"`
	Note                  string                 `protobuf:"bytes,10,opt,name=note,proto3" json:"note,omitempty"`
	Address               string                 `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
	VisitAddress          string                 `protobuf:"bytes,12,opt,name=visitAddress,proto3" json:"visitAddress,omitempty"`
	Unit                  string                 `protobuf:"bytes,13,opt,name=unit,proto3" json:"unit,omitempty"`
	CarNumber             string                 `protobuf:"bytes,14,opt,name=carNumber,proto3" json:"carNumber,omitempty"`
	HealthCode            string                 `protobuf:"bytes,15,opt,name=healthCode,proto3" json:"healthCode,omitempty"`
	ExtendField           string                 `protobuf:"bytes,16,opt,name=extendField,proto3" json:"extendField,omitempty"`
	ChildCompany          string                 `protobuf:"bytes,17,opt,name=childCompany,proto3" json:"childCompany,omitempty"`
	ChildCompanyCache     string                 `protobuf:"bytes,18,opt,name=childCompanyCache,proto3" json:"childCompanyCache,omitempty"`
	ChildCompanyArea      string                 `protobuf:"bytes,19,opt,name=childCompanyArea,proto3" json:"childCompanyArea,omitempty"`
	ChildCompanyAreaCache string                 `protobuf:"bytes,20,opt,name=childCompanyAreaCache,proto3" json:"childCompanyAreaCache,omitempty"`
	StartTime             *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime               *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=endTime,proto3" json:"endTime,omitempty"`
	TabType               string                 `protobuf:"bytes,23,opt,name=tabType,proto3" json:"tabType,omitempty"`
	UserList              string                 `protobuf:"bytes,24,opt,name=userList,proto3" json:"userList,omitempty"`
	Idss                  string                 `protobuf:"bytes,25,opt,name=idss,proto3" json:"idss,omitempty"`
	NTypes                bool                   `protobuf:"varint,26,opt,name=nTypes,proto3" json:"nTypes,omitempty"`
	Name                  string                 `protobuf:"bytes,27,opt,name=name,proto3" json:"name,omitempty"`
	Company               string                 `protobuf:"bytes,28,opt,name=company,proto3" json:"company,omitempty"`
	Phone                 string                 `protobuf:"bytes,29,opt,name=phone,proto3" json:"phone,omitempty"`
	Top                   bool                   `protobuf:"varint,30,opt,name=top,proto3" json:"top,omitempty"`
	Pk                    string                 `protobuf:"bytes,31,opt,name=pk,proto3" json:"pk,omitempty"`
	IdCard                string                 `protobuf:"bytes,32,opt,name=idCard,proto3" json:"idCard,omitempty"`
	ArriveStr             string                 `protobuf:"bytes,33,opt,name=arriveStr,proto3" json:"arriveStr,omitempty"`
	StatusStr             string                 `protobuf:"bytes,34,opt,name=statusStr,proto3" json:"statusStr,omitempty"`
	NTypeStr              string                 `protobuf:"bytes,35,opt,name=nTypeStr,proto3" json:"nTypeStr,omitempty"`
	StartTimeStr          string                 `protobuf:"bytes,36,opt,name=startTimeStr,proto3" json:"startTimeStr,omitempty"`
	EndTimeStr            string                 `protobuf:"bytes,37,opt,name=endTimeStr,proto3" json:"endTimeStr,omitempty"`
	VisitTimeStr          string                 `protobuf:"bytes,38,opt,name=visitTimeStr,proto3" json:"visitTimeStr,omitempty"`
	CatchPhoto            string                 `protobuf:"bytes,39,opt,name=catchPhoto,proto3" json:"catchPhoto,omitempty"`
	DeviceNo              string                 `protobuf:"bytes,40,opt,name=deviceNo,proto3" json:"deviceNo,omitempty"`
	DeviceName            string                 `protobuf:"bytes,41,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Arrive                float64                `protobuf:"fixed64,42,opt,name=arrive,proto3" json:"arrive,omitempty"`
	VisitNo               string                 `protobuf:"bytes,43,opt,name=visitNo,proto3" json:"visitNo,omitempty"`
	VisitorName           string                 `protobuf:"bytes,44,opt,name=visitorName,proto3" json:"visitorName,omitempty"`
	CertNumber            string                 `protobuf:"bytes,45,opt,name=certNumber,proto3" json:"certNumber,omitempty"`
	VisitedName           string                 `protobuf:"bytes,46,opt,name=visitedName,proto3" json:"visitedName,omitempty"`
	InDoorName            string                 `protobuf:"bytes,47,opt,name=inDoorName,proto3" json:"inDoorName,omitempty"`
	VisitorPhone          string                 `protobuf:"bytes,48,opt,name=visitorPhone,proto3" json:"visitorPhone,omitempty"`
	VisitStartTime        string                 `protobuf:"bytes,49,opt,name=visitStartTime,proto3" json:"visitStartTime,omitempty"`
	VisitEndTime          string                 `protobuf:"bytes,50,opt,name=visitEndTime,proto3" json:"visitEndTime,omitempty"`
	InsideName            string                 `protobuf:"bytes,51,opt,name=insideName,proto3" json:"insideName,omitempty"`
	OutDoorName           string                 `protobuf:"bytes,52,opt,name=outDoorName,proto3" json:"outDoorName,omitempty"`
}

func (x *PassageReq) Reset() {
	*x = PassageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassageReq) ProtoMessage() {}

func (x *PassageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassageReq.ProtoReflect.Descriptor instead.
func (*PassageReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{58}
}

func (x *PassageReq) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *PassageReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *PassageReq) GetInsideUuid() string {
	if x != nil {
		return x.InsideUuid
	}
	return ""
}

func (x *PassageReq) GetPageNum() float64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *PassageReq) GetSizeNum() float64 {
	if x != nil {
		return x.SizeNum
	}
	return 0
}

func (x *PassageReq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *PassageReq) GetStatusFloat() float64 {
	if x != nil {
		return x.StatusFloat
	}
	return 0
}

func (x *PassageReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PassageReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PassageReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *PassageReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PassageReq) GetVisitAddress() string {
	if x != nil {
		return x.VisitAddress
	}
	return ""
}

func (x *PassageReq) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *PassageReq) GetCarNumber() string {
	if x != nil {
		return x.CarNumber
	}
	return ""
}

func (x *PassageReq) GetHealthCode() string {
	if x != nil {
		return x.HealthCode
	}
	return ""
}

func (x *PassageReq) GetExtendField() string {
	if x != nil {
		return x.ExtendField
	}
	return ""
}

func (x *PassageReq) GetChildCompany() string {
	if x != nil {
		return x.ChildCompany
	}
	return ""
}

func (x *PassageReq) GetChildCompanyCache() string {
	if x != nil {
		return x.ChildCompanyCache
	}
	return ""
}

func (x *PassageReq) GetChildCompanyArea() string {
	if x != nil {
		return x.ChildCompanyArea
	}
	return ""
}

func (x *PassageReq) GetChildCompanyAreaCache() string {
	if x != nil {
		return x.ChildCompanyAreaCache
	}
	return ""
}

func (x *PassageReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *PassageReq) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *PassageReq) GetTabType() string {
	if x != nil {
		return x.TabType
	}
	return ""
}

func (x *PassageReq) GetUserList() string {
	if x != nil {
		return x.UserList
	}
	return ""
}

func (x *PassageReq) GetIdss() string {
	if x != nil {
		return x.Idss
	}
	return ""
}

func (x *PassageReq) GetNTypes() bool {
	if x != nil {
		return x.NTypes
	}
	return false
}

func (x *PassageReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PassageReq) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *PassageReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PassageReq) GetTop() bool {
	if x != nil {
		return x.Top
	}
	return false
}

func (x *PassageReq) GetPk() string {
	if x != nil {
		return x.Pk
	}
	return ""
}

func (x *PassageReq) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *PassageReq) GetArriveStr() string {
	if x != nil {
		return x.ArriveStr
	}
	return ""
}

func (x *PassageReq) GetStatusStr() string {
	if x != nil {
		return x.StatusStr
	}
	return ""
}

func (x *PassageReq) GetNTypeStr() string {
	if x != nil {
		return x.NTypeStr
	}
	return ""
}

func (x *PassageReq) GetStartTimeStr() string {
	if x != nil {
		return x.StartTimeStr
	}
	return ""
}

func (x *PassageReq) GetEndTimeStr() string {
	if x != nil {
		return x.EndTimeStr
	}
	return ""
}

func (x *PassageReq) GetVisitTimeStr() string {
	if x != nil {
		return x.VisitTimeStr
	}
	return ""
}

func (x *PassageReq) GetCatchPhoto() string {
	if x != nil {
		return x.CatchPhoto
	}
	return ""
}

func (x *PassageReq) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

func (x *PassageReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PassageReq) GetArrive() float64 {
	if x != nil {
		return x.Arrive
	}
	return 0
}

func (x *PassageReq) GetVisitNo() string {
	if x != nil {
		return x.VisitNo
	}
	return ""
}

func (x *PassageReq) GetVisitorName() string {
	if x != nil {
		return x.VisitorName
	}
	return ""
}

func (x *PassageReq) GetCertNumber() string {
	if x != nil {
		return x.CertNumber
	}
	return ""
}

func (x *PassageReq) GetVisitedName() string {
	if x != nil {
		return x.VisitedName
	}
	return ""
}

func (x *PassageReq) GetInDoorName() string {
	if x != nil {
		return x.InDoorName
	}
	return ""
}

func (x *PassageReq) GetVisitorPhone() string {
	if x != nil {
		return x.VisitorPhone
	}
	return ""
}

func (x *PassageReq) GetVisitStartTime() string {
	if x != nil {
		return x.VisitStartTime
	}
	return ""
}

func (x *PassageReq) GetVisitEndTime() string {
	if x != nil {
		return x.VisitEndTime
	}
	return ""
}

func (x *PassageReq) GetInsideName() string {
	if x != nil {
		return x.InsideName
	}
	return ""
}

func (x *PassageReq) GetOutDoorName() string {
	if x != nil {
		return x.OutDoorName
	}
	return ""
}

type PassageRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UserUuid    string       `protobuf:"bytes,2,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	TenantUuid  string       `protobuf:"bytes,3,opt,name=tenantUuid,proto3" json:"tenantUuid,omitempty"`
	InsideUuid  string       `protobuf:"bytes,4,opt,name=insideUuid,proto3" json:"insideUuid,omitempty"`
	Phone       string       `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Avatar      string       `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Name        string       `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Company     string       `protobuf:"bytes,8,opt,name=company,proto3" json:"company,omitempty"`
	Department  string       `protobuf:"bytes,9,opt,name=department,proto3" json:"department,omitempty"`
	Gender      string       `protobuf:"bytes,10,opt,name=gender,proto3" json:"gender,omitempty"`
	Ids         string       `protobuf:"bytes,11,opt,name=ids,proto3" json:"ids,omitempty"`
	Data        string       `protobuf:"bytes,12,opt,name=data,proto3" json:"data,omitempty"`
	Msg         []string     `protobuf:"bytes,13,rep,name=msg,proto3" json:"msg,omitempty"`
	Message     string       `protobuf:"bytes,14,opt,name=message,proto3" json:"message,omitempty"`
	Passage     *Passage     `protobuf:"bytes,15,opt,name=passage,proto3" json:"passage,omitempty"`
	Count       int64        `protobuf:"varint,16,opt,name=count,proto3" json:"count,omitempty"`
	Stream      []byte       `protobuf:"bytes,17,opt,name=stream,proto3" json:"stream,omitempty"`
	PassageSpot *PassageSpot `protobuf:"bytes,18,opt,name=passageSpot,proto3" json:"passageSpot,omitempty"`
}

func (x *PassageRes) Reset() {
	*x = PassageRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassageRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassageRes) ProtoMessage() {}

func (x *PassageRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassageRes.ProtoReflect.Descriptor instead.
func (*PassageRes) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{59}
}

func (x *PassageRes) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PassageRes) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *PassageRes) GetTenantUuid() string {
	if x != nil {
		return x.TenantUuid
	}
	return ""
}

func (x *PassageRes) GetInsideUuid() string {
	if x != nil {
		return x.InsideUuid
	}
	return ""
}

func (x *PassageRes) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PassageRes) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *PassageRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PassageRes) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *PassageRes) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *PassageRes) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *PassageRes) GetIds() string {
	if x != nil {
		return x.Ids
	}
	return ""
}

func (x *PassageRes) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *PassageRes) GetMsg() []string {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *PassageRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PassageRes) GetPassage() *Passage {
	if x != nil {
		return x.Passage
	}
	return nil
}

func (x *PassageRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PassageRes) GetStream() []byte {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *PassageRes) GetPassageSpot() *PassageSpot {
	if x != nil {
		return x.PassageSpot
	}
	return nil
}

type PassageResMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int64                `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Size    int64                `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Pages   int64                `protobuf:"varint,3,opt,name=pages,proto3" json:"pages,omitempty"`
	Current int64                `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`
	Records []*MemberRecords     `protobuf:"bytes,5,rep,name=records,proto3" json:"records,omitempty"`
	Msg     []*InviteBatchResult `protobuf:"bytes,6,rep,name=msg,proto3" json:"msg,omitempty"`
	UserMap []*PassageUser       `protobuf:"bytes,7,rep,name=userMap,proto3" json:"userMap,omitempty"`
	Passage []*Passage           `protobuf:"bytes,8,rep,name=passage,proto3" json:"passage,omitempty"`
}

func (x *PassageResMap) Reset() {
	*x = PassageResMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassageResMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassageResMap) ProtoMessage() {}

func (x *PassageResMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassageResMap.ProtoReflect.Descriptor instead.
func (*PassageResMap) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{60}
}

func (x *PassageResMap) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PassageResMap) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PassageResMap) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *PassageResMap) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PassageResMap) GetRecords() []*MemberRecords {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *PassageResMap) GetMsg() []*InviteBatchResult {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *PassageResMap) GetUserMap() []*PassageUser {
	if x != nil {
		return x.UserMap
	}
	return nil
}

func (x *PassageResMap) GetPassage() []*Passage {
	if x != nil {
		return x.Passage
	}
	return nil
}

type PassageMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int64      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Size    int64      `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Pages   int64      `protobuf:"varint,3,opt,name=pages,proto3" json:"pages,omitempty"`
	Current int64      `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`
	Records []*Passage `protobuf:"bytes,8,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *PassageMap) Reset() {
	*x = PassageMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassageMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassageMap) ProtoMessage() {}

func (x *PassageMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassageMap.ProtoReflect.Descriptor instead.
func (*PassageMap) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{61}
}

func (x *PassageMap) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PassageMap) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PassageMap) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *PassageMap) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PassageMap) GetRecords() []*Passage {
	if x != nil {
		return x.Records
	}
	return nil
}

type PassageSpotMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Size    int64          `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Pages   int64          `protobuf:"varint,3,opt,name=pages,proto3" json:"pages,omitempty"`
	Current int64          `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`
	Records []*PassageSpot `protobuf:"bytes,8,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *PassageSpotMap) Reset() {
	*x = PassageSpotMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassageSpotMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassageSpotMap) ProtoMessage() {}

func (x *PassageSpotMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassageSpotMap.ProtoReflect.Descriptor instead.
func (*PassageSpotMap) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{62}
}

func (x *PassageSpotMap) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PassageSpotMap) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PassageSpotMap) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *PassageSpotMap) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PassageSpotMap) GetRecords() []*PassageSpot {
	if x != nil {
		return x.Records
	}
	return nil
}

type MemberRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UserUuid   string   `protobuf:"bytes,2,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	InsideUuid string   `protobuf:"bytes,3,opt,name=insideUuid,proto3" json:"insideUuid,omitempty"`
	Phone      string   `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Avatar     string   `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Name       string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Company    string   `protobuf:"bytes,7,opt,name=company,proto3" json:"company,omitempty"`
	Department []string `protobuf:"bytes,8,rep,name=department,proto3" json:"department,omitempty"`
	Gender     string   `protobuf:"bytes,9,opt,name=gender,proto3" json:"gender,omitempty"`
	Top        bool     `protobuf:"varint,10,opt,name=top,proto3" json:"top,omitempty"`
}

func (x *MemberRecords) Reset() {
	*x = MemberRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberRecords) ProtoMessage() {}

func (x *MemberRecords) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberRecords.ProtoReflect.Descriptor instead.
func (*MemberRecords) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{63}
}

func (x *MemberRecords) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *MemberRecords) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *MemberRecords) GetInsideUuid() string {
	if x != nil {
		return x.InsideUuid
	}
	return ""
}

func (x *MemberRecords) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *MemberRecords) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *MemberRecords) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MemberRecords) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *MemberRecords) GetDepartment() []string {
	if x != nil {
		return x.Department
	}
	return nil
}

func (x *MemberRecords) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *MemberRecords) GetTop() bool {
	if x != nil {
		return x.Top
	}
	return false
}

type InviteBatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Phone     string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	ResReason string `protobuf:"bytes,4,opt,name=resReason,proto3" json:"resReason,omitempty"`
	Res       string `protobuf:"bytes,5,opt,name=res,proto3" json:"res,omitempty"`
	End       string `protobuf:"bytes,6,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *InviteBatchResult) Reset() {
	*x = InviteBatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteBatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteBatchResult) ProtoMessage() {}

func (x *InviteBatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteBatchResult.ProtoReflect.Descriptor instead.
func (*InviteBatchResult) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{64}
}

func (x *InviteBatchResult) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *InviteBatchResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InviteBatchResult) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *InviteBatchResult) GetResReason() string {
	if x != nil {
		return x.ResReason
	}
	return ""
}

func (x *InviteBatchResult) GetRes() string {
	if x != nil {
		return x.Res
	}
	return ""
}

func (x *InviteBatchResult) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type PassageUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId       string   `protobuf:"bytes,1,opt,name=personId,proto3" json:"personId,omitempty"`
	Name           string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CardNo         string   `protobuf:"bytes,3,opt,name=cardNo,proto3" json:"cardNo,omitempty"`
	Note           string   `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	IcCode         string   `protobuf:"bytes,5,opt,name=icCode,proto3" json:"icCode,omitempty"`
	QrCode         string   `protobuf:"bytes,6,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	CarNumber      string   `protobuf:"bytes,7,opt,name=carNumber,proto3" json:"carNumber,omitempty"`
	Time           string   `protobuf:"bytes,8,opt,name=time,proto3" json:"time,omitempty"`
	EndTime        string   `protobuf:"bytes,9,opt,name=endTime,proto3" json:"endTime,omitempty"`
	ImgBase64      string   `protobuf:"bytes,10,opt,name=imgBase64,proto3" json:"imgBase64,omitempty"`
	VisitorPhone   string   `protobuf:"bytes,11,opt,name=visitorPhone,proto3" json:"visitorPhone,omitempty"`
	VisitorSex     string   `protobuf:"bytes,12,opt,name=visitorSex,proto3" json:"visitorSex,omitempty"`
	VisitedPhone   string   `protobuf:"bytes,13,opt,name=visitedPhone,proto3" json:"visitedPhone,omitempty"`
	VisitedName    string   `protobuf:"bytes,14,opt,name=visitedName,proto3" json:"visitedName,omitempty"`
	VisitedCompany string   `protobuf:"bytes,15,opt,name=visitedCompany,proto3" json:"visitedCompany,omitempty"`
	VisitedUnit    []string `protobuf:"bytes,16,rep,name=visitedUnit,proto3" json:"visitedUnit,omitempty"`
	VisitedSex     string   `protobuf:"bytes,17,opt,name=visitedSex,proto3" json:"visitedSex,omitempty"`
	Reason         string   `protobuf:"bytes,18,opt,name=reason,proto3" json:"reason,omitempty"`
	Area           string   `protobuf:"bytes,19,opt,name=area,proto3" json:"area,omitempty"`
	InsideUuid     string   `protobuf:"bytes,20,opt,name=insideUuid,proto3" json:"insideUuid,omitempty"`
	Type           string   `protobuf:"bytes,21,opt,name=type,proto3" json:"type,omitempty"`
	Unit           string   `protobuf:"bytes,22,opt,name=unit,proto3" json:"unit,omitempty"`
	Passport       string   `protobuf:"bytes,23,opt,name=passport,proto3" json:"passport,omitempty"`
	DriverLicense  string   `protobuf:"bytes,24,opt,name=driverLicense,proto3" json:"driverLicense,omitempty"`
	SocialCard     string   `protobuf:"bytes,25,opt,name=socialCard,proto3" json:"socialCard,omitempty"`
	HkPass         string   `protobuf:"bytes,26,opt,name=hkPass,proto3" json:"hkPass,omitempty"`
	IcCard         string   `protobuf:"bytes,27,opt,name=icCard,proto3" json:"icCard,omitempty"`
}

func (x *PassageUser) Reset() {
	*x = PassageUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassageUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassageUser) ProtoMessage() {}

func (x *PassageUser) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassageUser.ProtoReflect.Descriptor instead.
func (*PassageUser) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{65}
}

func (x *PassageUser) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *PassageUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PassageUser) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *PassageUser) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *PassageUser) GetIcCode() string {
	if x != nil {
		return x.IcCode
	}
	return ""
}

func (x *PassageUser) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *PassageUser) GetCarNumber() string {
	if x != nil {
		return x.CarNumber
	}
	return ""
}

func (x *PassageUser) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *PassageUser) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *PassageUser) GetImgBase64() string {
	if x != nil {
		return x.ImgBase64
	}
	return ""
}

func (x *PassageUser) GetVisitorPhone() string {
	if x != nil {
		return x.VisitorPhone
	}
	return ""
}

func (x *PassageUser) GetVisitorSex() string {
	if x != nil {
		return x.VisitorSex
	}
	return ""
}

func (x *PassageUser) GetVisitedPhone() string {
	if x != nil {
		return x.VisitedPhone
	}
	return ""
}

func (x *PassageUser) GetVisitedName() string {
	if x != nil {
		return x.VisitedName
	}
	return ""
}

func (x *PassageUser) GetVisitedCompany() string {
	if x != nil {
		return x.VisitedCompany
	}
	return ""
}

func (x *PassageUser) GetVisitedUnit() []string {
	if x != nil {
		return x.VisitedUnit
	}
	return nil
}

func (x *PassageUser) GetVisitedSex() string {
	if x != nil {
		return x.VisitedSex
	}
	return ""
}

func (x *PassageUser) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PassageUser) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *PassageUser) GetInsideUuid() string {
	if x != nil {
		return x.InsideUuid
	}
	return ""
}

func (x *PassageUser) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PassageUser) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *PassageUser) GetPassport() string {
	if x != nil {
		return x.Passport
	}
	return ""
}

func (x *PassageUser) GetDriverLicense() string {
	if x != nil {
		return x.DriverLicense
	}
	return ""
}

func (x *PassageUser) GetSocialCard() string {
	if x != nil {
		return x.SocialCard
	}
	return ""
}

func (x *PassageUser) GetHkPass() string {
	if x != nil {
		return x.HkPass
	}
	return ""
}

func (x *PassageUser) GetIcCard() string {
	if x != nil {
		return x.IcCard
	}
	return ""
}

type Passage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                  string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	InsideUuid            string   `protobuf:"bytes,2,opt,name=insideUuid,proto3" json:"insideUuid,omitempty"`
	InsideName            string   `protobuf:"bytes,3,opt,name=insideName,proto3" json:"insideName,omitempty"`
	InsidePhone           string   `protobuf:"bytes,4,opt,name=insidePhone,proto3" json:"insidePhone,omitempty"`
	InsideGender          string   `protobuf:"bytes,5,opt,name=insideGender,proto3" json:"insideGender,omitempty"`
	InsideAvatar          string   `protobuf:"bytes,6,opt,name=insideAvatar,proto3" json:"insideAvatar,omitempty"`
	UserUuid              string   `protobuf:"bytes,7,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	Name                  string   `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Phone                 string   `protobuf:"bytes,9,opt,name=phone,proto3" json:"phone,omitempty"`
	Gender                string   `protobuf:"bytes,10,opt,name=gender,proto3" json:"gender,omitempty"`
	IdCard                string   `protobuf:"bytes,11,opt,name=idCard,proto3" json:"idCard,omitempty"`
	InsideDepString       string   `protobuf:"bytes,12,opt,name=insideDepString,proto3" json:"insideDepString,omitempty"`
	InsideDep             []string `protobuf:"bytes,13,rep,name=insideDep,proto3" json:"insideDep,omitempty"`
	Avatar                string   `protobuf:"bytes,14,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Reason                string   `protobuf:"bytes,15,opt,name=reason,proto3" json:"reason,omitempty"`
	Note                  string   `protobuf:"bytes,16,opt,name=note,proto3" json:"note,omitempty"`
	Address               string   `protobuf:"bytes,17,opt,name=address,proto3" json:"address,omitempty"`
	VisitAddress          string   `protobuf:"bytes,18,opt,name=visitAddress,proto3" json:"visitAddress,omitempty"`
	Unit                  string   `protobuf:"bytes,19,opt,name=unit,proto3" json:"unit,omitempty"`
	StartTime             string   `protobuf:"bytes,20,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime               string   `protobuf:"bytes,21,opt,name=endTime,proto3" json:"endTime,omitempty"`
	VisitTime             string   `protobuf:"bytes,22,opt,name=visitTime,proto3" json:"visitTime,omitempty"`
	LeaveTime             string   `protobuf:"bytes,23,opt,name=leaveTime,proto3" json:"leaveTime,omitempty"`
	CarNumber             string   `protobuf:"bytes,24,opt,name=carNumber,proto3" json:"carNumber,omitempty"`
	HealthCode            string   `protobuf:"bytes,25,opt,name=healthCode,proto3" json:"healthCode,omitempty"`
	ExtendField           string   `protobuf:"bytes,26,opt,name=extendField,proto3" json:"extendField,omitempty"`
	Arrive                string   `protobuf:"bytes,27,opt,name=arrive,proto3" json:"arrive,omitempty"`
	Status                string   `protobuf:"bytes,28,opt,name=status,proto3" json:"status,omitempty"`
	Type                  string   `protobuf:"bytes,29,opt,name=type,proto3" json:"type,omitempty"`
	Expire                string   `protobuf:"bytes,30,opt,name=expire,proto3" json:"expire,omitempty"`
	CatchPhoto            string   `protobuf:"bytes,31,opt,name=catchPhoto,proto3" json:"catchPhoto,omitempty"`
	LeaveCatchPhoto       string   `protobuf:"bytes,32,opt,name=leaveCatchPhoto,proto3" json:"leaveCatchPhoto,omitempty"`
	ChildCompany          string   `protobuf:"bytes,33,opt,name=childCompany,proto3" json:"childCompany,omitempty"`
	ChildCompanyCache     string   `protobuf:"bytes,34,opt,name=childCompanyCache,proto3" json:"childCompanyCache,omitempty"`
	ChildCompanyArea      string   `protobuf:"bytes,35,opt,name=childCompanyArea,proto3" json:"childCompanyArea,omitempty"`
	ChildCompanyAreaCache string   `protobuf:"bytes,36,opt,name=childCompanyAreaCache,proto3" json:"childCompanyAreaCache,omitempty"`
	Form                  string   `protobuf:"bytes,37,opt,name=form,proto3" json:"form,omitempty"`
}

func (x *Passage) Reset() {
	*x = Passage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Passage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Passage) ProtoMessage() {}

func (x *Passage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Passage.ProtoReflect.Descriptor instead.
func (*Passage) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{66}
}

func (x *Passage) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Passage) GetInsideUuid() string {
	if x != nil {
		return x.InsideUuid
	}
	return ""
}

func (x *Passage) GetInsideName() string {
	if x != nil {
		return x.InsideName
	}
	return ""
}

func (x *Passage) GetInsidePhone() string {
	if x != nil {
		return x.InsidePhone
	}
	return ""
}

func (x *Passage) GetInsideGender() string {
	if x != nil {
		return x.InsideGender
	}
	return ""
}

func (x *Passage) GetInsideAvatar() string {
	if x != nil {
		return x.InsideAvatar
	}
	return ""
}

func (x *Passage) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *Passage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Passage) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Passage) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Passage) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *Passage) GetInsideDepString() string {
	if x != nil {
		return x.InsideDepString
	}
	return ""
}

func (x *Passage) GetInsideDep() []string {
	if x != nil {
		return x.InsideDep
	}
	return nil
}

func (x *Passage) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Passage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Passage) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Passage) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Passage) GetVisitAddress() string {
	if x != nil {
		return x.VisitAddress
	}
	return ""
}

func (x *Passage) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Passage) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Passage) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Passage) GetVisitTime() string {
	if x != nil {
		return x.VisitTime
	}
	return ""
}

func (x *Passage) GetLeaveTime() string {
	if x != nil {
		return x.LeaveTime
	}
	return ""
}

func (x *Passage) GetCarNumber() string {
	if x != nil {
		return x.CarNumber
	}
	return ""
}

func (x *Passage) GetHealthCode() string {
	if x != nil {
		return x.HealthCode
	}
	return ""
}

func (x *Passage) GetExtendField() string {
	if x != nil {
		return x.ExtendField
	}
	return ""
}

func (x *Passage) GetArrive() string {
	if x != nil {
		return x.Arrive
	}
	return ""
}

func (x *Passage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Passage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Passage) GetExpire() string {
	if x != nil {
		return x.Expire
	}
	return ""
}

func (x *Passage) GetCatchPhoto() string {
	if x != nil {
		return x.CatchPhoto
	}
	return ""
}

func (x *Passage) GetLeaveCatchPhoto() string {
	if x != nil {
		return x.LeaveCatchPhoto
	}
	return ""
}

func (x *Passage) GetChildCompany() string {
	if x != nil {
		return x.ChildCompany
	}
	return ""
}

func (x *Passage) GetChildCompanyCache() string {
	if x != nil {
		return x.ChildCompanyCache
	}
	return ""
}

func (x *Passage) GetChildCompanyArea() string {
	if x != nil {
		return x.ChildCompanyArea
	}
	return ""
}

func (x *Passage) GetChildCompanyAreaCache() string {
	if x != nil {
		return x.ChildCompanyAreaCache
	}
	return ""
}

func (x *Passage) GetForm() string {
	if x != nil {
		return x.Form
	}
	return ""
}

type PassageSpot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid               string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	VisitNo            string `protobuf:"bytes,2,opt,name=VisitNo,proto3" json:"VisitNo,omitempty"`
	VisitorName        string `protobuf:"bytes,3,opt,name=VisitorName,proto3" json:"VisitorName,omitempty"`
	CertPhoto          string `protobuf:"bytes,4,opt,name=CertPhoto,proto3" json:"CertPhoto,omitempty"`
	CatchPhoto         string `protobuf:"bytes,5,opt,name=CatchPhoto,proto3" json:"CatchPhoto,omitempty"`
	CertNumber         string `protobuf:"bytes,6,opt,name=CertNumber,proto3" json:"CertNumber,omitempty"`
	VisitedName        string `protobuf:"bytes,7,opt,name=VisitedName,proto3" json:"VisitedName,omitempty"`
	VisitTime          string `protobuf:"bytes,8,opt,name=VisitTime,proto3" json:"VisitTime,omitempty"`
	LeaveTime          string `protobuf:"bytes,9,opt,name=LeaveTime,proto3" json:"LeaveTime,omitempty"`
	Status             int64  `protobuf:"varint,10,opt,name=Status,proto3" json:"Status,omitempty"`
	CardNo             string `protobuf:"bytes,11,opt,name=CardNo,proto3" json:"CardNo,omitempty"`
	InDoorName         string `protobuf:"bytes,12,opt,name=InDoorName,proto3" json:"InDoorName,omitempty"`
	OutDoorName        string `protobuf:"bytes,13,opt,name=OutDoorName,proto3" json:"OutDoorName,omitempty"`
	VisitorSex         string `protobuf:"bytes,14,opt,name=VisitorSex,proto3" json:"VisitorSex,omitempty"`
	CertKind           string `protobuf:"bytes,15,opt,name=CertKind,proto3" json:"CertKind,omitempty"`
	VisitorCompany     string `protobuf:"bytes,16,opt,name=VisitorCompany,proto3" json:"VisitorCompany,omitempty"`
	Reason             string `protobuf:"bytes,17,opt,name=Reason,proto3" json:"Reason,omitempty"`
	VisitorAddress     string `protobuf:"bytes,18,opt,name=VisitorAddress,proto3" json:"VisitorAddress,omitempty"`
	BelongsList        string `protobuf:"bytes,19,opt,name=BelongsList,proto3" json:"BelongsList,omitempty"`
	VisitorPhone       string `protobuf:"bytes,20,opt,name=VisitorPhone,proto3" json:"VisitorPhone,omitempty"`
	VisitorCount       int64  `protobuf:"varint,21,opt,name=VisitorCount,proto3" json:"VisitorCount,omitempty"`
	VisitedSex         string `protobuf:"bytes,22,opt,name=VisitedSex,proto3" json:"VisitedSex,omitempty"`
	VisitedCompany     string `protobuf:"bytes,23,opt,name=VisitedCompany,proto3" json:"VisitedCompany,omitempty"`
	VisitedDept        string `protobuf:"bytes,24,opt,name=VisitedDept,proto3" json:"VisitedDept,omitempty"`
	VisitedPost        string `protobuf:"bytes,25,opt,name=VisitedPost,proto3" json:"VisitedPost,omitempty"`
	VisitedRoomNum     string `protobuf:"bytes,26,opt,name=VisitedRoomNum,proto3" json:"VisitedRoomNum,omitempty"`
	VisitedTel         string `protobuf:"bytes,27,opt,name=VisitedTel,proto3" json:"VisitedTel,omitempty"`
	VisitedMobilePhone string `protobuf:"bytes,28,opt,name=VisitedMobilePhone,proto3" json:"VisitedMobilePhone,omitempty"`
	CarKind            string `protobuf:"bytes,29,opt,name=CarKind,proto3" json:"CarKind,omitempty"`
	CarNumber          string `protobuf:"bytes,30,opt,name=CarNumber,proto3" json:"CarNumber,omitempty"`
	DeviceNo           string `protobuf:"bytes,31,opt,name=DeviceNo,proto3" json:"DeviceNo,omitempty"`
	FaceScore          string `protobuf:"bytes,32,opt,name=FaceScore,proto3" json:"FaceScore,omitempty"`
	Extend             string `protobuf:"bytes,33,opt,name=Extend,proto3" json:"Extend,omitempty"`
}

func (x *PassageSpot) Reset() {
	*x = PassageSpot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassageSpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassageSpot) ProtoMessage() {}

func (x *PassageSpot) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassageSpot.ProtoReflect.Descriptor instead.
func (*PassageSpot) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{67}
}

func (x *PassageSpot) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PassageSpot) GetVisitNo() string {
	if x != nil {
		return x.VisitNo
	}
	return ""
}

func (x *PassageSpot) GetVisitorName() string {
	if x != nil {
		return x.VisitorName
	}
	return ""
}

func (x *PassageSpot) GetCertPhoto() string {
	if x != nil {
		return x.CertPhoto
	}
	return ""
}

func (x *PassageSpot) GetCatchPhoto() string {
	if x != nil {
		return x.CatchPhoto
	}
	return ""
}

func (x *PassageSpot) GetCertNumber() string {
	if x != nil {
		return x.CertNumber
	}
	return ""
}

func (x *PassageSpot) GetVisitedName() string {
	if x != nil {
		return x.VisitedName
	}
	return ""
}

func (x *PassageSpot) GetVisitTime() string {
	if x != nil {
		return x.VisitTime
	}
	return ""
}

func (x *PassageSpot) GetLeaveTime() string {
	if x != nil {
		return x.LeaveTime
	}
	return ""
}

func (x *PassageSpot) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PassageSpot) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *PassageSpot) GetInDoorName() string {
	if x != nil {
		return x.InDoorName
	}
	return ""
}

func (x *PassageSpot) GetOutDoorName() string {
	if x != nil {
		return x.OutDoorName
	}
	return ""
}

func (x *PassageSpot) GetVisitorSex() string {
	if x != nil {
		return x.VisitorSex
	}
	return ""
}

func (x *PassageSpot) GetCertKind() string {
	if x != nil {
		return x.CertKind
	}
	return ""
}

func (x *PassageSpot) GetVisitorCompany() string {
	if x != nil {
		return x.VisitorCompany
	}
	return ""
}

func (x *PassageSpot) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PassageSpot) GetVisitorAddress() string {
	if x != nil {
		return x.VisitorAddress
	}
	return ""
}

func (x *PassageSpot) GetBelongsList() string {
	if x != nil {
		return x.BelongsList
	}
	return ""
}

func (x *PassageSpot) GetVisitorPhone() string {
	if x != nil {
		return x.VisitorPhone
	}
	return ""
}

func (x *PassageSpot) GetVisitorCount() int64 {
	if x != nil {
		return x.VisitorCount
	}
	return 0
}

func (x *PassageSpot) GetVisitedSex() string {
	if x != nil {
		return x.VisitedSex
	}
	return ""
}

func (x *PassageSpot) GetVisitedCompany() string {
	if x != nil {
		return x.VisitedCompany
	}
	return ""
}

func (x *PassageSpot) GetVisitedDept() string {
	if x != nil {
		return x.VisitedDept
	}
	return ""
}

func (x *PassageSpot) GetVisitedPost() string {
	if x != nil {
		return x.VisitedPost
	}
	return ""
}

func (x *PassageSpot) GetVisitedRoomNum() string {
	if x != nil {
		return x.VisitedRoomNum
	}
	return ""
}

func (x *PassageSpot) GetVisitedTel() string {
	if x != nil {
		return x.VisitedTel
	}
	return ""
}

func (x *PassageSpot) GetVisitedMobilePhone() string {
	if x != nil {
		return x.VisitedMobilePhone
	}
	return ""
}

func (x *PassageSpot) GetCarKind() string {
	if x != nil {
		return x.CarKind
	}
	return ""
}

func (x *PassageSpot) GetCarNumber() string {
	if x != nil {
		return x.CarNumber
	}
	return ""
}

func (x *PassageSpot) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

func (x *PassageSpot) GetFaceScore() string {
	if x != nil {
		return x.FaceScore
	}
	return ""
}

func (x *PassageSpot) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

type QuestionNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuestionNull) Reset() {
	*x = QuestionNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionNull) ProtoMessage() {}

func (x *QuestionNull) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionNull.ProtoReflect.Descriptor instead.
func (*QuestionNull) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{68}
}

type QuestionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string          `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title    string          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Describe string          `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
	Total    int64           `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Rows     []*QuestionInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
	Pages    int64           `protobuf:"varint,6,opt,name=pages,proto3" json:"pages,omitempty"`
	Size     int64           `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *QuestionList) Reset() {
	*x = QuestionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionList) ProtoMessage() {}

func (x *QuestionList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionList.ProtoReflect.Descriptor instead.
func (*QuestionList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{69}
}

func (x *QuestionList) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *QuestionList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuestionList) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *QuestionList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QuestionList) GetRows() []*QuestionInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *QuestionList) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *QuestionList) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type QuestionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Describe   string `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
	Type       string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Sort       int32  `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Data       string `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Require    bool   `protobuf:"varint,7,opt,name=require,proto3" json:"require,omitempty"`
	Total      int64  `protobuf:"varint,8,opt,name=total,proto3" json:"total,omitempty"`
	UpdateTime string `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	CreateTime string `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Action     bool   `protobuf:"varint,11,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *QuestionInfo) Reset() {
	*x = QuestionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionInfo) ProtoMessage() {}

func (x *QuestionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionInfo.ProtoReflect.Descriptor instead.
func (*QuestionInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{70}
}

func (x *QuestionInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *QuestionInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuestionInfo) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *QuestionInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QuestionInfo) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QuestionInfo) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *QuestionInfo) GetRequire() bool {
	if x != nil {
		return x.Require
	}
	return false
}

func (x *QuestionInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QuestionInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *QuestionInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QuestionInfo) GetAction() bool {
	if x != nil {
		return x.Action
	}
	return false
}

type AnswerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string        `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title    string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Describe string        `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
	Total    int64         `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Rows     []*AnswerInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
	Pages    int64         `protobuf:"varint,6,opt,name=pages,proto3" json:"pages,omitempty"`
	Size     int64         `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *AnswerList) Reset() {
	*x = AnswerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerList) ProtoMessage() {}

func (x *AnswerList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerList.ProtoReflect.Descriptor instead.
func (*AnswerList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{71}
}

func (x *AnswerList) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AnswerList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AnswerList) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *AnswerList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AnswerList) GetRows() []*AnswerInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *AnswerList) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *AnswerList) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type AnswerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Content      string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	UpdateTime   string `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	CreateTime   string `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Action       bool   `protobuf:"varint,5,opt,name=action,proto3" json:"action,omitempty"`
	QuestionUuid string `protobuf:"bytes,6,opt,name=question_uuid,json=questionUuid,proto3" json:"question_uuid,omitempty"`
	UserUuid     string `protobuf:"bytes,7,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	Require      bool   `protobuf:"varint,8,opt,name=require,proto3" json:"require,omitempty"`
	Type         string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Data         string `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	Name         string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Title        string `protobuf:"bytes,12,opt,name=title,proto3" json:"title,omitempty"`
	Describe     string `protobuf:"bytes,13,opt,name=describe,proto3" json:"describe,omitempty"`
	NaireUuid    string `protobuf:"bytes,14,opt,name=naire_uuid,json=naireUuid,proto3" json:"naire_uuid,omitempty"`
	Page         string `protobuf:"bytes,15,opt,name=page,proto3" json:"page,omitempty"`
	Size         string `protobuf:"bytes,16,opt,name=size,proto3" json:"size,omitempty"`
	Tenant       string `protobuf:"bytes,17,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *AnswerInfo) Reset() {
	*x = AnswerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerInfo) ProtoMessage() {}

func (x *AnswerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerInfo.ProtoReflect.Descriptor instead.
func (*AnswerInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{72}
}

func (x *AnswerInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AnswerInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AnswerInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *AnswerInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *AnswerInfo) GetAction() bool {
	if x != nil {
		return x.Action
	}
	return false
}

func (x *AnswerInfo) GetQuestionUuid() string {
	if x != nil {
		return x.QuestionUuid
	}
	return ""
}

func (x *AnswerInfo) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AnswerInfo) GetRequire() bool {
	if x != nil {
		return x.Require
	}
	return false
}

func (x *AnswerInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AnswerInfo) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *AnswerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AnswerInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AnswerInfo) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *AnswerInfo) GetNaireUuid() string {
	if x != nil {
		return x.NaireUuid
	}
	return ""
}

func (x *AnswerInfo) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *AnswerInfo) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *AnswerInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

type NaireList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title    string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Describe string       `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
	Total    int64        `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Rows     []*NaireInfo `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
	Pages    int64        `protobuf:"varint,6,opt,name=pages,proto3" json:"pages,omitempty"`
	Size     int64        `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *NaireList) Reset() {
	*x = NaireList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaireList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaireList) ProtoMessage() {}

func (x *NaireList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaireList.ProtoReflect.Descriptor instead.
func (*NaireList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{73}
}

func (x *NaireList) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *NaireList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NaireList) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *NaireList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *NaireList) GetRows() []*NaireInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *NaireList) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *NaireList) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type NaireInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Type       int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	UpdateTime string `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Status     int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Describe   string `protobuf:"bytes,6,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime string `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Tenant     string `protobuf:"bytes,8,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Action     bool   `protobuf:"varint,9,opt,name=action,proto3" json:"action,omitempty"`
	Page       string `protobuf:"bytes,10,opt,name=page,proto3" json:"page,omitempty"`
	Size       string `protobuf:"bytes,11,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *NaireInfo) Reset() {
	*x = NaireInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaireInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaireInfo) ProtoMessage() {}

func (x *NaireInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaireInfo.ProtoReflect.Descriptor instead.
func (*NaireInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{74}
}

func (x *NaireInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *NaireInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NaireInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *NaireInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *NaireInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NaireInfo) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *NaireInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *NaireInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *NaireInfo) GetAction() bool {
	if x != nil {
		return x.Action
	}
	return false
}

func (x *NaireInfo) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *NaireInfo) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

type Jwt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken  string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	ExpireIn     int64  `protobuf:"varint,3,opt,name=expireIn,proto3" json:"expireIn,omitempty"`
	Tenant       string `protobuf:"bytes,4,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *Jwt) Reset() {
	*x = Jwt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jwt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jwt) ProtoMessage() {}

func (x *Jwt) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jwt.ProtoReflect.Descriptor instead.
func (*Jwt) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{75}
}

func (x *Jwt) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *Jwt) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *Jwt) GetExpireIn() int64 {
	if x != nil {
		return x.ExpireIn
	}
	return 0
}

func (x *Jwt) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

type TaskNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskNull) Reset() {
	*x = TaskNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNull) ProtoMessage() {}

func (x *TaskNull) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNull.ProtoReflect.Descriptor instead.
func (*TaskNull) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{76}
}

type Amqp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Vhost    string `protobuf:"bytes,3,opt,name=vhost,proto3" json:"vhost,omitempty"`
	Exchange string `protobuf:"bytes,4,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Queue    string `protobuf:"bytes,5,opt,name=queue,proto3" json:"queue,omitempty"`
}

func (x *Amqp) Reset() {
	*x = Amqp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amqp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amqp) ProtoMessage() {}

func (x *Amqp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amqp.ProtoReflect.Descriptor instead.
func (*Amqp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{77}
}

func (x *Amqp) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Amqp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Amqp) GetVhost() string {
	if x != nil {
		return x.Vhost
	}
	return ""
}

func (x *Amqp) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Amqp) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

type AmqpTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task    string `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *AmqpTask) Reset() {
	*x = AmqpTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmqpTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmqpTask) ProtoMessage() {}

func (x *AmqpTask) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmqpTask.ProtoReflect.Descriptor instead.
func (*AmqpTask) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{78}
}

func (x *AmqpTask) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *AmqpTask) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type TenantNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TenantNull) Reset() {
	*x = TenantNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantNull) ProtoMessage() {}

func (x *TenantNull) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantNull.ProtoReflect.Descriptor instead.
func (*TenantNull) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{79}
}

type TenantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant                string  `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Uuid                  string  `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrgId                 string  `protobuf:"bytes,3,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Phone                 string  `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	AppId                 string  `protobuf:"bytes,5,opt,name=appId,proto3" json:"appId,omitempty"`
	AppSecret             string  `protobuf:"bytes,6,opt,name=appSecret,proto3" json:"appSecret,omitempty"`
	Token                 string  `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	AesKey                string  `protobuf:"bytes,8,opt,name=aesKey,proto3" json:"aesKey,omitempty"`
	Account               string  `protobuf:"bytes,9,opt,name=account,proto3" json:"account,omitempty"`
	Password              string  `protobuf:"bytes,10,opt,name=password,proto3" json:"password,omitempty"`
	Page                  int64   `protobuf:"varint,11,opt,name=page,proto3" json:"page,omitempty"`
	PageSize              int64   `protobuf:"varint,12,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Company               string  `protobuf:"bytes,13,opt,name=company,proto3" json:"company,omitempty"`
	Address               string  `protobuf:"bytes,14,opt,name=address,proto3" json:"address,omitempty"`
	NewPassword           string  `protobuf:"bytes,15,opt,name=newPassword,proto3" json:"newPassword,omitempty"`
	Contact               string  `protobuf:"bytes,16,opt,name=contact,proto3" json:"contact,omitempty"`
	Guidance              string  `protobuf:"bytes,17,opt,name=guidance,proto3" json:"guidance,omitempty"`
	Signature             string  `protobuf:"bytes,18,opt,name=signature,proto3" json:"signature,omitempty"`
	Banner                string  `protobuf:"bytes,19,opt,name=banner,proto3" json:"banner,omitempty"`
	ExpireIn              int64   `protobuf:"varint,20,opt,name=expireIn,proto3" json:"expireIn,omitempty"`
	WechatAppId           string  `protobuf:"bytes,21,opt,name=wechatAppId,proto3" json:"wechatAppId,omitempty"`
	WechatSecret          string  `protobuf:"bytes,22,opt,name=wechatSecret,proto3" json:"wechatSecret,omitempty"`
	OpenTM412462516       string  `protobuf:"bytes,23,opt,name=openTM412462516,proto3" json:"openTM412462516,omitempty"`
	OpenTM412936913       string  `protobuf:"bytes,24,opt,name=openTM412936913,proto3" json:"openTM412936913,omitempty"`
	OpenTM413233949       string  `protobuf:"bytes,25,opt,name=openTM413233949,proto3" json:"openTM413233949,omitempty"`
	OpenTM414566210       string  `protobuf:"bytes,26,opt,name=openTM414566210,proto3" json:"openTM414566210,omitempty"`
	OpenTM416747811       string  `protobuf:"bytes,27,opt,name=openTM416747811,proto3" json:"openTM416747811,omitempty"`
	OpenTM418189661       string  `protobuf:"bytes,28,opt,name=openTM418189661,proto3" json:"openTM418189661,omitempty"`
	OpenTM414471436       string  `protobuf:"bytes,29,opt,name=openTM414471436,proto3" json:"openTM414471436,omitempty"`
	WorkAesKey            string  `protobuf:"bytes,30,opt,name=workAesKey,proto3" json:"workAesKey,omitempty"`
	WorkAgentId           string  `protobuf:"bytes,31,opt,name=workAgentId,proto3" json:"workAgentId,omitempty"`
	WorkCorpId            string  `protobuf:"bytes,32,opt,name=workCorpId,proto3" json:"workCorpId,omitempty"`
	WorkSecret            string  `protobuf:"bytes,33,opt,name=workSecret,proto3" json:"workSecret,omitempty"`
	WorkToken             string  `protobuf:"bytes,34,opt,name=workToken,proto3" json:"workToken,omitempty"`
	DingTalkAesKey        string  `protobuf:"bytes,35,opt,name=dingTalkAesKey,proto3" json:"dingTalkAesKey,omitempty"`
	DingTalkAgentId       string  `protobuf:"bytes,36,opt,name=dingTalkAgentId,proto3" json:"dingTalkAgentId,omitempty"`
	DingTalkAppKey        string  `protobuf:"bytes,37,opt,name=dingTalkAppKey,proto3" json:"dingTalkAppKey,omitempty"`
	DingTalkAppSecret     string  `protobuf:"bytes,38,opt,name=dingTalkAppSecret,proto3" json:"dingTalkAppSecret,omitempty"`
	DingTalkCorpId        string  `protobuf:"bytes,39,opt,name=dingTalkCorpId,proto3" json:"dingTalkCorpId,omitempty"`
	DingTalkToken         string  `protobuf:"bytes,40,opt,name=dingTalkToken,proto3" json:"dingTalkToken,omitempty"`
	LarkAppId             string  `protobuf:"bytes,41,opt,name=larkAppId,proto3" json:"larkAppId,omitempty"`
	LarkAppSecret         string  `protobuf:"bytes,42,opt,name=larkAppSecret,proto3" json:"larkAppSecret,omitempty"`
	LarkEncryptKey        string  `protobuf:"bytes,43,opt,name=larkEncryptKey,proto3" json:"larkEncryptKey,omitempty"`
	LarkVerificationToken string  `protobuf:"bytes,44,opt,name=larkVerificationToken,proto3" json:"larkVerificationToken,omitempty"`
	AiAppId               string  `protobuf:"bytes,45,opt,name=aiAppId,proto3" json:"aiAppId,omitempty"`
	AiAppSecret           string  `protobuf:"bytes,46,opt,name=aiAppSecret,proto3" json:"aiAppSecret,omitempty"`
	Client                float64 `protobuf:"fixed64,47,opt,name=client,proto3" json:"client,omitempty"`
	IsDebug               float64 `protobuf:"fixed64,48,opt,name=isDebug,proto3" json:"isDebug,omitempty"`
	IsIdCard              float64 `protobuf:"fixed64,49,opt,name=isIdCard,proto3" json:"isIdCard,omitempty"`
	Sync                  float64 `protobuf:"fixed64,50,opt,name=sync,proto3" json:"sync,omitempty"`
	IsFast                float64 `protobuf:"fixed64,51,opt,name=isFast,proto3" json:"isFast,omitempty"`
	IsFace                float64 `protobuf:"fixed64,52,opt,name=isFace,proto3" json:"isFace,omitempty"`
	IsSkip                float64 `protobuf:"fixed64,53,opt,name=isSkip,proto3" json:"isSkip,omitempty"`
	IsGFast               float64 `protobuf:"fixed64,54,opt,name=isGFast,proto3" json:"isGFast,omitempty"`
	IsGFace               float64 `protobuf:"fixed64,55,opt,name=isGFace,proto3" json:"isGFace,omitempty"`
	IsGSkip               float64 `protobuf:"fixed64,56,opt,name=isGSkip,proto3" json:"isGSkip,omitempty"`
	IsGIdCard             float64 `protobuf:"fixed64,57,opt,name=isGIdCard,proto3" json:"isGIdCard,omitempty"`
	CertStyle             float64 `protobuf:"fixed64,58,opt,name=certStyle,proto3" json:"certStyle,omitempty"`
	BookNum               float64 `protobuf:"fixed64,59,opt,name=bookNum,proto3" json:"bookNum,omitempty"`
	InviteNum             float64 `protobuf:"fixed64,60,opt,name=inviteNum,proto3" json:"inviteNum,omitempty"`
	RegionId              string  `protobuf:"bytes,61,opt,name=regionId,proto3" json:"regionId,omitempty"`
	AccessKeyId           string  `protobuf:"bytes,62,opt,name=accessKeyId,proto3" json:"accessKeyId,omitempty"`
	AccessKeySecret       string  `protobuf:"bytes,63,opt,name=accessKeySecret,proto3" json:"accessKeySecret,omitempty"`
	SmsSignature          string  `protobuf:"bytes,64,opt,name=smsSignature,proto3" json:"smsSignature,omitempty"`
	SmsTemplateCode       string  `protobuf:"bytes,65,opt,name=smsTemplateCode,proto3" json:"smsTemplateCode,omitempty"`
	SmsTemplateInv        string  `protobuf:"bytes,66,opt,name=smsTemplateInv,proto3" json:"smsTemplateInv,omitempty"`
	FaceApiKey            string  `protobuf:"bytes,67,opt,name=faceApiKey,proto3" json:"faceApiKey,omitempty"`
	FaceApiSecret         string  `protobuf:"bytes,68,opt,name=faceApiSecret,proto3" json:"faceApiSecret,omitempty"`
	Domain                string  `protobuf:"bytes,69,opt,name=domain,proto3" json:"domain,omitempty"`
	Version               string  `protobuf:"bytes,70,opt,name=version,proto3" json:"version,omitempty"`
	Copyright             string  `protobuf:"bytes,71,opt,name=copyright,proto3" json:"copyright,omitempty"`
	Support               string  `protobuf:"bytes,72,opt,name=support,proto3" json:"support,omitempty"`
	Logo                  string  `protobuf:"bytes,73,opt,name=logo,proto3" json:"logo,omitempty"`
	Wiki                  string  `protobuf:"bytes,74,opt,name=wiki,proto3" json:"wiki,omitempty"`
	Logs                  string  `protobuf:"bytes,75,opt,name=logs,proto3" json:"logs,omitempty"`
	Notice                string  `protobuf:"bytes,76,opt,name=notice,proto3" json:"notice,omitempty"`
	Edge                  string  `protobuf:"bytes,77,opt,name=edge,proto3" json:"edge,omitempty"`
	Amqp                  string  `protobuf:"bytes,78,opt,name=amqp,proto3" json:"amqp,omitempty"`
	RecordNo              string  `protobuf:"bytes,79,opt,name=recordNo,proto3" json:"recordNo,omitempty"`
	YunPath               string  `protobuf:"bytes,80,opt,name=yunPath,proto3" json:"yunPath,omitempty"`
	IYunAppId             string  `protobuf:"bytes,81,opt,name=iYunAppId,proto3" json:"iYunAppId,omitempty"`
	IYunAppSecret         string  `protobuf:"bytes,82,opt,name=iYunAppSecret,proto3" json:"iYunAppSecret,omitempty"`
}

func (x *TenantReq) Reset() {
	*x = TenantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantReq) ProtoMessage() {}

func (x *TenantReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantReq.ProtoReflect.Descriptor instead.
func (*TenantReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{80}
}

func (x *TenantReq) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *TenantReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TenantReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *TenantReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *TenantReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *TenantReq) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

func (x *TenantReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TenantReq) GetAesKey() string {
	if x != nil {
		return x.AesKey
	}
	return ""
}

func (x *TenantReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *TenantReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TenantReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TenantReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TenantReq) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *TenantReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TenantReq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *TenantReq) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *TenantReq) GetGuidance() string {
	if x != nil {
		return x.Guidance
	}
	return ""
}

func (x *TenantReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *TenantReq) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *TenantReq) GetExpireIn() int64 {
	if x != nil {
		return x.ExpireIn
	}
	return 0
}

func (x *TenantReq) GetWechatAppId() string {
	if x != nil {
		return x.WechatAppId
	}
	return ""
}

func (x *TenantReq) GetWechatSecret() string {
	if x != nil {
		return x.WechatSecret
	}
	return ""
}

func (x *TenantReq) GetOpenTM412462516() string {
	if x != nil {
		return x.OpenTM412462516
	}
	return ""
}

func (x *TenantReq) GetOpenTM412936913() string {
	if x != nil {
		return x.OpenTM412936913
	}
	return ""
}

func (x *TenantReq) GetOpenTM413233949() string {
	if x != nil {
		return x.OpenTM413233949
	}
	return ""
}

func (x *TenantReq) GetOpenTM414566210() string {
	if x != nil {
		return x.OpenTM414566210
	}
	return ""
}

func (x *TenantReq) GetOpenTM416747811() string {
	if x != nil {
		return x.OpenTM416747811
	}
	return ""
}

func (x *TenantReq) GetOpenTM418189661() string {
	if x != nil {
		return x.OpenTM418189661
	}
	return ""
}

func (x *TenantReq) GetOpenTM414471436() string {
	if x != nil {
		return x.OpenTM414471436
	}
	return ""
}

func (x *TenantReq) GetWorkAesKey() string {
	if x != nil {
		return x.WorkAesKey
	}
	return ""
}

func (x *TenantReq) GetWorkAgentId() string {
	if x != nil {
		return x.WorkAgentId
	}
	return ""
}

func (x *TenantReq) GetWorkCorpId() string {
	if x != nil {
		return x.WorkCorpId
	}
	return ""
}

func (x *TenantReq) GetWorkSecret() string {
	if x != nil {
		return x.WorkSecret
	}
	return ""
}

func (x *TenantReq) GetWorkToken() string {
	if x != nil {
		return x.WorkToken
	}
	return ""
}

func (x *TenantReq) GetDingTalkAesKey() string {
	if x != nil {
		return x.DingTalkAesKey
	}
	return ""
}

func (x *TenantReq) GetDingTalkAgentId() string {
	if x != nil {
		return x.DingTalkAgentId
	}
	return ""
}

func (x *TenantReq) GetDingTalkAppKey() string {
	if x != nil {
		return x.DingTalkAppKey
	}
	return ""
}

func (x *TenantReq) GetDingTalkAppSecret() string {
	if x != nil {
		return x.DingTalkAppSecret
	}
	return ""
}

func (x *TenantReq) GetDingTalkCorpId() string {
	if x != nil {
		return x.DingTalkCorpId
	}
	return ""
}

func (x *TenantReq) GetDingTalkToken() string {
	if x != nil {
		return x.DingTalkToken
	}
	return ""
}

func (x *TenantReq) GetLarkAppId() string {
	if x != nil {
		return x.LarkAppId
	}
	return ""
}

func (x *TenantReq) GetLarkAppSecret() string {
	if x != nil {
		return x.LarkAppSecret
	}
	return ""
}

func (x *TenantReq) GetLarkEncryptKey() string {
	if x != nil {
		return x.LarkEncryptKey
	}
	return ""
}

func (x *TenantReq) GetLarkVerificationToken() string {
	if x != nil {
		return x.LarkVerificationToken
	}
	return ""
}

func (x *TenantReq) GetAiAppId() string {
	if x != nil {
		return x.AiAppId
	}
	return ""
}

func (x *TenantReq) GetAiAppSecret() string {
	if x != nil {
		return x.AiAppSecret
	}
	return ""
}

func (x *TenantReq) GetClient() float64 {
	if x != nil {
		return x.Client
	}
	return 0
}

func (x *TenantReq) GetIsDebug() float64 {
	if x != nil {
		return x.IsDebug
	}
	return 0
}

func (x *TenantReq) GetIsIdCard() float64 {
	if x != nil {
		return x.IsIdCard
	}
	return 0
}

func (x *TenantReq) GetSync() float64 {
	if x != nil {
		return x.Sync
	}
	return 0
}

func (x *TenantReq) GetIsFast() float64 {
	if x != nil {
		return x.IsFast
	}
	return 0
}

func (x *TenantReq) GetIsFace() float64 {
	if x != nil {
		return x.IsFace
	}
	return 0
}

func (x *TenantReq) GetIsSkip() float64 {
	if x != nil {
		return x.IsSkip
	}
	return 0
}

func (x *TenantReq) GetIsGFast() float64 {
	if x != nil {
		return x.IsGFast
	}
	return 0
}

func (x *TenantReq) GetIsGFace() float64 {
	if x != nil {
		return x.IsGFace
	}
	return 0
}

func (x *TenantReq) GetIsGSkip() float64 {
	if x != nil {
		return x.IsGSkip
	}
	return 0
}

func (x *TenantReq) GetIsGIdCard() float64 {
	if x != nil {
		return x.IsGIdCard
	}
	return 0
}

func (x *TenantReq) GetCertStyle() float64 {
	if x != nil {
		return x.CertStyle
	}
	return 0
}

func (x *TenantReq) GetBookNum() float64 {
	if x != nil {
		return x.BookNum
	}
	return 0
}

func (x *TenantReq) GetInviteNum() float64 {
	if x != nil {
		return x.InviteNum
	}
	return 0
}

func (x *TenantReq) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *TenantReq) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *TenantReq) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *TenantReq) GetSmsSignature() string {
	if x != nil {
		return x.SmsSignature
	}
	return ""
}

func (x *TenantReq) GetSmsTemplateCode() string {
	if x != nil {
		return x.SmsTemplateCode
	}
	return ""
}

func (x *TenantReq) GetSmsTemplateInv() string {
	if x != nil {
		return x.SmsTemplateInv
	}
	return ""
}

func (x *TenantReq) GetFaceApiKey() string {
	if x != nil {
		return x.FaceApiKey
	}
	return ""
}

func (x *TenantReq) GetFaceApiSecret() string {
	if x != nil {
		return x.FaceApiSecret
	}
	return ""
}

func (x *TenantReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *TenantReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TenantReq) GetCopyright() string {
	if x != nil {
		return x.Copyright
	}
	return ""
}

func (x *TenantReq) GetSupport() string {
	if x != nil {
		return x.Support
	}
	return ""
}

func (x *TenantReq) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *TenantReq) GetWiki() string {
	if x != nil {
		return x.Wiki
	}
	return ""
}

func (x *TenantReq) GetLogs() string {
	if x != nil {
		return x.Logs
	}
	return ""
}

func (x *TenantReq) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *TenantReq) GetEdge() string {
	if x != nil {
		return x.Edge
	}
	return ""
}

func (x *TenantReq) GetAmqp() string {
	if x != nil {
		return x.Amqp
	}
	return ""
}

func (x *TenantReq) GetRecordNo() string {
	if x != nil {
		return x.RecordNo
	}
	return ""
}

func (x *TenantReq) GetYunPath() string {
	if x != nil {
		return x.YunPath
	}
	return ""
}

func (x *TenantReq) GetIYunAppId() string {
	if x != nil {
		return x.IYunAppId
	}
	return ""
}

func (x *TenantReq) GetIYunAppSecret() string {
	if x != nil {
		return x.IYunAppSecret
	}
	return ""
}

type TenantRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant    *Tenant `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Account   string  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Uuid      string  `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Contact   string  `protobuf:"bytes,4,opt,name=contact,proto3" json:"contact,omitempty"`
	ExpireIn  int64   `protobuf:"varint,5,opt,name=expireIn,proto3" json:"expireIn,omitempty"`
	Company   string  `protobuf:"bytes,6,opt,name=company,proto3" json:"company,omitempty"`
	Address   string  `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Signature string  `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
	Banner    string  `protobuf:"bytes,9,opt,name=banner,proto3" json:"banner,omitempty"`
	Phone     string  `protobuf:"bytes,10,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *TenantRes) Reset() {
	*x = TenantRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantRes) ProtoMessage() {}

func (x *TenantRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantRes.ProtoReflect.Descriptor instead.
func (*TenantRes) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{81}
}

func (x *TenantRes) GetTenant() *Tenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *TenantRes) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *TenantRes) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TenantRes) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *TenantRes) GetExpireIn() int64 {
	if x != nil {
		return x.ExpireIn
	}
	return 0
}

func (x *TenantRes) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *TenantRes) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TenantRes) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *TenantRes) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *TenantRes) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type TenantResMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64     `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64     `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total    int64     `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Rows     []*Tenant `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *TenantResMap) Reset() {
	*x = TenantResMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantResMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantResMap) ProtoMessage() {}

func (x *TenantResMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantResMap.ProtoReflect.Descriptor instead.
func (*TenantResMap) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{82}
}

func (x *TenantResMap) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TenantResMap) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TenantResMap) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TenantResMap) GetRows() []*Tenant {
	if x != nil {
		return x.Rows
	}
	return nil
}

type Tenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WechatAppId           string  `protobuf:"bytes,1,opt,name=wechatAppId,proto3" json:"wechatAppId,omitempty"`
	WechatSecret          string  `protobuf:"bytes,2,opt,name=wechatSecret,proto3" json:"wechatSecret,omitempty"`
	OpenTM412462516       string  `protobuf:"bytes,3,opt,name=openTM412462516,proto3" json:"openTM412462516,omitempty"`
	OpenTM412936913       string  `protobuf:"bytes,4,opt,name=openTM412936913,proto3" json:"openTM412936913,omitempty"`
	OpenTM413233949       string  `protobuf:"bytes,5,opt,name=openTM413233949,proto3" json:"openTM413233949,omitempty"`
	OpenTM414471436       string  `protobuf:"bytes,6,opt,name=openTM414471436,proto3" json:"openTM414471436,omitempty"`
	OpenTM414566210       string  `protobuf:"bytes,7,opt,name=openTM414566210,proto3" json:"openTM414566210,omitempty"`
	OpenTM416747811       string  `protobuf:"bytes,8,opt,name=openTM416747811,proto3" json:"openTM416747811,omitempty"`
	OpenTM418189661       string  `protobuf:"bytes,9,opt,name=openTM418189661,proto3" json:"openTM418189661,omitempty"`
	WorkCorpId            string  `protobuf:"bytes,10,opt,name=workCorpId,proto3" json:"workCorpId,omitempty"`
	WorkAesKey            string  `protobuf:"bytes,11,opt,name=workAesKey,proto3" json:"workAesKey,omitempty"`
	WorkAgentId           string  `protobuf:"bytes,12,opt,name=workAgentId,proto3" json:"workAgentId,omitempty"`
	WorkSecret            string  `protobuf:"bytes,13,opt,name=workSecret,proto3" json:"workSecret,omitempty"`
	WorkToken             string  `protobuf:"bytes,14,opt,name=workToken,proto3" json:"workToken,omitempty"`
	DingTalkAesKey        string  `protobuf:"bytes,15,opt,name=dingTalkAesKey,proto3" json:"dingTalkAesKey,omitempty"`
	DingTalkAgentId       string  `protobuf:"bytes,16,opt,name=dingTalkAgentId,proto3" json:"dingTalkAgentId,omitempty"`
	DingTalkAppKey        string  `protobuf:"bytes,17,opt,name=dingTalkAppKey,proto3" json:"dingTalkAppKey,omitempty"`
	DingTalkAppSecret     string  `protobuf:"bytes,18,opt,name=dingTalkAppSecret,proto3" json:"dingTalkAppSecret,omitempty"`
	DingTalkCorpId        string  `protobuf:"bytes,19,opt,name=dingTalkCorpId,proto3" json:"dingTalkCorpId,omitempty"`
	DingTalkToken         string  `protobuf:"bytes,20,opt,name=dingTalkToken,proto3" json:"dingTalkToken,omitempty"`
	LarkAppId             string  `protobuf:"bytes,21,opt,name=larkAppId,proto3" json:"larkAppId,omitempty"`
	LarkAppSecret         string  `protobuf:"bytes,22,opt,name=larkAppSecret,proto3" json:"larkAppSecret,omitempty"`
	LarkEncryptKey        string  `protobuf:"bytes,23,opt,name=larkEncryptKey,proto3" json:"larkEncryptKey,omitempty"`
	LarkVerificationToken string  `protobuf:"bytes,24,opt,name=larkVerificationToken,proto3" json:"larkVerificationToken,omitempty"`
	Client                int32   `protobuf:"varint,25,opt,name=client,proto3" json:"client,omitempty"`
	Uuid                  string  `protobuf:"bytes,26,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AppId                 string  `protobuf:"bytes,27,opt,name=appId,proto3" json:"appId,omitempty"`
	AppSecret             string  `protobuf:"bytes,28,opt,name=appSecret,proto3" json:"appSecret,omitempty"`
	OrgId                 string  `protobuf:"bytes,29,opt,name=orgId,proto3" json:"orgId,omitempty"`
	AiAppId               string  `protobuf:"bytes,30,opt,name=aiAppId,proto3" json:"aiAppId,omitempty"`
	AiAppSecret           string  `protobuf:"bytes,31,opt,name=aiAppSecret,proto3" json:"aiAppSecret,omitempty"`
	Token                 string  `protobuf:"bytes,32,opt,name=token,proto3" json:"token,omitempty"`
	AesKey                string  `protobuf:"bytes,33,opt,name=aesKey,proto3" json:"aesKey,omitempty"`
	Contact               string  `protobuf:"bytes,34,opt,name=contact,proto3" json:"contact,omitempty"`
	Phone                 string  `protobuf:"bytes,35,opt,name=phone,proto3" json:"phone,omitempty"`
	Account               string  `protobuf:"bytes,36,opt,name=account,proto3" json:"account,omitempty"`
	Password              string  `protobuf:"bytes,37,opt,name=password,proto3" json:"password,omitempty"`
	Company               string  `protobuf:"bytes,38,opt,name=company,proto3" json:"company,omitempty"`
	Address               string  `protobuf:"bytes,39,opt,name=address,proto3" json:"address,omitempty"`
	Guidance              string  `protobuf:"bytes,40,opt,name=guidance,proto3" json:"guidance,omitempty"`
	Banner                string  `protobuf:"bytes,41,opt,name=banner,proto3" json:"banner,omitempty"`
	Signature             string  `protobuf:"bytes,42,opt,name=signature,proto3" json:"signature,omitempty"`
	IsIdCard              int32   `protobuf:"varint,43,opt,name=isIdCard,proto3" json:"isIdCard,omitempty"`
	IsDebug               int32   `protobuf:"varint,44,opt,name=IsDebug,proto3" json:"IsDebug,omitempty"`
	Sync                  int32   `protobuf:"varint,45,opt,name=Sync,proto3" json:"Sync,omitempty"`
	ExpireIn              int64   `protobuf:"varint,46,opt,name=ExpireIn,proto3" json:"ExpireIn,omitempty"`
	Role                  int32   `protobuf:"varint,47,opt,name=Role,proto3" json:"Role,omitempty"`
	Source                int32   `protobuf:"varint,48,opt,name=Source,proto3" json:"Source,omitempty"`
	IsFast                int32   `protobuf:"varint,49,opt,name=IsFast,proto3" json:"IsFast,omitempty"`
	IsFace                int32   `protobuf:"varint,50,opt,name=IsFace,proto3" json:"IsFace,omitempty"`
	IsSkip                int32   `protobuf:"varint,51,opt,name=IsSkip,proto3" json:"IsSkip,omitempty"`
	IsGFast               int32   `protobuf:"varint,52,opt,name=IsGFast,proto3" json:"IsGFast,omitempty"`
	IsGFace               int32   `protobuf:"varint,53,opt,name=IsGFace,proto3" json:"IsGFace,omitempty"`
	IsGSkip               int32   `protobuf:"varint,54,opt,name=IsGSkip,proto3" json:"IsGSkip,omitempty"`
	IsGIdCard             int32   `protobuf:"varint,55,opt,name=IsGIdCard,proto3" json:"IsGIdCard,omitempty"`
	CertStyle             []int64 `protobuf:"varint,56,rep,packed,name=CertStyle,proto3" json:"CertStyle,omitempty"`
	BookNum               int64   `protobuf:"varint,57,opt,name=BookNum,proto3" json:"BookNum,omitempty"`
	InviteNum             int64   `protobuf:"varint,58,opt,name=InviteNum,proto3" json:"InviteNum,omitempty"`
}

func (x *Tenant) Reset() {
	*x = Tenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tenant) ProtoMessage() {}

func (x *Tenant) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tenant.ProtoReflect.Descriptor instead.
func (*Tenant) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{83}
}

func (x *Tenant) GetWechatAppId() string {
	if x != nil {
		return x.WechatAppId
	}
	return ""
}

func (x *Tenant) GetWechatSecret() string {
	if x != nil {
		return x.WechatSecret
	}
	return ""
}

func (x *Tenant) GetOpenTM412462516() string {
	if x != nil {
		return x.OpenTM412462516
	}
	return ""
}

func (x *Tenant) GetOpenTM412936913() string {
	if x != nil {
		return x.OpenTM412936913
	}
	return ""
}

func (x *Tenant) GetOpenTM413233949() string {
	if x != nil {
		return x.OpenTM413233949
	}
	return ""
}

func (x *Tenant) GetOpenTM414471436() string {
	if x != nil {
		return x.OpenTM414471436
	}
	return ""
}

func (x *Tenant) GetOpenTM414566210() string {
	if x != nil {
		return x.OpenTM414566210
	}
	return ""
}

func (x *Tenant) GetOpenTM416747811() string {
	if x != nil {
		return x.OpenTM416747811
	}
	return ""
}

func (x *Tenant) GetOpenTM418189661() string {
	if x != nil {
		return x.OpenTM418189661
	}
	return ""
}

func (x *Tenant) GetWorkCorpId() string {
	if x != nil {
		return x.WorkCorpId
	}
	return ""
}

func (x *Tenant) GetWorkAesKey() string {
	if x != nil {
		return x.WorkAesKey
	}
	return ""
}

func (x *Tenant) GetWorkAgentId() string {
	if x != nil {
		return x.WorkAgentId
	}
	return ""
}

func (x *Tenant) GetWorkSecret() string {
	if x != nil {
		return x.WorkSecret
	}
	return ""
}

func (x *Tenant) GetWorkToken() string {
	if x != nil {
		return x.WorkToken
	}
	return ""
}

func (x *Tenant) GetDingTalkAesKey() string {
	if x != nil {
		return x.DingTalkAesKey
	}
	return ""
}

func (x *Tenant) GetDingTalkAgentId() string {
	if x != nil {
		return x.DingTalkAgentId
	}
	return ""
}

func (x *Tenant) GetDingTalkAppKey() string {
	if x != nil {
		return x.DingTalkAppKey
	}
	return ""
}

func (x *Tenant) GetDingTalkAppSecret() string {
	if x != nil {
		return x.DingTalkAppSecret
	}
	return ""
}

func (x *Tenant) GetDingTalkCorpId() string {
	if x != nil {
		return x.DingTalkCorpId
	}
	return ""
}

func (x *Tenant) GetDingTalkToken() string {
	if x != nil {
		return x.DingTalkToken
	}
	return ""
}

func (x *Tenant) GetLarkAppId() string {
	if x != nil {
		return x.LarkAppId
	}
	return ""
}

func (x *Tenant) GetLarkAppSecret() string {
	if x != nil {
		return x.LarkAppSecret
	}
	return ""
}

func (x *Tenant) GetLarkEncryptKey() string {
	if x != nil {
		return x.LarkEncryptKey
	}
	return ""
}

func (x *Tenant) GetLarkVerificationToken() string {
	if x != nil {
		return x.LarkVerificationToken
	}
	return ""
}

func (x *Tenant) GetClient() int32 {
	if x != nil {
		return x.Client
	}
	return 0
}

func (x *Tenant) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Tenant) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Tenant) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

func (x *Tenant) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Tenant) GetAiAppId() string {
	if x != nil {
		return x.AiAppId
	}
	return ""
}

func (x *Tenant) GetAiAppSecret() string {
	if x != nil {
		return x.AiAppSecret
	}
	return ""
}

func (x *Tenant) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Tenant) GetAesKey() string {
	if x != nil {
		return x.AesKey
	}
	return ""
}

func (x *Tenant) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *Tenant) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Tenant) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Tenant) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Tenant) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Tenant) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Tenant) GetGuidance() string {
	if x != nil {
		return x.Guidance
	}
	return ""
}

func (x *Tenant) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *Tenant) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Tenant) GetIsIdCard() int32 {
	if x != nil {
		return x.IsIdCard
	}
	return 0
}

func (x *Tenant) GetIsDebug() int32 {
	if x != nil {
		return x.IsDebug
	}
	return 0
}

func (x *Tenant) GetSync() int32 {
	if x != nil {
		return x.Sync
	}
	return 0
}

func (x *Tenant) GetExpireIn() int64 {
	if x != nil {
		return x.ExpireIn
	}
	return 0
}

func (x *Tenant) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *Tenant) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *Tenant) GetIsFast() int32 {
	if x != nil {
		return x.IsFast
	}
	return 0
}

func (x *Tenant) GetIsFace() int32 {
	if x != nil {
		return x.IsFace
	}
	return 0
}

func (x *Tenant) GetIsSkip() int32 {
	if x != nil {
		return x.IsSkip
	}
	return 0
}

func (x *Tenant) GetIsGFast() int32 {
	if x != nil {
		return x.IsGFast
	}
	return 0
}

func (x *Tenant) GetIsGFace() int32 {
	if x != nil {
		return x.IsGFace
	}
	return 0
}

func (x *Tenant) GetIsGSkip() int32 {
	if x != nil {
		return x.IsGSkip
	}
	return 0
}

func (x *Tenant) GetIsGIdCard() int32 {
	if x != nil {
		return x.IsGIdCard
	}
	return 0
}

func (x *Tenant) GetCertStyle() []int64 {
	if x != nil {
		return x.CertStyle
	}
	return nil
}

func (x *Tenant) GetBookNum() int64 {
	if x != nil {
		return x.BookNum
	}
	return 0
}

func (x *Tenant) GetInviteNum() int64 {
	if x != nil {
		return x.InviteNum
	}
	return 0
}

type System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Init            bool   `protobuf:"varint,1,opt,name=init,proto3" json:"init,omitempty"`
	Running         int32  `protobuf:"varint,2,opt,name=running,proto3" json:"running,omitempty"`
	Version         string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Domain          string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	Copyright       string `protobuf:"bytes,5,opt,name=copyright,proto3" json:"copyright,omitempty"`
	Support         string `protobuf:"bytes,6,opt,name=support,proto3" json:"support,omitempty"`
	Logo            string `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo,omitempty"`
	Wiki            string `protobuf:"bytes,8,opt,name=wiki,proto3" json:"wiki,omitempty"`
	Logs            string `protobuf:"bytes,9,opt,name=logs,proto3" json:"logs,omitempty"`
	Notice          string `protobuf:"bytes,10,opt,name=notice,proto3" json:"notice,omitempty"`
	Edge            string `protobuf:"bytes,11,opt,name=edge,proto3" json:"edge,omitempty"`
	Amqp            string `protobuf:"bytes,12,opt,name=amqp,proto3" json:"amqp,omitempty"`
	RecordNo        string `protobuf:"bytes,13,opt,name=recordNo,proto3" json:"recordNo,omitempty"`
	YunPath         string `protobuf:"bytes,14,opt,name=yunPath,proto3" json:"yunPath,omitempty"`
	IYunAppId       string `protobuf:"bytes,15,opt,name=iYunAppId,proto3" json:"iYunAppId,omitempty"`
	IYunAppSecret   string `protobuf:"bytes,16,opt,name=iYunAppSecret,proto3" json:"iYunAppSecret,omitempty"`
	RegionId        string `protobuf:"bytes,17,opt,name=regionId,proto3" json:"regionId,omitempty"`
	AccessKeyId     string `protobuf:"bytes,18,opt,name=accessKeyId,proto3" json:"accessKeyId,omitempty"`
	AccessKeySecret string `protobuf:"bytes,19,opt,name=accessKeySecret,proto3" json:"accessKeySecret,omitempty"`
	SmsSignature    string `protobuf:"bytes,20,opt,name=smsSignature,proto3" json:"smsSignature,omitempty"`
	SmsTemplateCode string `protobuf:"bytes,21,opt,name=smsTemplateCode,proto3" json:"smsTemplateCode,omitempty"`
	SmsTemplateInv  string `protobuf:"bytes,22,opt,name=smsTemplateInv,proto3" json:"smsTemplateInv,omitempty"`
	FaceApiKey      string `protobuf:"bytes,23,opt,name=faceApiKey,proto3" json:"faceApiKey,omitempty"`
	FaceApiSecret   string `protobuf:"bytes,24,opt,name=faceApiSecret,proto3" json:"faceApiSecret,omitempty"`
}

func (x *System) Reset() {
	*x = System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System) ProtoMessage() {}

func (x *System) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System.ProtoReflect.Descriptor instead.
func (*System) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{84}
}

func (x *System) GetInit() bool {
	if x != nil {
		return x.Init
	}
	return false
}

func (x *System) GetRunning() int32 {
	if x != nil {
		return x.Running
	}
	return 0
}

func (x *System) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *System) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *System) GetCopyright() string {
	if x != nil {
		return x.Copyright
	}
	return ""
}

func (x *System) GetSupport() string {
	if x != nil {
		return x.Support
	}
	return ""
}

func (x *System) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *System) GetWiki() string {
	if x != nil {
		return x.Wiki
	}
	return ""
}

func (x *System) GetLogs() string {
	if x != nil {
		return x.Logs
	}
	return ""
}

func (x *System) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *System) GetEdge() string {
	if x != nil {
		return x.Edge
	}
	return ""
}

func (x *System) GetAmqp() string {
	if x != nil {
		return x.Amqp
	}
	return ""
}

func (x *System) GetRecordNo() string {
	if x != nil {
		return x.RecordNo
	}
	return ""
}

func (x *System) GetYunPath() string {
	if x != nil {
		return x.YunPath
	}
	return ""
}

func (x *System) GetIYunAppId() string {
	if x != nil {
		return x.IYunAppId
	}
	return ""
}

func (x *System) GetIYunAppSecret() string {
	if x != nil {
		return x.IYunAppSecret
	}
	return ""
}

func (x *System) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *System) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *System) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *System) GetSmsSignature() string {
	if x != nil {
		return x.SmsSignature
	}
	return ""
}

func (x *System) GetSmsTemplateCode() string {
	if x != nil {
		return x.SmsTemplateCode
	}
	return ""
}

func (x *System) GetSmsTemplateInv() string {
	if x != nil {
		return x.SmsTemplateInv
	}
	return ""
}

func (x *System) GetFaceApiKey() string {
	if x != nil {
		return x.FaceApiKey
	}
	return ""
}

func (x *System) GetFaceApiSecret() string {
	if x != nil {
		return x.FaceApiSecret
	}
	return ""
}

type ToolNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ToolNull) Reset() {
	*x = ToolNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolNull) ProtoMessage() {}

func (x *ToolNull) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolNull.ProtoReflect.Descriptor instead.
func (*ToolNull) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{85}
}

type Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value  string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Req) Reset() {
	*x = Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{86}
}

func (x *Req) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *Req) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Req) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Url struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ShortUrl string `protobuf:"bytes,2,opt,name=shortUrl,proto3" json:"shortUrl,omitempty"`
	LongUrl  string `protobuf:"bytes,3,opt,name=longUrl,proto3" json:"longUrl,omitempty"`
}

func (x *Url) Reset() {
	*x = Url{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Url) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Url) ProtoMessage() {}

func (x *Url) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Url.ProtoReflect.Descriptor instead.
func (*Url) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{87}
}

func (x *Url) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Url) GetShortUrl() string {
	if x != nil {
		return x.ShortUrl
	}
	return ""
}

func (x *Url) GetLongUrl() string {
	if x != nil {
		return x.LongUrl
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url        string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Stream     []byte `protobuf:"bytes,4,opt,name=stream,proto3" json:"stream,omitempty"`
	Type       string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Base64     string `protobuf:"bytes,6,opt,name=base64,proto3" json:"base64,omitempty"`
	Extension  string `protobuf:"bytes,7,opt,name=extension,proto3" json:"extension,omitempty"`
	ExpireTime string `protobuf:"bytes,8,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{88}
}

func (x *File) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *File) GetStream() []byte {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *File) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *File) GetBase64() string {
	if x != nil {
		return x.Base64
	}
	return ""
}

func (x *File) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *File) GetExpireTime() string {
	if x != nil {
		return x.ExpireTime
	}
	return ""
}

type WorkflowNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkflowNull) Reset() {
	*x = WorkflowNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowNull) ProtoMessage() {}

func (x *WorkflowNull) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowNull.ProtoReflect.Descriptor instead.
func (*WorkflowNull) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{89}
}

type RequestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid              string          `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Tenant            string          `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Type              float64         `protobuf:"fixed64,3,opt,name=type,proto3" json:"type,omitempty"`
	Name              string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Title             string          `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Default           string          `protobuf:"bytes,6,opt,name=default,proto3" json:"default,omitempty"`
	List              string          `protobuf:"bytes,7,opt,name=list,proto3" json:"list,omitempty"`
	Required          bool            `protobuf:"varint,8,opt,name=required,proto3" json:"required,omitempty"`
	Sort              float64         `protobuf:"fixed64,9,opt,name=sort,proto3" json:"sort,omitempty"`
	Multiple          float64         `protobuf:"fixed64,10,opt,name=multiple,proto3" json:"multiple,omitempty"`
	NodeUuid          string          `protobuf:"bytes,11,opt,name=node_uuid,json=nodeUuid,proto3" json:"node_uuid,omitempty"`
	ApprovalUuid      string          `protobuf:"bytes,12,opt,name=approval_uuid,json=approvalUuid,proto3" json:"approval_uuid,omitempty"`
	Recipients        string          `protobuf:"bytes,13,opt,name=recipients,proto3" json:"recipients,omitempty"`
	Pk                string          `protobuf:"bytes,14,opt,name=pk,proto3" json:"pk,omitempty"`
	NotifySponsorIn   bool            `protobuf:"varint,15,opt,name=notify_sponsor_in,json=notifySponsorIn,proto3" json:"notify_sponsor_in,omitempty"`
	NotifySponsorOver bool            `protobuf:"varint,16,opt,name=notify_sponsor_over,json=notifySponsorOver,proto3" json:"notify_sponsor_over,omitempty"`
	NotifyContactOver bool            `protobuf:"varint,17,opt,name=notify_contact_over,json=notifyContactOver,proto3" json:"notify_contact_over,omitempty"`
	NotifyGuestOut    float64         `protobuf:"fixed64,18,opt,name=notify_guest_out,json=notifyGuestOut,proto3" json:"notify_guest_out,omitempty"`
	NotifyMsg         float64         `protobuf:"fixed64,19,opt,name=notify_msg,json=notifyMsg,proto3" json:"notify_msg,omitempty"`
	Remark            string          `protobuf:"bytes,20,opt,name=remark,proto3" json:"remark,omitempty"`
	Status            float64         `protobuf:"fixed64,21,opt,name=status,proto3" json:"status,omitempty"`
	NotifyContactIn   bool            `protobuf:"varint,22,opt,name=notify_contact_in,json=notifyContactIn,proto3" json:"notify_contact_in,omitempty"`
	Nodes             []*ResponseInfo `protobuf:"bytes,23,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *RequestInfo) Reset() {
	*x = RequestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInfo) ProtoMessage() {}

func (x *RequestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInfo.ProtoReflect.Descriptor instead.
func (*RequestInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{90}
}

func (x *RequestInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RequestInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *RequestInfo) GetType() float64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RequestInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RequestInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RequestInfo) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *RequestInfo) GetList() string {
	if x != nil {
		return x.List
	}
	return ""
}

func (x *RequestInfo) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *RequestInfo) GetSort() float64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *RequestInfo) GetMultiple() float64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *RequestInfo) GetNodeUuid() string {
	if x != nil {
		return x.NodeUuid
	}
	return ""
}

func (x *RequestInfo) GetApprovalUuid() string {
	if x != nil {
		return x.ApprovalUuid
	}
	return ""
}

func (x *RequestInfo) GetRecipients() string {
	if x != nil {
		return x.Recipients
	}
	return ""
}

func (x *RequestInfo) GetPk() string {
	if x != nil {
		return x.Pk
	}
	return ""
}

func (x *RequestInfo) GetNotifySponsorIn() bool {
	if x != nil {
		return x.NotifySponsorIn
	}
	return false
}

func (x *RequestInfo) GetNotifySponsorOver() bool {
	if x != nil {
		return x.NotifySponsorOver
	}
	return false
}

func (x *RequestInfo) GetNotifyContactOver() bool {
	if x != nil {
		return x.NotifyContactOver
	}
	return false
}

func (x *RequestInfo) GetNotifyGuestOut() float64 {
	if x != nil {
		return x.NotifyGuestOut
	}
	return 0
}

func (x *RequestInfo) GetNotifyMsg() float64 {
	if x != nil {
		return x.NotifyMsg
	}
	return 0
}

func (x *RequestInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *RequestInfo) GetStatus() float64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RequestInfo) GetNotifyContactIn() bool {
	if x != nil {
		return x.NotifyContactIn
	}
	return false
}

func (x *RequestInfo) GetNodes() []*ResponseInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type ResponseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string      `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Type       int32       `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Sort       int64       `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Task       []*TaskInfo `protobuf:"bytes,4,rep,name=task,proto3" json:"task,omitempty"`
	Recipients []string    `protobuf:"bytes,5,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Count      int64       `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	ShowBack   bool        `protobuf:"varint,7,opt,name=show_back,json=showBack,proto3" json:"show_back,omitempty"`
	ShowCheck  bool        `protobuf:"varint,8,opt,name=show_check,json=showCheck,proto3" json:"show_check,omitempty"`
	Current    []string    `protobuf:"bytes,9,rep,name=current,proto3" json:"current,omitempty"`
}

func (x *ResponseInfo) Reset() {
	*x = ResponseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseInfo) ProtoMessage() {}

func (x *ResponseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseInfo.ProtoReflect.Descriptor instead.
func (*ResponseInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{91}
}

func (x *ResponseInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ResponseInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResponseInfo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ResponseInfo) GetTask() []*TaskInfo {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *ResponseInfo) GetRecipients() []string {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *ResponseInfo) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ResponseInfo) GetShowBack() bool {
	if x != nil {
		return x.ShowBack
	}
	return false
}

func (x *ResponseInfo) GetShowCheck() bool {
	if x != nil {
		return x.ShowCheck
	}
	return false
}

func (x *ResponseInfo) GetCurrent() []string {
	if x != nil {
		return x.Current
	}
	return nil
}

type TaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ApprovalUuid string `protobuf:"bytes,2,opt,name=approval_uuid,json=approvalUuid,proto3" json:"approval_uuid,omitempty"`
}

func (x *TaskInfo) Reset() {
	*x = TaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfo) ProtoMessage() {}

func (x *TaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfo.ProtoReflect.Descriptor instead.
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{92}
}

func (x *TaskInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TaskInfo) GetApprovalUuid() string {
	if x != nil {
		return x.ApprovalUuid
	}
	return ""
}

type FormList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*FormInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Rows []*FormInfo `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *FormList) Reset() {
	*x = FormList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormList) ProtoMessage() {}

func (x *FormList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormList.ProtoReflect.Descriptor instead.
func (*FormList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{93}
}

func (x *FormList) GetList() []*FormInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *FormList) GetRows() []*FormInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

type FormInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid       string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Type       string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	WfUuid     string `protobuf:"bytes,4,opt,name=wf_uuid,json=wfUuid,proto3" json:"wf_uuid,omitempty"`
	Title      string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Name       string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Default    string `protobuf:"bytes,7,opt,name=default,proto3" json:"default,omitempty"`
	Required   int32  `protobuf:"varint,8,opt,name=required,proto3" json:"required,omitempty"`
	Sort       int32  `protobuf:"varint,9,opt,name=sort,proto3" json:"sort,omitempty"`
	List       string `protobuf:"bytes,10,opt,name=list,proto3" json:"list,omitempty"`
	IsDelete   int32  `protobuf:"varint,11,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	CreateTime string `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime string `protobuf:"bytes,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeleteTime string `protobuf:"bytes,14,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	Multiple   int32  `protobuf:"varint,15,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
}

func (x *FormInfo) Reset() {
	*x = FormInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormInfo) ProtoMessage() {}

func (x *FormInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormInfo.ProtoReflect.Descriptor instead.
func (*FormInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{94}
}

func (x *FormInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FormInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *FormInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FormInfo) GetWfUuid() string {
	if x != nil {
		return x.WfUuid
	}
	return ""
}

func (x *FormInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FormInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FormInfo) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *FormInfo) GetRequired() int32 {
	if x != nil {
		return x.Required
	}
	return 0
}

func (x *FormInfo) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *FormInfo) GetList() string {
	if x != nil {
		return x.List
	}
	return ""
}

func (x *FormInfo) GetIsDelete() int32 {
	if x != nil {
		return x.IsDelete
	}
	return 0
}

func (x *FormInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *FormInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *FormInfo) GetDeleteTime() string {
	if x != nil {
		return x.DeleteTime
	}
	return ""
}

func (x *FormInfo) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

type RecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string          `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Tenant string          `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Data   *RecordDetail   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	List   []*RecordDetail `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
	Rows   []*RecordDetail `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *RecordInfo) Reset() {
	*x = RecordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordInfo) ProtoMessage() {}

func (x *RecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordInfo.ProtoReflect.Descriptor instead.
func (*RecordInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{95}
}

func (x *RecordInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RecordInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *RecordInfo) GetData() *RecordDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RecordInfo) GetList() []*RecordDetail {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RecordInfo) GetRows() []*RecordDetail {
	if x != nil {
		return x.Rows
	}
	return nil
}

type RecordDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         float64 `protobuf:"fixed64,1,opt,name=type,proto3" json:"type,omitempty"`
	Contact      string  `protobuf:"bytes,2,opt,name=contact,proto3" json:"contact,omitempty"`
	Sponsor      string  `protobuf:"bytes,3,opt,name=sponsor,proto3" json:"sponsor,omitempty"`
	ApprovalUuid string  `protobuf:"bytes,4,opt,name=approval_uuid,json=approvalUuid,proto3" json:"approval_uuid,omitempty"`
	Step         int64   `protobuf:"varint,5,opt,name=step,proto3" json:"step,omitempty"`
	Name         string  `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Remark       string  `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	Time         string  `protobuf:"bytes,8,opt,name=time,proto3" json:"time,omitempty"`
	Status       int32   `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RecordDetail) Reset() {
	*x = RecordDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDetail) ProtoMessage() {}

func (x *RecordDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDetail.ProtoReflect.Descriptor instead.
func (*RecordDetail) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{96}
}

func (x *RecordDetail) GetType() float64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RecordDetail) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *RecordDetail) GetSponsor() string {
	if x != nil {
		return x.Sponsor
	}
	return ""
}

func (x *RecordDetail) GetApprovalUuid() string {
	if x != nil {
		return x.ApprovalUuid
	}
	return ""
}

func (x *RecordDetail) GetStep() int64 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *RecordDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecordDetail) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *RecordDetail) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *RecordDetail) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61, 0x69,
	0x6e, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0f, 0x0a,
	0x0d, 0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0xf6,
	0x02, 0x0a, 0x0c, 0x4f, 0x6e, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x61,
	0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x4e,
	0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x0d, 0x42, 0x69, 0x6c, 0x6c, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x6e,
	0x65, 0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x0c, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x3d,
	0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a,
	0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4d, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xee, 0x02, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x88, 0x02, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x44, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x44, 0x63, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x22, 0xf7, 0x02, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62,
	0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x73, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x73, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x72,
	0x70, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x72, 0x70, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xab, 0x01,
	0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x0c, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x72, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x6a, 0x0a,
	0x07, 0x6d, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x7a, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0xe3, 0x02, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xe5, 0x04, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61,
	0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x63, 0x43, 0x61,
	0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x73, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x65, 0x72, 0x74, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x22, 0xca, 0x08, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x61, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x61, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x65, 0x72, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x65, 0x72, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x65, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x72,
	0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65,
	0x72, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x44,
	0x6f, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x44, 0x6f, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x75, 0x74,
	0x44, 0x6f, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x75, 0x74, 0x44, 0x6f, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x74, 0x4e, 0x6f, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x74, 0x4e, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x69, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x69, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x76,
	0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x70, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x70, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69,
	0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x73,
	0x69, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x75,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x53, 0x65, 0x78, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x53, 0x65, 0x78, 0x12,
	0x22, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x78, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xfc, 0x01, 0x0a, 0x07, 0x6d, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xf9, 0x04, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x75, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x75, 0x65, 0x73, 0x74, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x55, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x66, 0x66, 0x53, 0x65, 0x78,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x66, 0x66, 0x53, 0x65, 0x78,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x66, 0x66, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x66, 0x66, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x66, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x66, 0x66, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x22, 0xe6, 0x05, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55,
	0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x53, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x53, 0x65, 0x78, 0x12, 0x20,
	0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6b,
	0x50, 0x61, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6b, 0x50, 0x61,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x22, 0x0c, 0x0a, 0x0a, 0x48, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x85, 0x01, 0x0a, 0x03, 0x66, 0x61, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x79, 0x0a, 0x04, 0x66, 0x61, 0x71, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x66, 0x61, 0x71, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x2a, 0x0a, 0x12, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x26, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x22,
	0x35, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x46, 0x41, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x66, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x66, 0x61, 0x22, 0x38, 0x0a, 0x0e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x22, 0x63, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65,
	0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x65, 0x0a, 0x1b, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x52, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x27, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x79, 0x0a,
	0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x66, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x66, 0x61, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x66, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x74, 0x66, 0x61, 0x22, 0x24, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x52,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x52, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0d, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x5e, 0x0a, 0x0a, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x35, 0x0a, 0x09, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x38, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x09, 0x0a, 0x07, 0x4f,
	0x72, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x2f, 0x0a, 0x03, 0x41, 0x6e, 0x79, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd2, 0x06, 0x0a, 0x06, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x53, 0x74, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x53, 0x74, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69,
	0x7a, 0x65, 0x4e, 0x75, 0x6d, 0x53, 0x74, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x69, 0x7a, 0x65, 0x4e, 0x75, 0x6d, 0x53, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x55, 0x75, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xcf, 0x03, 0x0a,
	0x06, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x61,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6a, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6a, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x52,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8f,
	0x01, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0x93, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xdb, 0x02,
	0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x42,
	0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x6b, 0x0a, 0x09, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xef, 0x01, 0x0a, 0x11, 0x55, 0x6e, 0x69,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e,
	0x69, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e,
	0x69, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x72, 0x6b,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x72, 0x6b, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0xc8, 0x0c, 0x0a, 0x0a, 0x50, 0x61, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x61, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2c,
	0x0a, 0x11, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x72, 0x65, 0x61,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x41, 0x72, 0x65, 0x61, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x72, 0x65, 0x61, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x72, 0x65, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x64, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69,
	0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x74, 0x4e, 0x6f, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x74, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x44, 0x6f, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x44, 0x6f, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x69,
	0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x76, 0x69, 0x73, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xee, 0x03, 0x0a, 0x0a, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x33,
	0x0a, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x70, 0x6f, 0x74, 0x22, 0x99, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x29,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x4d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x22, 0x97, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6f,
	0x74, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70,
	0x6f, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x0d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x74, 0x6f, 0x70, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xfd, 0x05, 0x0a, 0x0b, 0x50, 0x61,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x67, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x67, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12,
	0x22, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x73,
	0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x65, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6b, 0x50,
	0x61, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6b, 0x50, 0x61, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x22, 0xdd, 0x08, 0x0a, 0x07, 0x50, 0x61,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73,
	0x69, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73,
	0x69, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x69, 0x64, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x73,
	0x69, 0x64, 0x65, 0x44, 0x65, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x44, 0x65, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x44, 0x65, 0x70,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x44, 0x65,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x69, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x61, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x43, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x41, 0x72, 0x65, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x72, 0x65, 0x61, 0x12,
	0x34, 0x0a, 0x15, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41,
	0x72, 0x65, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x72, 0x65, 0x61,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xa7, 0x08, 0x0a, 0x0b, 0x50, 0x61,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x69, 0x73, 0x69, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x56, 0x69, 0x73, 0x69, 0x74, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x65, 0x72,
	0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x65,
	0x72, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x65, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x65, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x44, 0x6f, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x44, 0x6f, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x44, 0x6f, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x75, 0x74, 0x44,
	0x6f, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x65, 0x72, 0x74, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x65, 0x72, 0x74, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d,
	0x4e, 0x75, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x61, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x46, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x46, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6c, 0x6c, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x26, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xb8, 0x01, 0x0a, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xbd, 0x03, 0x0a, 0x0a, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x09, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x09, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x7f, 0x0a,
	0x03, 0x4a, 0x77, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x0a,
	0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x7e, 0x0a, 0x04, 0x41, 0x6d,
	0x71, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x08, 0x41, 0x6d,
	0x71, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x0c, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0xd9, 0x13, 0x0a, 0x09, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31,
	0x32, 0x34, 0x36, 0x32, 0x35, 0x31, 0x36, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f,
	0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x32, 0x34, 0x36, 0x32, 0x35, 0x31, 0x36, 0x12, 0x28,
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x32, 0x39, 0x33, 0x36, 0x39, 0x31,
	0x33, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34,
	0x31, 0x32, 0x39, 0x33, 0x36, 0x39, 0x31, 0x33, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e,
	0x54, 0x4d, 0x34, 0x31, 0x33, 0x32, 0x33, 0x33, 0x39, 0x34, 0x39, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x33, 0x32, 0x33, 0x33, 0x39,
	0x34, 0x39, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x34, 0x35,
	0x36, 0x36, 0x32, 0x31, 0x30, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65,
	0x6e, 0x54, 0x4d, 0x34, 0x31, 0x34, 0x35, 0x36, 0x36, 0x32, 0x31, 0x30, 0x12, 0x28, 0x0a, 0x0f,
	0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x36, 0x37, 0x34, 0x37, 0x38, 0x31, 0x31, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x36,
	0x37, 0x34, 0x37, 0x38, 0x31, 0x31, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d,
	0x34, 0x31, 0x38, 0x31, 0x38, 0x39, 0x36, 0x36, 0x31, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x38, 0x31, 0x38, 0x39, 0x36, 0x36, 0x31,
	0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x34, 0x34, 0x37, 0x31,
	0x34, 0x33, 0x36, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54,
	0x4d, 0x34, 0x31, 0x34, 0x34, 0x37, 0x31, 0x34, 0x33, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x41, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x41, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x41, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x41, 0x65, 0x73, 0x4b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x6c, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x41, 0x70,
	0x70, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b,
	0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x43, 0x6f,
	0x72, 0x70, 0x49, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x6c, 0x6b, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x72, 0x6b, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x72, 0x6b, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x6c, 0x61, 0x72, 0x6b, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x72, 0x6b, 0x41, 0x70, 0x70, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x72, 0x6b, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61,
	0x72, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x15,
	0x6c, 0x61, 0x72, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x61, 0x72,
	0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x69, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x69, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x69, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x69, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x69, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x69, 0x73, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x79, 0x6e, 0x63, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x46, 0x61, 0x73, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x69, 0x73, 0x46, 0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x46, 0x61,
	0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x69, 0x73, 0x46, 0x61, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x69, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x47, 0x46,
	0x61, 0x73, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x69, 0x73, 0x47, 0x46, 0x61,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x47, 0x46, 0x61, 0x63, 0x65, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x69, 0x73, 0x47, 0x46, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x47, 0x53, 0x6b, 0x69, 0x70, 0x18, 0x38, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x69,
	0x73, 0x47, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x47, 0x49, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69, 0x73, 0x47, 0x49, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6d, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6d, 0x73, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6d, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6d, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x63, 0x65,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x65,
	0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x61, 0x63, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x69, 0x6b, 0x69, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x69, 0x6b, 0x69,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x65, 0x64, 0x67, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x6d, 0x71, 0x70, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x6d, 0x71, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f,
	0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x79, 0x75, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x79, 0x75, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x59,
	0x75, 0x6e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x59, 0x75, 0x6e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x59, 0x75, 0x6e,
	0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x59, 0x75, 0x6e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x95,
	0x02, 0x0a, 0x09, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x76, 0x0a, 0x0c, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x94,
	0x0e, 0x0a, 0x06, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x32, 0x34, 0x36, 0x32, 0x35,
	0x31, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d,
	0x34, 0x31, 0x32, 0x34, 0x36, 0x32, 0x35, 0x31, 0x36, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65,
	0x6e, 0x54, 0x4d, 0x34, 0x31, 0x32, 0x39, 0x33, 0x36, 0x39, 0x31, 0x33, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x32, 0x39, 0x33, 0x36,
	0x39, 0x31, 0x33, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x33,
	0x32, 0x33, 0x33, 0x39, 0x34, 0x39, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70,
	0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x33, 0x32, 0x33, 0x33, 0x39, 0x34, 0x39, 0x12, 0x28, 0x0a,
	0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x34, 0x34, 0x37, 0x31, 0x34, 0x33, 0x36,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31,
	0x34, 0x34, 0x37, 0x31, 0x34, 0x33, 0x36, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54,
	0x4d, 0x34, 0x31, 0x34, 0x35, 0x36, 0x36, 0x32, 0x31, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x34, 0x35, 0x36, 0x36, 0x32, 0x31,
	0x30, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x36, 0x37, 0x34,
	0x37, 0x38, 0x31, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e,
	0x54, 0x4d, 0x34, 0x31, 0x36, 0x37, 0x34, 0x37, 0x38, 0x31, 0x31, 0x12, 0x28, 0x0a, 0x0f, 0x6f,
	0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x38, 0x31, 0x38, 0x39, 0x36, 0x36, 0x31, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x4d, 0x34, 0x31, 0x38, 0x31,
	0x38, 0x39, 0x36, 0x36, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x72,
	0x70, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x72, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x65, 0x73,
	0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x41,
	0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c,
	0x6b, 0x41, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x41, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x6c, 0x6b, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x11, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x41, 0x70, 0x70, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x6c, 0x6b, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x43,
	0x6f, 0x72, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x61, 0x72, 0x6b, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x61, 0x72, 0x6b, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x72,
	0x6b, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6c, 0x61, 0x72, 0x6b, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x72, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65,
	0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x72, 0x6b, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x61, 0x72, 0x6b, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x61, 0x72, 0x6b, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x69, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x69, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x69, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x69, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x75, 0x69, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x49,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49,
	0x73, 0x46, 0x61, 0x73, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x73, 0x46,
	0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x46, 0x61, 0x63, 0x65, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x73, 0x46, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49,
	0x73, 0x53, 0x6b, 0x69, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x73, 0x53,
	0x6b, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x46, 0x61, 0x73, 0x74, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x73, 0x47, 0x46, 0x61, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x73, 0x47, 0x46, 0x61, 0x63, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x49, 0x73, 0x47, 0x46, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x53, 0x6b,
	0x69, 0x70, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x73, 0x47, 0x53, 0x6b, 0x69,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x47, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x73, 0x47, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x38, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x09, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x42, 0x6f, 0x6f, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x42, 0x6f, 0x6f, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x4e, 0x75, 0x6d, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xba, 0x05, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x69, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x69, 0x6b, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x69, 0x6b, 0x69,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x65, 0x64, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x6d, 0x71, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x6d, 0x71, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x79, 0x75, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x79, 0x75, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x59,
	0x75, 0x6e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x59, 0x75, 0x6e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x59, 0x75, 0x6e,
	0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x59, 0x75, 0x6e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6d, 0x73, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6d,
	0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6d,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6d,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x61, 0x63, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x61, 0x63, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x66, 0x61, 0x63, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x22, 0x0a, 0x0a, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x47,
	0x0a, 0x03, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x6f, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x22, 0xc2, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0xbe, 0x05, 0x0a, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70,
	0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47,
	0x75, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xfa, 0x01, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x42, 0x61, 0x63, 0x6b,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x22, 0x52,
	0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x22, 0xff, 0x02, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x66, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x66, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0xce, 0x02, 0x0a, 0x0c, 0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41,
	0x70, 0x69, 0x12, 0x3c, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x6e, 0x65,
	0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x6e, 0x65, 0x42, 0x69,
	0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x42,
	0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x42,
	0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x6e, 0x65,
	0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f,
	0x6e, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x13, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6c, 0x6c,
	0x22, 0x00, 0x32, 0xd2, 0x09, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x69,
	0x12, 0x35, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x73, 0x73, 0x64, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x12, 0x11,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x17, 0x41,
	0x73, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0e, 0x55, 0x6e, 0x62,
	0x69, 0x6e, 0x64, 0x57, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x0d, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x0f, 0x44, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x4c, 0x61, 0x72, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0c, 0x53,
	0x65, 0x6e, 0x64, 0x49, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22,
	0x00, 0x12, 0x36, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x17, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x17, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x17, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x32, 0xd8, 0x0a, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x70, 0x69, 0x12, 0x36, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x36, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x11,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x11,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x33, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x11,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x72, 0x65, 0x61, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x07, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x2e,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x63, 0x12, 0x0d, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x32,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x63, 0x12, 0x11, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6c, 0x6c,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x63, 0x12,
	0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x63, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x09, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x63, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x09, 0x4b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x12, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12,
	0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0d,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x11, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6c, 0x6c,
	0x22, 0x00, 0x32, 0xca, 0x01, 0x0a, 0x09, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x12, 0x2e, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x48, 0x65, 0x6c,
	0x70, 0x12, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x71, 0x1a, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x2e, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x48, 0x65, 0x6c,
	0x70, 0x12, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x71, 0x1a, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x2e, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x48, 0x65, 0x6c,
	0x70, 0x12, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x71, 0x1a, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x2d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x71,
	0x73, 0x1a, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x71, 0x73, 0x22, 0x00, 0x32,
	0xae, 0x05, 0x0a, 0x0a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x70, 0x69, 0x12, 0x47,
	0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x18, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x46, 0x41, 0x12, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x46, 0x41, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0b, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0b,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x17, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1e,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0b,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x15, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x18, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x30,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x13, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x1a, 0x0b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x32, 0xef, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70, 0x69, 0x12,
	0x3b, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x4d, 0x73, 0x67, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x11,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x30, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x73, 0x67,
	0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x73, 0x67,
	0x22, 0x00, 0x32, 0xaf, 0x13, 0x0a, 0x0f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x12, 0x28, 0x0a, 0x07, 0x4f, 0x6e, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72,
	0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0d, 0x4f, 0x6e, 0x65, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x75, 0x6c, 0x6c,
	0x22, 0x00, 0x12, 0x28, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x0c,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x16,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x27, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x0c, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0a, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72,
	0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0d, 0x45, 0x6d, 0x70, 0x49, 0x6e, 0x64,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x1b, 0x45, 0x6d, 0x70, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x1b, 0x45, 0x6d, 0x70, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41,
	0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x2c, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x30, 0x0a,
	0x0c, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0c, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12,
	0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e,
	0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2f,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x29, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x0c, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72,
	0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0d, 0x4f, 0x6e, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x4f, 0x72, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x08, 0x52, 0x6f, 0x6f,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x2f, 0x0a, 0x0e, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x22,
	0x00, 0x12, 0x30, 0x0a, 0x0f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x75, 0x6c,
	0x6c, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x29, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x09,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6e, 0x79, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x11, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x72, 0x65, 0x65, 0x42, 0x79, 0x50, 0x61, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x09,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6e, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x10, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x54, 0x72, 0x65, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6e, 0x79, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0e, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x0c, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x41, 0x6e, 0x79, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x38, 0x0a, 0x12, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x11, 0x52,
	0x6f, 0x6f, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x4d,
	0x61, 0x70, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x14, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x0c, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x55, 0x6e,
	0x69, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x0c, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x12, 0x53, 0x61,
	0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x31,
	0x0a, 0x10, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x65, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x4e,
	0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x41, 0x6e, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6e, 0x79, 0x22, 0x00, 0x12, 0x33,
	0x0a, 0x13, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x42, 0x69, 0x6e, 0x64,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2d,
	0x0a, 0x0c, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x0c,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x14, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0b, 0x49, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x32, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x32, 0xfb, 0x10, 0x0a, 0x0a, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x70, 0x69, 0x12, 0x37, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x4d, 0x79, 0x45, 0x6d, 0x70, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x11,
	0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x79, 0x45, 0x6d, 0x70, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0c, 0x50, 0x61,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x79, 0x45, 0x6d, 0x70, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22,
	0x00, 0x12, 0x39, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x79, 0x45, 0x6d,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0e,
	0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x10,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x70,
	0x22, 0x00, 0x12, 0x35, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c,
	0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x15, 0x50, 0x61,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x14, 0x50, 0x61, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x18, 0x50, 0x61, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x61, 0x73, 0x73, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x14, 0x50, 0x61, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x13, 0x50, 0x61, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d,
	0x61, 0x70, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x17, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x73, 0x73, 0x12,
	0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x09, 0x4f, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x10, 0x56, 0x69, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x61, 0x73, 0x73, 0x12, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x34, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x13, 0x50, 0x61, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x4d, 0x79, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x13, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x79, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x70, 0x12, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6c,
	0x6c, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x15, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x79,
	0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x79, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x4d, 0x61, 0x70,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x16, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x79, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x15, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x79, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x10, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x10, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x34,
	0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x10,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6c, 0x6c,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x11, 0x53, 0x70, 0x6f, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a,
	0x17, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x56, 0x69, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x70,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6f,
	0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x70,
	0x22, 0x00, 0x32, 0x85, 0x08, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x41, 0x70, 0x69, 0x12, 0x37, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0x0f, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0f, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00,
	0x12, 0x36, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12,
	0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x3c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4f,
	0x6e, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c,
	0x6c, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x55, 0x4e,
	0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x42, 0x79, 0x55, 0x4e, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x41,
	0x55, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x49, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79, 0x51, 0x55, 0x75, 0x69, 0x64, 0x12, 0x10,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51, 0x4e, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x42, 0x59, 0x51, 0x4e, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x79,
	0x51, 0x4e, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x32, 0x82, 0x01, 0x0a, 0x09, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x41, 0x70, 0x69, 0x12, 0x27, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x4a, 0x77, 0x74, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4a, 0x77, 0x74, 0x22,
	0x00, 0x12, 0x24, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4a, 0x77, 0x74, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x4a, 0x77, 0x74, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4a,
	0x77, 0x74, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4a, 0x77, 0x74, 0x22, 0x00, 0x32,
	0xf8, 0x02, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x70, 0x69, 0x12, 0x2c, 0x0a, 0x0c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x41, 0x6d, 0x71, 0x70, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x41, 0x6d, 0x71, 0x70, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x56, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6d,
	0x71, 0x70, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6d,
	0x71, 0x70, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41,
	0x6d, 0x71, 0x70, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6d, 0x71, 0x70,
	0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6c, 0x6c,
	0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6d, 0x71, 0x70, 0x1a, 0x0e,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x28, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x41, 0x6d, 0x71, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x32, 0x8b, 0x0d, 0x0a, 0x09, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x12, 0x3a, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x68, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12, 0x10,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c,
	0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x30, 0x0a,
	0x0d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x0f,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x00, 0x12,
	0x34, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x42, 0x79, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0e, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x2d, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x0f, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0c,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x2e,
	0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x0f, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0c,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x31,
	0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22,
	0x00, 0x12, 0x33, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12,
	0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x13,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x0f,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6c,
	0x66, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0b, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49,
	0x6e, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x07, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x57, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x44,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x07,
	0x53, 0x65, 0x74, 0x4c, 0x61, 0x72, 0x6b, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0a,
	0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12,
	0x33, 0x0a, 0x0c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x22, 0x00, 0x12, 0x34, 0x0a, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x32, 0xa0, 0x03, 0x0a, 0x07, 0x54, 0x6f, 0x6f,
	0x6c, 0x41, 0x70, 0x69, 0x12, 0x22, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c,
	0x12, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x72, 0x6c, 0x1a, 0x09, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x55, 0x72, 0x6c, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x07, 0x4c, 0x6f, 0x6e, 0x67,
	0x55, 0x72, 0x6c, 0x12, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x72, 0x6c, 0x1a, 0x09,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x72, 0x6c, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x09, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x72,
	0x6c, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x1a, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x72, 0x6c, 0x22, 0x00, 0x12, 0x21, 0x0a,
	0x06, 0x51, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00,
	0x12, 0x2c, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x1a, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x2c,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x0a,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x0a, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x1a, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12,
	0x2a, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0a, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x32, 0x9a, 0x0a, 0x0a, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x69, 0x12, 0x3b, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x6f,
	0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x6d,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x41, 0x64,
	0x64, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12,
	0x3a, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x11, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x08, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12,
	0x33, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x0d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x6b, 0x12, 0x11,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x64, 0x6f, 0x12, 0x11, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x49, 0x73, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x33, 0x0a,
	0x08, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c,
	0x22, 0x00, 0x12, 0x36, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x3b, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 97)
var file_api_proto_goTypes = []interface{}{
	(*BillboardNull)(nil),               // 0: main.BillboardNull
	(*OneBillboard)(nil),                // 1: main.OneBillboard
	(*BillboardList)(nil),               // 2: main.BillboardList
	(*ClientNull)(nil),                  // 3: main.ClientNull
	(*ClientCompanyList)(nil),           // 4: main.ClientCompanyList
	(*ClientCompanyInfo)(nil),           // 5: main.ClientCompanyInfo
	(*ClientInfo)(nil),                  // 6: main.clientInfo
	(*UserClientInfo)(nil),              // 7: main.userClientInfo
	(*UserInfo)(nil),                    // 8: main.userInfo
	(*MessageInfo)(nil),                 // 9: main.messageInfo
	(*MediaInfo)(nil),                   // 10: main.mediaInfo
	(*DeviceNull)(nil),                  // 11: main.DeviceNull
	(*CompanyList)(nil),                 // 12: main.companyList
	(*MecList)(nil),                     // 13: main.mecList
	(*DeviceUserInfo)(nil),              // 14: main.DeviceUserInfo
	(*CompanyInfo)(nil),                 // 15: main.companyInfo
	(*TrafficList)(nil),                 // 16: main.trafficList
	(*TrafficInfo)(nil),                 // 17: main.trafficInfo
	(*DeviceInfo)(nil),                  // 18: main.deviceInfo
	(*MecInfo)(nil),                     // 19: main.mecInfo
	(*PassageInfo)(nil),                 // 20: main.passageInfo
	(*RecordList)(nil),                  // 21: main.recordList
	(*DeviceRecordInfo)(nil),            // 22: main.DeviceRecordInfo
	(*HelperNull)(nil),                  // 23: main.HelperNull
	(*Faq)(nil),                         // 24: main.faq
	(*Faqs)(nil),                        // 25: main.faqs
	(*RegisterManagerReq)(nil),          // 26: main.RegisterManagerReq
	(*RegisterManagerRes)(nil),          // 27: main.RegisterManagerRes
	(*ChangeNameReq)(nil),               // 28: main.ChangeNameReq
	(*ChangeTFAReq)(nil),                // 29: main.ChangeTFAReq
	(*ChangePhoneReq)(nil),              // 30: main.ChangePhoneReq
	(*ChangePasswordReq)(nil),           // 31: main.ChangePasswordReq
	(*ChangeAccountAndPasswordReq)(nil), // 32: main.ChangeAccountAndPasswordReq
	(*ChangePasswordByPhoneReq)(nil),    // 33: main.ChangePasswordByPhoneReq
	(*LoginByPhoneReq)(nil),             // 34: main.LoginByPhoneReq
	(*LoginByPhoneRes)(nil),             // 35: main.LoginByPhoneRes
	(*GetLoginManagerReq)(nil),          // 36: main.GetLoginManagerReq
	(*GetLoginManagerRes)(nil),          // 37: main.GetLoginManagerRes
	(*DeleteAccountReq)(nil),            // 38: main.DeleteAccountReq
	(*CreateTeamReq)(nil),               // 39: main.CreateTeamReq
	(*Empty)(nil),                       // 40: main.Empty
	(*MessageNull)(nil),                 // 41: main.MessageNull
	(*AndroidMsg)(nil),                  // 42: main.androidMsg
	(*CheckCode)(nil),                   // 43: main.checkCode
	(*TotalMsg)(nil),                    // 44: main.totalMsg
	(*OrgNull)(nil),                     // 45: main.OrgNull
	(*Any)(nil),                         // 46: main.Any
	(*OrgReq)(nil),                      // 47: main.OrgReq
	(*OrgRes)(nil),                      // 48: main.OrgRes
	(*AllUserMap)(nil),                  // 49: main.AllUserMap
	(*ChildUnitMap)(nil),                // 50: main.ChildUnitMap
	(*User)(nil),                        // 51: main.User
	(*AllUser)(nil),                     // 52: main.AllUser
	(*ChildUnit)(nil),                   // 53: main.ChildUnit
	(*UnitMemberAndUser)(nil),           // 54: main.UnitMemberAndUser
	(*UserUnit)(nil),                    // 55: main.UserUnit
	(*ClientIds)(nil),                   // 56: main.ClientIds
	(*PassageNull)(nil),                 // 57: main.PassageNull
	(*PassageReq)(nil),                  // 58: main.PassageReq
	(*PassageRes)(nil),                  // 59: main.PassageRes
	(*PassageResMap)(nil),               // 60: main.PassageResMap
	(*PassageMap)(nil),                  // 61: main.PassageMap
	(*PassageSpotMap)(nil),              // 62: main.PassageSpotMap
	(*MemberRecords)(nil),               // 63: main.MemberRecords
	(*InviteBatchResult)(nil),           // 64: main.InviteBatchResult
	(*PassageUser)(nil),                 // 65: main.PassageUser
	(*Passage)(nil),                     // 66: main.Passage
	(*PassageSpot)(nil),                 // 67: main.PassageSpot
	(*QuestionNull)(nil),                // 68: main.QuestionNull
	(*QuestionList)(nil),                // 69: main.questionList
	(*QuestionInfo)(nil),                // 70: main.questionInfo
	(*AnswerList)(nil),                  // 71: main.answerList
	(*AnswerInfo)(nil),                  // 72: main.answerInfo
	(*NaireList)(nil),                   // 73: main.naireList
	(*NaireInfo)(nil),                   // 74: main.naireInfo
	(*Jwt)(nil),                         // 75: main.Jwt
	(*TaskNull)(nil),                    // 76: main.TaskNull
	(*Amqp)(nil),                        // 77: main.Amqp
	(*AmqpTask)(nil),                    // 78: main.AmqpTask
	(*TenantNull)(nil),                  // 79: main.TenantNull
	(*TenantReq)(nil),                   // 80: main.TenantReq
	(*TenantRes)(nil),                   // 81: main.TenantRes
	(*TenantResMap)(nil),                // 82: main.TenantResMap
	(*Tenant)(nil),                      // 83: main.Tenant
	(*System)(nil),                      // 84: main.System
	(*ToolNull)(nil),                    // 85: main.ToolNull
	(*Req)(nil),                         // 86: main.Req
	(*Url)(nil),                         // 87: main.Url
	(*File)(nil),                        // 88: main.File
	(*WorkflowNull)(nil),                // 89: main.WorkflowNull
	(*RequestInfo)(nil),                 // 90: main.requestInfo
	(*ResponseInfo)(nil),                // 91: main.responseInfo
	(*TaskInfo)(nil),                    // 92: main.taskInfo
	(*FormList)(nil),                    // 93: main.formList
	(*FormInfo)(nil),                    // 94: main.formInfo
	(*RecordInfo)(nil),                  // 95: main.recordInfo
	(*RecordDetail)(nil),                // 96: main.recordDetail
	(*anypb.Any)(nil),                   // 97: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),       // 98: google.protobuf.Timestamp
}
var file_api_proto_depIdxs = []int32{
	1,   // 0: main.BillboardList.rows:type_name -> main.OneBillboard
	97,  // 1: main.ClientCompanyList.data:type_name -> google.protobuf.Any
	15,  // 2: main.companyList.rows:type_name -> main.companyInfo
	19,  // 3: main.mecList.rows:type_name -> main.mecInfo
	17,  // 4: main.trafficList.rows:type_name -> main.trafficInfo
	22,  // 5: main.recordList.rows:type_name -> main.DeviceRecordInfo
	24,  // 6: main.faqs.rows:type_name -> main.faq
	97,  // 7: main.Any.data:type_name -> google.protobuf.Any
	51,  // 8: main.OrgRes.user:type_name -> main.User
	51,  // 9: main.OrgRes.users:type_name -> main.User
	52,  // 10: main.OrgRes.allUser:type_name -> main.AllUser
	54,  // 11: main.OrgRes.unitMemberAndUser:type_name -> main.UnitMemberAndUser
	55,  // 12: main.OrgRes.userUnit:type_name -> main.UserUnit
	56,  // 13: main.OrgRes.clientIds:type_name -> main.ClientIds
	52,  // 14: main.AllUserMap.records:type_name -> main.AllUser
	53,  // 15: main.ChildUnitMap.records:type_name -> main.ChildUnit
	98,  // 16: main.PassageReq.startTime:type_name -> google.protobuf.Timestamp
	98,  // 17: main.PassageReq.endTime:type_name -> google.protobuf.Timestamp
	66,  // 18: main.PassageRes.passage:type_name -> main.Passage
	67,  // 19: main.PassageRes.passageSpot:type_name -> main.PassageSpot
	63,  // 20: main.PassageResMap.records:type_name -> main.MemberRecords
	64,  // 21: main.PassageResMap.msg:type_name -> main.InviteBatchResult
	65,  // 22: main.PassageResMap.userMap:type_name -> main.PassageUser
	66,  // 23: main.PassageResMap.passage:type_name -> main.Passage
	66,  // 24: main.PassageMap.records:type_name -> main.Passage
	67,  // 25: main.PassageSpotMap.records:type_name -> main.PassageSpot
	70,  // 26: main.questionList.rows:type_name -> main.questionInfo
	72,  // 27: main.answerList.rows:type_name -> main.answerInfo
	74,  // 28: main.naireList.rows:type_name -> main.naireInfo
	83,  // 29: main.TenantRes.tenant:type_name -> main.Tenant
	83,  // 30: main.TenantResMap.rows:type_name -> main.Tenant
	91,  // 31: main.requestInfo.nodes:type_name -> main.responseInfo
	92,  // 32: main.responseInfo.task:type_name -> main.taskInfo
	94,  // 33: main.formList.list:type_name -> main.formInfo
	94,  // 34: main.formList.rows:type_name -> main.formInfo
	96,  // 35: main.recordInfo.data:type_name -> main.recordDetail
	96,  // 36: main.recordInfo.list:type_name -> main.recordDetail
	96,  // 37: main.recordInfo.rows:type_name -> main.recordDetail
	1,   // 38: main.BillboardApi.CreateBillboard:input_type -> main.OneBillboard
	1,   // 39: main.BillboardApi.DeleteBillboard:input_type -> main.OneBillboard
	0,   // 40: main.BillboardApi.GetBillboardList:input_type -> main.BillboardNull
	1,   // 41: main.BillboardApi.CreateBillboardItem:input_type -> main.OneBillboard
	1,   // 42: main.BillboardApi.UpdateBillboardItem:input_type -> main.OneBillboard
	6,   // 43: main.ClientApi.GetClientAuth:input_type -> main.clientInfo
	6,   // 44: main.ClientApi.GetClientAuthCallback:input_type -> main.clientInfo
	9,   // 45: main.ClientApi.GetClientCallback:input_type -> main.messageInfo
	6,   // 46: main.ClientApi.GetJssdkConfig:input_type -> main.clientInfo
	9,   // 47: main.ClientApi.GetClientWorkTest:input_type -> main.messageInfo
	10,  // 48: main.ClientApi.GetClientMedia:input_type -> main.mediaInfo
	6,   // 49: main.ClientApi.GetClientOrganization:input_type -> main.clientInfo
	6,   // 50: main.ClientApi.AsyncClientOrganization:input_type -> main.clientInfo
	8,   // 51: main.ClientApi.GetClientUserInfo:input_type -> main.userInfo
	6,   // 52: main.ClientApi.UnbindWCClient:input_type -> main.clientInfo
	6,   // 53: main.ClientApi.WeChatMessage:input_type -> main.clientInfo
	6,   // 54: main.ClientApi.WorkMessage:input_type -> main.clientInfo
	6,   // 55: main.ClientApi.DingTalkMessage:input_type -> main.clientInfo
	6,   // 56: main.ClientApi.LarkMessage:input_type -> main.clientInfo
	6,   // 57: main.ClientApi.SendIMessage:input_type -> main.clientInfo
	6,   // 58: main.ClientApi.GetIUserBaseInfo:input_type -> main.clientInfo
	3,   // 59: main.ClientApi.GetInitCode:input_type -> main.ClientNull
	8,   // 60: main.ClientApi.GetUserOrgByPhone:input_type -> main.userInfo
	8,   // 61: main.ClientApi.GetVisitorOrgByPhone:input_type -> main.userInfo
	5,   // 62: main.ClientApi.GetOrgByName:input_type -> main.ClientCompanyInfo
	6,   // 63: main.ClientApi.GetClientIds:input_type -> main.clientInfo
	15,  // 64: main.DeviceApi.CreateCompany:input_type -> main.companyInfo
	15,  // 65: main.DeviceApi.DeleteCompany:input_type -> main.companyInfo
	15,  // 66: main.DeviceApi.UpdateCompany:input_type -> main.companyInfo
	15,  // 67: main.DeviceApi.SearchCompany:input_type -> main.companyInfo
	15,  // 68: main.DeviceApi.CreateArea:input_type -> main.companyInfo
	15,  // 69: main.DeviceApi.DeleteArea:input_type -> main.companyInfo
	15,  // 70: main.DeviceApi.UpdateArea:input_type -> main.companyInfo
	15,  // 71: main.DeviceApi.SearchArea:input_type -> main.companyInfo
	15,  // 72: main.DeviceApi.Prepare:input_type -> main.companyInfo
	19,  // 73: main.DeviceApi.CreateMec:input_type -> main.mecInfo
	15,  // 74: main.DeviceApi.UpdateMec:input_type -> main.companyInfo
	15,  // 75: main.DeviceApi.RemoveMec:input_type -> main.companyInfo
	15,  // 76: main.DeviceApi.DeleteMec:input_type -> main.companyInfo
	15,  // 77: main.DeviceApi.SearchMec:input_type -> main.companyInfo
	15,  // 78: main.DeviceApi.KeepAlive:input_type -> main.companyInfo
	18,  // 79: main.DeviceApi.AddDeviceVisitor:input_type -> main.deviceInfo
	18,  // 80: main.DeviceApi.DeviceVisitorLeave:input_type -> main.deviceInfo
	17,  // 81: main.DeviceApi.AddDeviceTraffic:input_type -> main.trafficInfo
	17,  // 82: main.DeviceApi.GetDashboardDevicePassagePages:input_type -> main.trafficInfo
	15,  // 83: main.DeviceApi.GetDevicePassageDetail:input_type -> main.companyInfo
	20,  // 84: main.DeviceApi.DevicePassage:input_type -> main.passageInfo
	15,  // 85: main.DeviceApi.DevicePassageIssue:input_type -> main.companyInfo
	14,  // 86: main.DeviceApi.DevicePassageSearch:input_type -> main.DeviceUserInfo
	15,  // 87: main.DeviceApi.DevicePassageCallback:input_type -> main.companyInfo
	24,  // 88: main.HelperApi.CreateOneHelp:input_type -> main.faq
	24,  // 89: main.HelperApi.UpdateOneHelp:input_type -> main.faq
	24,  // 90: main.HelperApi.DeleteOneHelp:input_type -> main.faq
	25,  // 91: main.HelperApi.GetHelpCenterList:input_type -> main.faqs
	26,  // 92: main.ManagerApi.RegisterManager:input_type -> main.RegisterManagerReq
	28,  // 93: main.ManagerApi.ChangeName:input_type -> main.ChangeNameReq
	29,  // 94: main.ManagerApi.ChangeTFA:input_type -> main.ChangeTFAReq
	30,  // 95: main.ManagerApi.ChangePhone:input_type -> main.ChangePhoneReq
	31,  // 96: main.ManagerApi.ChangePassword:input_type -> main.ChangePasswordReq
	32,  // 97: main.ManagerApi.ChangeAccountAndPassword:input_type -> main.ChangeAccountAndPasswordReq
	33,  // 98: main.ManagerApi.ChangePasswordByPhone:input_type -> main.ChangePasswordByPhoneReq
	34,  // 99: main.ManagerApi.LoginByPhone:input_type -> main.LoginByPhoneReq
	36,  // 100: main.ManagerApi.GetLoginManager:input_type -> main.GetLoginManagerReq
	38,  // 101: main.ManagerApi.DeleteAccount:input_type -> main.DeleteAccountReq
	39,  // 102: main.ManagerApi.CreateTeam:input_type -> main.CreateTeamReq
	42,  // 103: main.MessageApi.GenerateAndroidMsg:input_type -> main.androidMsg
	43,  // 104: main.MessageApi.GenerateCheckCode:input_type -> main.checkCode
	43,  // 105: main.MessageApi.VerifyCheckCode:input_type -> main.checkCode
	44,  // 106: main.MessageApi.TotalMessage:input_type -> main.totalMsg
	47,  // 107: main.OrganizationApi.OneUser:input_type -> main.OrgReq
	47,  // 108: main.OrganizationApi.GetVisitorTicketInfo:input_type -> main.OrgReq
	47,  // 109: main.OrganizationApi.OneTenantUser:input_type -> main.OrgReq
	47,  // 110: main.OrganizationApi.DeleteUser:input_type -> main.OrgReq
	47,  // 111: main.OrganizationApi.UserBase:input_type -> main.OrgReq
	47,  // 112: main.OrganizationApi.UserBaseContainsIdCard:input_type -> main.OrgReq
	47,  // 113: main.OrganizationApi.UnitUserBase:input_type -> main.OrgReq
	47,  // 114: main.OrganizationApi.UnitMemberIds:input_type -> main.OrgReq
	47,  // 115: main.OrganizationApi.UserIds:input_type -> main.OrgReq
	47,  // 116: main.OrganizationApi.LeaderUuid:input_type -> main.OrgReq
	47,  // 117: main.OrganizationApi.EmpIndistinct:input_type -> main.OrgReq
	47,  // 118: main.OrganizationApi.EmpByNameAndPhoneIndistinct:input_type -> main.OrgReq
	47,  // 119: main.OrganizationApi.EmpByNameAndPhoneAndDepName:input_type -> main.OrgReq
	47,  // 120: main.OrganizationApi.UnitUser:input_type -> main.OrgReq
	47,  // 121: main.OrganizationApi.VisitorsUser:input_type -> main.OrgReq
	47,  // 122: main.OrganizationApi.UserByNameAndPhoneIndistinct:input_type -> main.OrgReq
	47,  // 123: main.OrganizationApi.GetUserByNameAndPhoneIndistinct:input_type -> main.OrgReq
	47,  // 124: main.OrganizationApi.UserUuidByPhone:input_type -> main.OrgReq
	47,  // 125: main.OrganizationApi.UserMark:input_type -> main.OrgReq
	47,  // 126: main.OrganizationApi.UserModify:input_type -> main.OrgReq
	47,  // 127: main.OrganizationApi.UserFaceRedirect:input_type -> main.OrgReq
	47,  // 128: main.OrganizationApi.OneUserTenant:input_type -> main.OrgReq
	47,  // 129: main.OrganizationApi.RootUnit:input_type -> main.OrgReq
	47,  // 130: main.OrganizationApi.ChildUnit:input_type -> main.OrgReq
	47,  // 131: main.OrganizationApi.RootUnitModify:input_type -> main.OrgReq
	47,  // 132: main.OrganizationApi.ChildUnitModify:input_type -> main.OrgReq
	47,  // 133: main.OrganizationApi.DeleteUnit:input_type -> main.OrgReq
	47,  // 134: main.OrganizationApi.UnitRootTree:input_type -> main.OrgReq
	47,  // 135: main.OrganizationApi.UnitTreeByParUuid:input_type -> main.OrgReq
	47,  // 136: main.OrganizationApi.UnitRootTreeJson:input_type -> main.OrgReq
	47,  // 137: main.OrganizationApi.ParentUnitTree:input_type -> main.OrgReq
	47,  // 138: main.OrganizationApi.IsLeader:input_type -> main.OrgReq
	47,  // 139: main.OrganizationApi.ChildUnitPagesList:input_type -> main.OrgReq
	47,  // 140: main.OrganizationApi.RootUnitPagesList:input_type -> main.OrgReq
	47,  // 141: main.OrganizationApi.UnitMemberByUnitUuid:input_type -> main.OrgReq
	47,  // 142: main.OrganizationApi.UnitByUserUuid:input_type -> main.OrgReq
	47,  // 143: main.OrganizationApi.SameUnitMemberList:input_type -> main.OrgReq
	47,  // 144: main.OrganizationApi.UnitMemberModify:input_type -> main.OrgReq
	47,  // 145: main.OrganizationApi.DeleteUnitMember:input_type -> main.OrgReq
	47,  // 146: main.OrganizationApi.ExcelFileImport:input_type -> main.OrgReq
	47,  // 147: main.OrganizationApi.ImportVisitors:input_type -> main.OrgReq
	47,  // 148: main.OrganizationApi.AddOneVisitor:input_type -> main.OrgReq
	47,  // 149: main.OrganizationApi.GetImportOrgResult:input_type -> main.OrgReq
	47,  // 150: main.OrganizationApi.GetImportVisitorOrgResult:input_type -> main.OrgReq
	47,  // 151: main.OrganizationApi.BaseInfoByBindPhone:input_type -> main.OrgReq
	47,  // 152: main.OrganizationApi.ClientIds:input_type -> main.OrgReq
	47,  // 153: main.OrganizationApi.WeChatUnBind:input_type -> main.OrgReq
	47,  // 154: main.OrganizationApi.UserTenantByUserUuid:input_type -> main.OrgReq
	47,  // 155: main.OrganizationApi.IsBlacklist:input_type -> main.OrgReq
	47,  // 156: main.OrganizationApi.UpdateIsBlacklist:input_type -> main.OrgReq
	58,  // 157: main.PassageApi.PassageAddMyEmp:input_type -> main.PassageReq
	58,  // 158: main.PassageApi.PassageMyEmpPages:input_type -> main.PassageReq
	58,  // 159: main.PassageApi.PassageMyEmp:input_type -> main.PassageReq
	58,  // 160: main.PassageApi.PassageMyEmpLists:input_type -> main.PassageReq
	58,  // 161: main.PassageApi.PassageBooking:input_type -> main.PassageReq
	58,  // 162: main.PassageApi.BatchPassageInvite:input_type -> main.PassageReq
	58,  // 163: main.PassageApi.GetInviteBatchPassageResult:input_type -> main.PassageReq
	58,  // 164: main.PassageApi.PassageInvite:input_type -> main.PassageReq
	58,  // 165: main.PassageApi.DeletePassage:input_type -> main.PassageReq
	58,  // 166: main.PassageApi.DeletePassageByPersonUuid:input_type -> main.PassageReq
	58,  // 167: main.PassageApi.PassageLists:input_type -> main.PassageReq
	58,  // 168: main.PassageApi.PassageBookingAll:input_type -> main.PassageReq
	58,  // 169: main.PassageApi.PassageInviteAll:input_type -> main.PassageReq
	58,  // 170: main.PassageApi.PassageBookingArrival:input_type -> main.PassageReq
	58,  // 171: main.PassageApi.PassageBookingStatus:input_type -> main.PassageReq
	58,  // 172: main.PassageApi.PassageBookingStatusPass:input_type -> main.PassageReq
	58,  // 173: main.PassageApi.PassageInviteArrival:input_type -> main.PassageReq
	58,  // 174: main.PassageApi.PassageInviteStatus:input_type -> main.PassageReq
	58,  // 175: main.PassageApi.PassageInviteStatusPass:input_type -> main.PassageReq
	58,  // 176: main.PassageApi.OneDetail:input_type -> main.PassageReq
	58,  // 177: main.PassageApi.VisitorTodayPass:input_type -> main.PassageReq
	58,  // 178: main.PassageApi.EmpTodayPass:input_type -> main.PassageReq
	58,  // 179: main.PassageApi.PassageAddMyVisitor:input_type -> main.PassageReq
	58,  // 180: main.PassageApi.PassageMyVisitorTop:input_type -> main.PassageReq
	58,  // 181: main.PassageApi.PassageMyVisitorPages:input_type -> main.PassageReq
	58,  // 182: main.PassageApi.PassageMyVisitor:input_type -> main.PassageReq
	58,  // 183: main.PassageApi.PassageMyVisitorByUuid:input_type -> main.PassageReq
	58,  // 184: main.PassageApi.PassageMyVisitorLists:input_type -> main.PassageReq
	58,  // 185: main.PassageApi.WorkFlow:input_type -> main.PassageReq
	58,  // 186: main.PassageApi.PassagePageLists:input_type -> main.PassageReq
	58,  // 187: main.PassageApi.PassageExcel:input_type -> main.PassageReq
	58,  // 188: main.PassageApi.DevicePassage:input_type -> main.PassageReq
	58,  // 189: main.PassageApi.BasePassage:input_type -> main.PassageReq
	58,  // 190: main.PassageApi.SpotVisitorDetail:input_type -> main.PassageReq
	58,  // 191: main.PassageApi.PassageSpotVisitorPages:input_type -> main.PassageReq
	58,  // 192: main.PassageApi.PassageSpotVisitor:input_type -> main.PassageReq
	74,  // 193: main.QuestionnaireApi.InitQuestionnaire:input_type -> main.naireInfo
	74,  // 194: main.QuestionnaireApi.AddQuestionnaire:input_type -> main.naireInfo
	74,  // 195: main.QuestionnaireApi.UpdateQuestionnaire:input_type -> main.naireInfo
	74,  // 196: main.QuestionnaireApi.GetQuestionnaire:input_type -> main.naireInfo
	74,  // 197: main.QuestionnaireApi.DeleteQuestionnaire:input_type -> main.naireInfo
	74,  // 198: main.QuestionnaireApi.GetQuestionnaireList:input_type -> main.naireInfo
	74,  // 199: main.QuestionnaireApi.GetQuestionInfo:input_type -> main.naireInfo
	70,  // 200: main.QuestionnaireApi.AddOneQuestion:input_type -> main.questionInfo
	70,  // 201: main.QuestionnaireApi.UpdateOneQuestion:input_type -> main.questionInfo
	70,  // 202: main.QuestionnaireApi.DeleteQuestionByUuid:input_type -> main.questionInfo
	74,  // 203: main.QuestionnaireApi.GetQuestionList:input_type -> main.naireInfo
	72,  // 204: main.QuestionnaireApi.GetAnswerByUN:input_type -> main.answerInfo
	72,  // 205: main.QuestionnaireApi.AddAnswerByUN:input_type -> main.answerInfo
	72,  // 206: main.QuestionnaireApi.UpdateAnswerByAU:input_type -> main.answerInfo
	72,  // 207: main.QuestionnaireApi.GetIAnswerByQUuid:input_type -> main.answerInfo
	72,  // 208: main.QuestionnaireApi.GetQNAnswerBYQN:input_type -> main.answerInfo
	72,  // 209: main.QuestionnaireApi.DeleteUAnswerByQN:input_type -> main.answerInfo
	75,  // 210: main.SecureApi.GenerateToken:input_type -> main.Jwt
	75,  // 211: main.SecureApi.ParseToken:input_type -> main.Jwt
	75,  // 212: main.SecureApi.RefreshToken:input_type -> main.Jwt
	77,  // 213: main.TaskApi.RegisterUser:input_type -> main.Amqp
	77,  // 214: main.TaskApi.CreateVhost:input_type -> main.Amqp
	77,  // 215: main.TaskApi.DestroyVhost:input_type -> main.Amqp
	77,  // 216: main.TaskApi.CreateExchange:input_type -> main.Amqp
	77,  // 217: main.TaskApi.DestroyExchange:input_type -> main.Amqp
	77,  // 218: main.TaskApi.CreateQueue:input_type -> main.Amqp
	77,  // 219: main.TaskApi.DestroyQueue:input_type -> main.Amqp
	78,  // 220: main.TaskApi.Task:input_type -> main.AmqpTask
	79,  // 221: main.TenantApi.RefTenantReshRedis:input_type -> main.TenantNull
	80,  // 222: main.TenantApi.ClientByUuid:input_type -> main.TenantReq
	80,  // 223: main.TenantApi.ClientByOrgId:input_type -> main.TenantReq
	80,  // 224: main.TenantApi.SettingByUuid:input_type -> main.TenantReq
	80,  // 225: main.TenantApi.AccountByPhone:input_type -> main.TenantReq
	80,  // 226: main.TenantApi.AuthByDevice:input_type -> main.TenantReq
	80,  // 227: main.TenantApi.PhoneByAccount:input_type -> main.TenantReq
	80,  // 228: main.TenantApi.InfoByUuid:input_type -> main.TenantReq
	80,  // 229: main.TenantApi.InfoByOrgId:input_type -> main.TenantReq
	80,  // 230: main.TenantApi.InfoByPassword:input_type -> main.TenantReq
	80,  // 231: main.TenantApi.ListTenant:input_type -> main.TenantReq
	80,  // 232: main.TenantApi.RegisterTenant:input_type -> main.TenantReq
	80,  // 233: main.TenantApi.GenerateTenant:input_type -> main.TenantReq
	80,  // 234: main.TenantApi.TenantResetPassword:input_type -> main.TenantReq
	80,  // 235: main.TenantApi.ChangePassword:input_type -> main.TenantReq
	80,  // 236: main.TenantApi.RecoveryPassword:input_type -> main.TenantReq
	80,  // 237: main.TenantApi.ChangeDevice:input_type -> main.TenantReq
	80,  // 238: main.TenantApi.ChangeContact:input_type -> main.TenantReq
	80,  // 239: main.TenantApi.ChangeSelf:input_type -> main.TenantReq
	80,  // 240: main.TenantApi.ChangeBanner:input_type -> main.TenantReq
	80,  // 241: main.TenantApi.ChangePhone:input_type -> main.TenantReq
	80,  // 242: main.TenantApi.ChangeExpireIn:input_type -> main.TenantReq
	80,  // 243: main.TenantApi.IsAdmin:input_type -> main.TenantReq
	80,  // 244: main.TenantApi.SetWeChat:input_type -> main.TenantReq
	80,  // 245: main.TenantApi.SetWork:input_type -> main.TenantReq
	80,  // 246: main.TenantApi.SetDingTalk:input_type -> main.TenantReq
	80,  // 247: main.TenantApi.SetLark:input_type -> main.TenantReq
	80,  // 248: main.TenantApi.SetSetting:input_type -> main.TenantReq
	80,  // 249: main.TenantApi.DebugSetting:input_type -> main.TenantReq
	80,  // 250: main.TenantApi.SystemBase:input_type -> main.TenantReq
	80,  // 251: main.TenantApi.SystemInfo:input_type -> main.TenantReq
	80,  // 252: main.TenantApi.UpgradeSystem:input_type -> main.TenantReq
	87,  // 253: main.ToolApi.ShortUrl:input_type -> main.Url
	87,  // 254: main.ToolApi.LongUrl:input_type -> main.Url
	86,  // 255: main.ToolApi.GetDomainUrl:input_type -> main.Req
	86,  // 256: main.ToolApi.GetCallbackUrl:input_type -> main.Req
	86,  // 257: main.ToolApi.QrCode:input_type -> main.Req
	88,  // 258: main.ToolApi.CreateBinaryFile:input_type -> main.File
	88,  // 259: main.ToolApi.CreateBase64File:input_type -> main.File
	88,  // 260: main.ToolApi.CreateRemoteFile:input_type -> main.File
	88,  // 261: main.ToolApi.GetFile:input_type -> main.File
	88,  // 262: main.ToolApi.DeleteFile:input_type -> main.File
	90,  // 263: main.workflowApi.GetAvoidWorkFlowNode:input_type -> main.requestInfo
	90,  // 264: main.workflowApi.FormIndex:input_type -> main.requestInfo
	90,  // 265: main.workflowApi.AddFormIndex:input_type -> main.requestInfo
	90,  // 266: main.workflowApi.UpdateFormIndex:input_type -> main.requestInfo
	90,  // 267: main.workflowApi.FormIndexDelete:input_type -> main.requestInfo
	94,  // 268: main.workflowApi.CreateNode:input_type -> main.formInfo
	90,  // 269: main.workflowApi.ModifyNode:input_type -> main.requestInfo
	90,  // 270: main.workflowApi.DeleteNode:input_type -> main.requestInfo
	90,  // 271: main.workflowApi.CreateTask:input_type -> main.requestInfo
	90,  // 272: main.workflowApi.DeleteTask:input_type -> main.requestInfo
	90,  // 273: main.workflowApi.SetRecipient:input_type -> main.requestInfo
	90,  // 274: main.workflowApi.SetSetting:input_type -> main.requestInfo
	90,  // 275: main.workflowApi.FlowInfo:input_type -> main.requestInfo
	90,  // 276: main.workflowApi.RecordInfo:input_type -> main.requestInfo
	90,  // 277: main.workflowApi.ModifyRecord:input_type -> main.requestInfo
	90,  // 278: main.workflowApi.RecipientByPk:input_type -> main.requestInfo
	90,  // 279: main.workflowApi.DefaultRecipients:input_type -> main.requestInfo
	90,  // 280: main.workflowApi.ModifyRecipient:input_type -> main.requestInfo
	90,  // 281: main.workflowApi.TotalTodo:input_type -> main.requestInfo
	90,  // 282: main.workflowApi.IsApproval:input_type -> main.requestInfo
	90,  // 283: main.workflowApi.InitFlow:input_type -> main.requestInfo
	95,  // 284: main.workflowApi.CreateRecord:input_type -> main.recordInfo
	90,  // 285: main.workflowApi.GetWorkflowSetting:input_type -> main.requestInfo
	0,   // 286: main.BillboardApi.CreateBillboard:output_type -> main.BillboardNull
	0,   // 287: main.BillboardApi.DeleteBillboard:output_type -> main.BillboardNull
	2,   // 288: main.BillboardApi.GetBillboardList:output_type -> main.BillboardList
	0,   // 289: main.BillboardApi.CreateBillboardItem:output_type -> main.BillboardNull
	0,   // 290: main.BillboardApi.UpdateBillboardItem:output_type -> main.BillboardNull
	6,   // 291: main.ClientApi.GetClientAuth:output_type -> main.clientInfo
	8,   // 292: main.ClientApi.GetClientAuthCallback:output_type -> main.userInfo
	3,   // 293: main.ClientApi.GetClientCallback:output_type -> main.ClientNull
	9,   // 294: main.ClientApi.GetJssdkConfig:output_type -> main.messageInfo
	9,   // 295: main.ClientApi.GetClientWorkTest:output_type -> main.messageInfo
	10,  // 296: main.ClientApi.GetClientMedia:output_type -> main.mediaInfo
	6,   // 297: main.ClientApi.GetClientOrganization:output_type -> main.clientInfo
	3,   // 298: main.ClientApi.AsyncClientOrganization:output_type -> main.ClientNull
	7,   // 299: main.ClientApi.GetClientUserInfo:output_type -> main.userClientInfo
	3,   // 300: main.ClientApi.UnbindWCClient:output_type -> main.ClientNull
	3,   // 301: main.ClientApi.WeChatMessage:output_type -> main.ClientNull
	3,   // 302: main.ClientApi.WorkMessage:output_type -> main.ClientNull
	3,   // 303: main.ClientApi.DingTalkMessage:output_type -> main.ClientNull
	3,   // 304: main.ClientApi.LarkMessage:output_type -> main.ClientNull
	3,   // 305: main.ClientApi.SendIMessage:output_type -> main.ClientNull
	8,   // 306: main.ClientApi.GetIUserBaseInfo:output_type -> main.userInfo
	6,   // 307: main.ClientApi.GetInitCode:output_type -> main.clientInfo
	4,   // 308: main.ClientApi.GetUserOrgByPhone:output_type -> main.ClientCompanyList
	4,   // 309: main.ClientApi.GetVisitorOrgByPhone:output_type -> main.ClientCompanyList
	4,   // 310: main.ClientApi.GetOrgByName:output_type -> main.ClientCompanyList
	48,  // 311: main.ClientApi.GetClientIds:output_type -> main.OrgRes
	11,  // 312: main.DeviceApi.CreateCompany:output_type -> main.DeviceNull
	11,  // 313: main.DeviceApi.DeleteCompany:output_type -> main.DeviceNull
	11,  // 314: main.DeviceApi.UpdateCompany:output_type -> main.DeviceNull
	12,  // 315: main.DeviceApi.SearchCompany:output_type -> main.companyList
	11,  // 316: main.DeviceApi.CreateArea:output_type -> main.DeviceNull
	11,  // 317: main.DeviceApi.DeleteArea:output_type -> main.DeviceNull
	11,  // 318: main.DeviceApi.UpdateArea:output_type -> main.DeviceNull
	12,  // 319: main.DeviceApi.SearchArea:output_type -> main.companyList
	15,  // 320: main.DeviceApi.Prepare:output_type -> main.companyInfo
	11,  // 321: main.DeviceApi.CreateMec:output_type -> main.DeviceNull
	11,  // 322: main.DeviceApi.UpdateMec:output_type -> main.DeviceNull
	11,  // 323: main.DeviceApi.RemoveMec:output_type -> main.DeviceNull
	11,  // 324: main.DeviceApi.DeleteMec:output_type -> main.DeviceNull
	13,  // 325: main.DeviceApi.SearchMec:output_type -> main.mecList
	11,  // 326: main.DeviceApi.KeepAlive:output_type -> main.DeviceNull
	11,  // 327: main.DeviceApi.AddDeviceVisitor:output_type -> main.DeviceNull
	11,  // 328: main.DeviceApi.DeviceVisitorLeave:output_type -> main.DeviceNull
	11,  // 329: main.DeviceApi.AddDeviceTraffic:output_type -> main.DeviceNull
	16,  // 330: main.DeviceApi.GetDashboardDevicePassagePages:output_type -> main.trafficList
	17,  // 331: main.DeviceApi.GetDevicePassageDetail:output_type -> main.trafficInfo
	11,  // 332: main.DeviceApi.DevicePassage:output_type -> main.DeviceNull
	21,  // 333: main.DeviceApi.DevicePassageIssue:output_type -> main.recordList
	21,  // 334: main.DeviceApi.DevicePassageSearch:output_type -> main.recordList
	11,  // 335: main.DeviceApi.DevicePassageCallback:output_type -> main.DeviceNull
	23,  // 336: main.HelperApi.CreateOneHelp:output_type -> main.HelperNull
	23,  // 337: main.HelperApi.UpdateOneHelp:output_type -> main.HelperNull
	23,  // 338: main.HelperApi.DeleteOneHelp:output_type -> main.HelperNull
	25,  // 339: main.HelperApi.GetHelpCenterList:output_type -> main.faqs
	27,  // 340: main.ManagerApi.RegisterManager:output_type -> main.RegisterManagerRes
	40,  // 341: main.ManagerApi.ChangeName:output_type -> main.Empty
	40,  // 342: main.ManagerApi.ChangeTFA:output_type -> main.Empty
	40,  // 343: main.ManagerApi.ChangePhone:output_type -> main.Empty
	40,  // 344: main.ManagerApi.ChangePassword:output_type -> main.Empty
	40,  // 345: main.ManagerApi.ChangeAccountAndPassword:output_type -> main.Empty
	40,  // 346: main.ManagerApi.ChangePasswordByPhone:output_type -> main.Empty
	35,  // 347: main.ManagerApi.LoginByPhone:output_type -> main.LoginByPhoneRes
	37,  // 348: main.ManagerApi.GetLoginManager:output_type -> main.GetLoginManagerRes
	40,  // 349: main.ManagerApi.DeleteAccount:output_type -> main.Empty
	40,  // 350: main.ManagerApi.CreateTeam:output_type -> main.Empty
	41,  // 351: main.MessageApi.GenerateAndroidMsg:output_type -> main.MessageNull
	41,  // 352: main.MessageApi.GenerateCheckCode:output_type -> main.MessageNull
	41,  // 353: main.MessageApi.VerifyCheckCode:output_type -> main.MessageNull
	44,  // 354: main.MessageApi.TotalMessage:output_type -> main.totalMsg
	45,  // 355: main.OrganizationApi.OneUser:output_type -> main.OrgNull
	48,  // 356: main.OrganizationApi.GetVisitorTicketInfo:output_type -> main.OrgRes
	48,  // 357: main.OrganizationApi.OneTenantUser:output_type -> main.OrgRes
	45,  // 358: main.OrganizationApi.DeleteUser:output_type -> main.OrgNull
	48,  // 359: main.OrganizationApi.UserBase:output_type -> main.OrgRes
	48,  // 360: main.OrganizationApi.UserBaseContainsIdCard:output_type -> main.OrgRes
	48,  // 361: main.OrganizationApi.UnitUserBase:output_type -> main.OrgRes
	48,  // 362: main.OrganizationApi.UnitMemberIds:output_type -> main.OrgRes
	48,  // 363: main.OrganizationApi.UserIds:output_type -> main.OrgRes
	48,  // 364: main.OrganizationApi.LeaderUuid:output_type -> main.OrgRes
	48,  // 365: main.OrganizationApi.EmpIndistinct:output_type -> main.OrgRes
	48,  // 366: main.OrganizationApi.EmpByNameAndPhoneIndistinct:output_type -> main.OrgRes
	48,  // 367: main.OrganizationApi.EmpByNameAndPhoneAndDepName:output_type -> main.OrgRes
	49,  // 368: main.OrganizationApi.UnitUser:output_type -> main.AllUserMap
	49,  // 369: main.OrganizationApi.VisitorsUser:output_type -> main.AllUserMap
	48,  // 370: main.OrganizationApi.UserByNameAndPhoneIndistinct:output_type -> main.OrgRes
	48,  // 371: main.OrganizationApi.GetUserByNameAndPhoneIndistinct:output_type -> main.OrgRes
	48,  // 372: main.OrganizationApi.UserUuidByPhone:output_type -> main.OrgRes
	45,  // 373: main.OrganizationApi.UserMark:output_type -> main.OrgNull
	45,  // 374: main.OrganizationApi.UserModify:output_type -> main.OrgNull
	48,  // 375: main.OrganizationApi.UserFaceRedirect:output_type -> main.OrgRes
	45,  // 376: main.OrganizationApi.OneUserTenant:output_type -> main.OrgNull
	45,  // 377: main.OrganizationApi.RootUnit:output_type -> main.OrgNull
	45,  // 378: main.OrganizationApi.ChildUnit:output_type -> main.OrgNull
	45,  // 379: main.OrganizationApi.RootUnitModify:output_type -> main.OrgNull
	45,  // 380: main.OrganizationApi.ChildUnitModify:output_type -> main.OrgNull
	45,  // 381: main.OrganizationApi.DeleteUnit:output_type -> main.OrgNull
	46,  // 382: main.OrganizationApi.UnitRootTree:output_type -> main.Any
	46,  // 383: main.OrganizationApi.UnitTreeByParUuid:output_type -> main.Any
	46,  // 384: main.OrganizationApi.UnitRootTreeJson:output_type -> main.Any
	46,  // 385: main.OrganizationApi.ParentUnitTree:output_type -> main.Any
	48,  // 386: main.OrganizationApi.IsLeader:output_type -> main.OrgRes
	50,  // 387: main.OrganizationApi.ChildUnitPagesList:output_type -> main.ChildUnitMap
	50,  // 388: main.OrganizationApi.RootUnitPagesList:output_type -> main.ChildUnitMap
	48,  // 389: main.OrganizationApi.UnitMemberByUnitUuid:output_type -> main.OrgRes
	48,  // 390: main.OrganizationApi.UnitByUserUuid:output_type -> main.OrgRes
	48,  // 391: main.OrganizationApi.SameUnitMemberList:output_type -> main.OrgRes
	45,  // 392: main.OrganizationApi.UnitMemberModify:output_type -> main.OrgNull
	45,  // 393: main.OrganizationApi.DeleteUnitMember:output_type -> main.OrgNull
	48,  // 394: main.OrganizationApi.ExcelFileImport:output_type -> main.OrgRes
	48,  // 395: main.OrganizationApi.ImportVisitors:output_type -> main.OrgRes
	45,  // 396: main.OrganizationApi.AddOneVisitor:output_type -> main.OrgNull
	46,  // 397: main.OrganizationApi.GetImportOrgResult:output_type -> main.Any
	46,  // 398: main.OrganizationApi.GetImportVisitorOrgResult:output_type -> main.Any
	48,  // 399: main.OrganizationApi.BaseInfoByBindPhone:output_type -> main.OrgRes
	48,  // 400: main.OrganizationApi.ClientIds:output_type -> main.OrgRes
	45,  // 401: main.OrganizationApi.WeChatUnBind:output_type -> main.OrgNull
	48,  // 402: main.OrganizationApi.UserTenantByUserUuid:output_type -> main.OrgRes
	48,  // 403: main.OrganizationApi.IsBlacklist:output_type -> main.OrgRes
	45,  // 404: main.OrganizationApi.UpdateIsBlacklist:output_type -> main.OrgNull
	59,  // 405: main.PassageApi.PassageAddMyEmp:output_type -> main.PassageRes
	60,  // 406: main.PassageApi.PassageMyEmpPages:output_type -> main.PassageResMap
	57,  // 407: main.PassageApi.PassageMyEmp:output_type -> main.PassageNull
	59,  // 408: main.PassageApi.PassageMyEmpLists:output_type -> main.PassageRes
	59,  // 409: main.PassageApi.PassageBooking:output_type -> main.PassageRes
	59,  // 410: main.PassageApi.BatchPassageInvite:output_type -> main.PassageRes
	60,  // 411: main.PassageApi.GetInviteBatchPassageResult:output_type -> main.PassageResMap
	60,  // 412: main.PassageApi.PassageInvite:output_type -> main.PassageResMap
	59,  // 413: main.PassageApi.DeletePassage:output_type -> main.PassageRes
	59,  // 414: main.PassageApi.DeletePassageByPersonUuid:output_type -> main.PassageRes
	60,  // 415: main.PassageApi.PassageLists:output_type -> main.PassageResMap
	61,  // 416: main.PassageApi.PassageBookingAll:output_type -> main.PassageMap
	61,  // 417: main.PassageApi.PassageInviteAll:output_type -> main.PassageMap
	61,  // 418: main.PassageApi.PassageBookingArrival:output_type -> main.PassageMap
	61,  // 419: main.PassageApi.PassageBookingStatus:output_type -> main.PassageMap
	61,  // 420: main.PassageApi.PassageBookingStatusPass:output_type -> main.PassageMap
	61,  // 421: main.PassageApi.PassageInviteArrival:output_type -> main.PassageMap
	61,  // 422: main.PassageApi.PassageInviteStatus:output_type -> main.PassageMap
	61,  // 423: main.PassageApi.PassageInviteStatusPass:output_type -> main.PassageMap
	59,  // 424: main.PassageApi.OneDetail:output_type -> main.PassageRes
	59,  // 425: main.PassageApi.VisitorTodayPass:output_type -> main.PassageRes
	59,  // 426: main.PassageApi.EmpTodayPass:output_type -> main.PassageRes
	59,  // 427: main.PassageApi.PassageAddMyVisitor:output_type -> main.PassageRes
	57,  // 428: main.PassageApi.PassageMyVisitorTop:output_type -> main.PassageNull
	60,  // 429: main.PassageApi.PassageMyVisitorPages:output_type -> main.PassageResMap
	60,  // 430: main.PassageApi.PassageMyVisitor:output_type -> main.PassageResMap
	59,  // 431: main.PassageApi.PassageMyVisitorByUuid:output_type -> main.PassageRes
	59,  // 432: main.PassageApi.PassageMyVisitorLists:output_type -> main.PassageRes
	57,  // 433: main.PassageApi.WorkFlow:output_type -> main.PassageNull
	61,  // 434: main.PassageApi.PassagePageLists:output_type -> main.PassageMap
	59,  // 435: main.PassageApi.PassageExcel:output_type -> main.PassageRes
	57,  // 436: main.PassageApi.DevicePassage:output_type -> main.PassageNull
	57,  // 437: main.PassageApi.BasePassage:output_type -> main.PassageNull
	59,  // 438: main.PassageApi.SpotVisitorDetail:output_type -> main.PassageRes
	62,  // 439: main.PassageApi.PassageSpotVisitorPages:output_type -> main.PassageSpotMap
	62,  // 440: main.PassageApi.PassageSpotVisitor:output_type -> main.PassageSpotMap
	74,  // 441: main.QuestionnaireApi.InitQuestionnaire:output_type -> main.naireInfo
	74,  // 442: main.QuestionnaireApi.AddQuestionnaire:output_type -> main.naireInfo
	68,  // 443: main.QuestionnaireApi.UpdateQuestionnaire:output_type -> main.QuestionNull
	69,  // 444: main.QuestionnaireApi.GetQuestionnaire:output_type -> main.questionList
	68,  // 445: main.QuestionnaireApi.DeleteQuestionnaire:output_type -> main.QuestionNull
	69,  // 446: main.QuestionnaireApi.GetQuestionnaireList:output_type -> main.questionList
	70,  // 447: main.QuestionnaireApi.GetQuestionInfo:output_type -> main.questionInfo
	70,  // 448: main.QuestionnaireApi.AddOneQuestion:output_type -> main.questionInfo
	68,  // 449: main.QuestionnaireApi.UpdateOneQuestion:output_type -> main.QuestionNull
	68,  // 450: main.QuestionnaireApi.DeleteQuestionByUuid:output_type -> main.QuestionNull
	69,  // 451: main.QuestionnaireApi.GetQuestionList:output_type -> main.questionList
	71,  // 452: main.QuestionnaireApi.GetAnswerByUN:output_type -> main.answerList
	72,  // 453: main.QuestionnaireApi.AddAnswerByUN:output_type -> main.answerInfo
	68,  // 454: main.QuestionnaireApi.UpdateAnswerByAU:output_type -> main.QuestionNull
	71,  // 455: main.QuestionnaireApi.GetIAnswerByQUuid:output_type -> main.answerList
	71,  // 456: main.QuestionnaireApi.GetQNAnswerBYQN:output_type -> main.answerList
	68,  // 457: main.QuestionnaireApi.DeleteUAnswerByQN:output_type -> main.QuestionNull
	75,  // 458: main.SecureApi.GenerateToken:output_type -> main.Jwt
	75,  // 459: main.SecureApi.ParseToken:output_type -> main.Jwt
	75,  // 460: main.SecureApi.RefreshToken:output_type -> main.Jwt
	76,  // 461: main.TaskApi.RegisterUser:output_type -> main.TaskNull
	76,  // 462: main.TaskApi.CreateVhost:output_type -> main.TaskNull
	76,  // 463: main.TaskApi.DestroyVhost:output_type -> main.TaskNull
	76,  // 464: main.TaskApi.CreateExchange:output_type -> main.TaskNull
	76,  // 465: main.TaskApi.DestroyExchange:output_type -> main.TaskNull
	76,  // 466: main.TaskApi.CreateQueue:output_type -> main.TaskNull
	76,  // 467: main.TaskApi.DestroyQueue:output_type -> main.TaskNull
	76,  // 468: main.TaskApi.Task:output_type -> main.TaskNull
	79,  // 469: main.TenantApi.RefTenantReshRedis:output_type -> main.TenantNull
	81,  // 470: main.TenantApi.ClientByUuid:output_type -> main.TenantRes
	81,  // 471: main.TenantApi.ClientByOrgId:output_type -> main.TenantRes
	83,  // 472: main.TenantApi.SettingByUuid:output_type -> main.Tenant
	81,  // 473: main.TenantApi.AccountByPhone:output_type -> main.TenantRes
	81,  // 474: main.TenantApi.AuthByDevice:output_type -> main.TenantRes
	81,  // 475: main.TenantApi.PhoneByAccount:output_type -> main.TenantRes
	83,  // 476: main.TenantApi.InfoByUuid:output_type -> main.Tenant
	83,  // 477: main.TenantApi.InfoByOrgId:output_type -> main.Tenant
	83,  // 478: main.TenantApi.InfoByPassword:output_type -> main.Tenant
	82,  // 479: main.TenantApi.ListTenant:output_type -> main.TenantResMap
	83,  // 480: main.TenantApi.RegisterTenant:output_type -> main.Tenant
	83,  // 481: main.TenantApi.GenerateTenant:output_type -> main.Tenant
	79,  // 482: main.TenantApi.TenantResetPassword:output_type -> main.TenantNull
	79,  // 483: main.TenantApi.ChangePassword:output_type -> main.TenantNull
	79,  // 484: main.TenantApi.RecoveryPassword:output_type -> main.TenantNull
	79,  // 485: main.TenantApi.ChangeDevice:output_type -> main.TenantNull
	79,  // 486: main.TenantApi.ChangeContact:output_type -> main.TenantNull
	79,  // 487: main.TenantApi.ChangeSelf:output_type -> main.TenantNull
	79,  // 488: main.TenantApi.ChangeBanner:output_type -> main.TenantNull
	79,  // 489: main.TenantApi.ChangePhone:output_type -> main.TenantNull
	79,  // 490: main.TenantApi.ChangeExpireIn:output_type -> main.TenantNull
	79,  // 491: main.TenantApi.IsAdmin:output_type -> main.TenantNull
	79,  // 492: main.TenantApi.SetWeChat:output_type -> main.TenantNull
	79,  // 493: main.TenantApi.SetWork:output_type -> main.TenantNull
	79,  // 494: main.TenantApi.SetDingTalk:output_type -> main.TenantNull
	79,  // 495: main.TenantApi.SetLark:output_type -> main.TenantNull
	79,  // 496: main.TenantApi.SetSetting:output_type -> main.TenantNull
	79,  // 497: main.TenantApi.DebugSetting:output_type -> main.TenantNull
	84,  // 498: main.TenantApi.SystemBase:output_type -> main.System
	84,  // 499: main.TenantApi.SystemInfo:output_type -> main.System
	79,  // 500: main.TenantApi.UpgradeSystem:output_type -> main.TenantNull
	87,  // 501: main.ToolApi.ShortUrl:output_type -> main.Url
	87,  // 502: main.ToolApi.LongUrl:output_type -> main.Url
	87,  // 503: main.ToolApi.GetDomainUrl:output_type -> main.Url
	87,  // 504: main.ToolApi.GetCallbackUrl:output_type -> main.Url
	88,  // 505: main.ToolApi.QrCode:output_type -> main.File
	88,  // 506: main.ToolApi.CreateBinaryFile:output_type -> main.File
	88,  // 507: main.ToolApi.CreateBase64File:output_type -> main.File
	88,  // 508: main.ToolApi.CreateRemoteFile:output_type -> main.File
	88,  // 509: main.ToolApi.GetFile:output_type -> main.File
	85,  // 510: main.ToolApi.DeleteFile:output_type -> main.ToolNull
	93,  // 511: main.workflowApi.GetAvoidWorkFlowNode:output_type -> main.formList
	93,  // 512: main.workflowApi.FormIndex:output_type -> main.formList
	91,  // 513: main.workflowApi.AddFormIndex:output_type -> main.responseInfo
	89,  // 514: main.workflowApi.UpdateFormIndex:output_type -> main.WorkflowNull
	89,  // 515: main.workflowApi.FormIndexDelete:output_type -> main.WorkflowNull
	91,  // 516: main.workflowApi.CreateNode:output_type -> main.responseInfo
	89,  // 517: main.workflowApi.ModifyNode:output_type -> main.WorkflowNull
	89,  // 518: main.workflowApi.DeleteNode:output_type -> main.WorkflowNull
	89,  // 519: main.workflowApi.CreateTask:output_type -> main.WorkflowNull
	89,  // 520: main.workflowApi.DeleteTask:output_type -> main.WorkflowNull
	89,  // 521: main.workflowApi.SetRecipient:output_type -> main.WorkflowNull
	89,  // 522: main.workflowApi.SetSetting:output_type -> main.WorkflowNull
	90,  // 523: main.workflowApi.FlowInfo:output_type -> main.requestInfo
	95,  // 524: main.workflowApi.RecordInfo:output_type -> main.recordInfo
	89,  // 525: main.workflowApi.ModifyRecord:output_type -> main.WorkflowNull
	90,  // 526: main.workflowApi.RecipientByPk:output_type -> main.requestInfo
	91,  // 527: main.workflowApi.DefaultRecipients:output_type -> main.responseInfo
	89,  // 528: main.workflowApi.ModifyRecipient:output_type -> main.WorkflowNull
	91,  // 529: main.workflowApi.TotalTodo:output_type -> main.responseInfo
	91,  // 530: main.workflowApi.IsApproval:output_type -> main.responseInfo
	89,  // 531: main.workflowApi.InitFlow:output_type -> main.WorkflowNull
	89,  // 532: main.workflowApi.CreateRecord:output_type -> main.WorkflowNull
	90,  // 533: main.workflowApi.GetWorkflowSetting:output_type -> main.requestInfo
	286, // [286:534] is the sub-list for method output_type
	38,  // [38:286] is the sub-list for method input_type
	38,  // [38:38] is the sub-list for extension type_name
	38,  // [38:38] is the sub-list for extension extendee
	0,   // [0:38] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillboardNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneBillboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillboardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCompanyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCompanyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MecList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MecInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRecordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelperNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Faq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Faqs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterManagerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterManagerRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeTFAReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAccountAndPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordByPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginByPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginByPhoneRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoginManagerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoginManagerRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Any); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllUserMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildUnitMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitMemberAndUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassageNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassageRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassageResMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassageMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassageSpotMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteBatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassageUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Passage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassageSpot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaireList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaireInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jwt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amqp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmqpTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantResMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Url); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   97,
			NumExtensions: 0,
			NumServices:   14,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}
