// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.2
// - protoc             v3.19.1
// source: api.proto

package pb

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// BillboardApiClient is the client API for BillboardApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillboardApiClient interface {
	CreateBillboard(ctx context.Context, in *OneBillboard, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DeleteBillboard(ctx context.Context, in *OneBillboard, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	GetBillboardList(ctx context.Context, in *OneBillboard, opts ...grpc_go.CallOption) (*BillboardList, common.ErrorWithAttachment)
	CreateBillboardItem(ctx context.Context, in *OneBillboard, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	UpdateBillboardItem(ctx context.Context, in *OneBillboard, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
}

type billboardApiClient struct {
	cc *triple.TripleConn
}

type BillboardApiClientImpl struct {
	CreateBillboard     func(ctx context.Context, in *OneBillboard) (*Null, error)
	DeleteBillboard     func(ctx context.Context, in *OneBillboard) (*Null, error)
	GetBillboardList    func(ctx context.Context, in *OneBillboard) (*BillboardList, error)
	CreateBillboardItem func(ctx context.Context, in *OneBillboard) (*Null, error)
	UpdateBillboardItem func(ctx context.Context, in *OneBillboard) (*Null, error)
}

func (c *BillboardApiClientImpl) GetDubboStub(cc *triple.TripleConn) BillboardApiClient {
	return NewBillboardApiClient(cc)
}

func NewBillboardApiClient(cc *triple.TripleConn) BillboardApiClient {
	return &billboardApiClient{cc}
}

func (c *billboardApiClient) CreateBillboard(ctx context.Context, in *OneBillboard, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateBillboard", in, out)
}

func (c *billboardApiClient) DeleteBillboard(ctx context.Context, in *OneBillboard, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteBillboard", in, out)
}

func (c *billboardApiClient) GetBillboardList(ctx context.Context, in *OneBillboard, opts ...grpc_go.CallOption) (*BillboardList, common.ErrorWithAttachment) {
	out := new(BillboardList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetBillboardList", in, out)
}

func (c *billboardApiClient) CreateBillboardItem(ctx context.Context, in *OneBillboard, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateBillboardItem", in, out)
}

func (c *billboardApiClient) UpdateBillboardItem(ctx context.Context, in *OneBillboard, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UpdateBillboardItem", in, out)
}

// BillboardApiServer is the server API for BillboardApi service.
// All implementations must embed UnimplementedBillboardApiServer
// for forward compatibility
type BillboardApiServer interface {
	CreateBillboard(context.Context, *OneBillboard) (*Null, error)
	DeleteBillboard(context.Context, *OneBillboard) (*Null, error)
	GetBillboardList(context.Context, *OneBillboard) (*BillboardList, error)
	CreateBillboardItem(context.Context, *OneBillboard) (*Null, error)
	UpdateBillboardItem(context.Context, *OneBillboard) (*Null, error)
	mustEmbedUnimplementedBillboardApiServer()
}

// UnimplementedBillboardApiServer must be embedded to have forward compatible implementations.
type UnimplementedBillboardApiServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedBillboardApiServer) CreateBillboard(context.Context, *OneBillboard) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillboard not implemented")
}
func (UnimplementedBillboardApiServer) DeleteBillboard(context.Context, *OneBillboard) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBillboard not implemented")
}
func (UnimplementedBillboardApiServer) GetBillboardList(context.Context, *OneBillboard) (*BillboardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillboardList not implemented")
}
func (UnimplementedBillboardApiServer) CreateBillboardItem(context.Context, *OneBillboard) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillboardItem not implemented")
}
func (UnimplementedBillboardApiServer) UpdateBillboardItem(context.Context, *OneBillboard) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillboardItem not implemented")
}
func (s *UnimplementedBillboardApiServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedBillboardApiServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedBillboardApiServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &BillboardApi_ServiceDesc
}
func (UnimplementedBillboardApiServer) mustEmbedUnimplementedBillboardApiServer() {}

// UnsafeBillboardApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillboardApiServer will
// result in compilation errors.
type UnsafeBillboardApiServer interface {
	mustEmbedUnimplementedBillboardApiServer()
}

func RegisterBillboardApiServer(s grpc_go.ServiceRegistrar, srv BillboardApiServer) {
	s.RegisterService(&BillboardApi_ServiceDesc, srv)
}

func _BillboardApi_CreateBillboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneBillboard)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateBillboard", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.BillboardApi/CreateBillboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillboardApiServer).CreateBillboard(ctx, req.(*OneBillboard))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillboardApi_DeleteBillboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneBillboard)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteBillboard", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.BillboardApi/DeleteBillboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillboardApiServer).DeleteBillboard(ctx, req.(*OneBillboard))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillboardApi_GetBillboardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneBillboard)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetBillboardList", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.BillboardApi/GetBillboardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillboardApiServer).GetBillboardList(ctx, req.(*OneBillboard))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillboardApi_CreateBillboardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneBillboard)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateBillboardItem", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.BillboardApi/CreateBillboardItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillboardApiServer).CreateBillboardItem(ctx, req.(*OneBillboard))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillboardApi_UpdateBillboardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneBillboard)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UpdateBillboardItem", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.BillboardApi/UpdateBillboardItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillboardApiServer).UpdateBillboardItem(ctx, req.(*OneBillboard))
	}
	return interceptor(ctx, in, info, handler)
}

// BillboardApi_ServiceDesc is the grpc_go.ServiceDesc for BillboardApi service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillboardApi_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "main.BillboardApi",
	HandlerType: (*BillboardApiServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "CreateBillboard",
			Handler:    _BillboardApi_CreateBillboard_Handler,
		},
		{
			MethodName: "DeleteBillboard",
			Handler:    _BillboardApi_DeleteBillboard_Handler,
		},
		{
			MethodName: "GetBillboardList",
			Handler:    _BillboardApi_GetBillboardList_Handler,
		},
		{
			MethodName: "CreateBillboardItem",
			Handler:    _BillboardApi_CreateBillboardItem_Handler,
		},
		{
			MethodName: "UpdateBillboardItem",
			Handler:    _BillboardApi_UpdateBillboardItem_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}

// ClientApiClient is the client API for ClientApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientApiClient interface {
	GetClientAuth(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*ClientInfo, common.ErrorWithAttachment)
	GetClientAuthCallback(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*UserInfo, common.ErrorWithAttachment)
	GetClientCallback(ctx context.Context, in *MessageInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	GetJssdkConfig(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*MessageInfo, common.ErrorWithAttachment)
	GetClientWorkTest(ctx context.Context, in *MessageInfo, opts ...grpc_go.CallOption) (*MessageInfo, common.ErrorWithAttachment)
	GetClientMedia(ctx context.Context, in *MediaInfo, opts ...grpc_go.CallOption) (*MediaInfo, common.ErrorWithAttachment)
	GetClientOrganization(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*ClientInfo, common.ErrorWithAttachment)
	AsyncClientOrganization(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	GetClientUserInfo(ctx context.Context, in *UserInfo, opts ...grpc_go.CallOption) (*User, common.ErrorWithAttachment)
	UnbindWCClient(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	WeChatMessage(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	WorkMessage(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DingTalkMessage(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	LarkMessage(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	SendIMessage(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	GetIUserBaseInfo(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*UserInfo, common.ErrorWithAttachment)
	GetInitCode(ctx context.Context, in *Null, opts ...grpc_go.CallOption) (*ClientInfo, common.ErrorWithAttachment)
	GetUserOrgByPhone(ctx context.Context, in *UserInfo, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment)
	GetVisitorOrgByPhone(ctx context.Context, in *UserInfo, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment)
	GetOrgByName(ctx context.Context, in *ClientCompanyInfo, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment)
	GetClientIds(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
}

type clientApiClient struct {
	cc *triple.TripleConn
}

type ClientApiClientImpl struct {
	GetClientAuth           func(ctx context.Context, in *ClientInfo) (*ClientInfo, error)
	GetClientAuthCallback   func(ctx context.Context, in *ClientInfo) (*UserInfo, error)
	GetClientCallback       func(ctx context.Context, in *MessageInfo) (*Null, error)
	GetJssdkConfig          func(ctx context.Context, in *ClientInfo) (*MessageInfo, error)
	GetClientWorkTest       func(ctx context.Context, in *MessageInfo) (*MessageInfo, error)
	GetClientMedia          func(ctx context.Context, in *MediaInfo) (*MediaInfo, error)
	GetClientOrganization   func(ctx context.Context, in *ClientInfo) (*ClientInfo, error)
	AsyncClientOrganization func(ctx context.Context, in *ClientInfo) (*Null, error)
	GetClientUserInfo       func(ctx context.Context, in *UserInfo) (*User, error)
	UnbindWCClient          func(ctx context.Context, in *ClientInfo) (*Null, error)
	WeChatMessage           func(ctx context.Context, in *ClientInfo) (*Null, error)
	WorkMessage             func(ctx context.Context, in *ClientInfo) (*Null, error)
	DingTalkMessage         func(ctx context.Context, in *ClientInfo) (*Null, error)
	LarkMessage             func(ctx context.Context, in *ClientInfo) (*Null, error)
	SendIMessage            func(ctx context.Context, in *ClientInfo) (*Null, error)
	GetIUserBaseInfo        func(ctx context.Context, in *ClientInfo) (*UserInfo, error)
	GetInitCode             func(ctx context.Context, in *Null) (*ClientInfo, error)
	GetUserOrgByPhone       func(ctx context.Context, in *UserInfo) (*Any, error)
	GetVisitorOrgByPhone    func(ctx context.Context, in *UserInfo) (*Any, error)
	GetOrgByName            func(ctx context.Context, in *ClientCompanyInfo) (*Any, error)
	GetClientIds            func(ctx context.Context, in *ClientInfo) (*OrgRes, error)
}

func (c *ClientApiClientImpl) GetDubboStub(cc *triple.TripleConn) ClientApiClient {
	return NewClientApiClient(cc)
}

func NewClientApiClient(cc *triple.TripleConn) ClientApiClient {
	return &clientApiClient{cc}
}

func (c *clientApiClient) GetClientAuth(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*ClientInfo, common.ErrorWithAttachment) {
	out := new(ClientInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetClientAuth", in, out)
}

func (c *clientApiClient) GetClientAuthCallback(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*UserInfo, common.ErrorWithAttachment) {
	out := new(UserInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetClientAuthCallback", in, out)
}

func (c *clientApiClient) GetClientCallback(ctx context.Context, in *MessageInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetClientCallback", in, out)
}

func (c *clientApiClient) GetJssdkConfig(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*MessageInfo, common.ErrorWithAttachment) {
	out := new(MessageInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetJssdkConfig", in, out)
}

func (c *clientApiClient) GetClientWorkTest(ctx context.Context, in *MessageInfo, opts ...grpc_go.CallOption) (*MessageInfo, common.ErrorWithAttachment) {
	out := new(MessageInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetClientWorkTest", in, out)
}

func (c *clientApiClient) GetClientMedia(ctx context.Context, in *MediaInfo, opts ...grpc_go.CallOption) (*MediaInfo, common.ErrorWithAttachment) {
	out := new(MediaInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetClientMedia", in, out)
}

func (c *clientApiClient) GetClientOrganization(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*ClientInfo, common.ErrorWithAttachment) {
	out := new(ClientInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetClientOrganization", in, out)
}

func (c *clientApiClient) AsyncClientOrganization(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/AsyncClientOrganization", in, out)
}

func (c *clientApiClient) GetClientUserInfo(ctx context.Context, in *UserInfo, opts ...grpc_go.CallOption) (*User, common.ErrorWithAttachment) {
	out := new(User)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetClientUserInfo", in, out)
}

func (c *clientApiClient) UnbindWCClient(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UnbindWCClient", in, out)
}

func (c *clientApiClient) WeChatMessage(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/WeChatMessage", in, out)
}

func (c *clientApiClient) WorkMessage(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/WorkMessage", in, out)
}

func (c *clientApiClient) DingTalkMessage(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DingTalkMessage", in, out)
}

func (c *clientApiClient) LarkMessage(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/LarkMessage", in, out)
}

func (c *clientApiClient) SendIMessage(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SendIMessage", in, out)
}

func (c *clientApiClient) GetIUserBaseInfo(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*UserInfo, common.ErrorWithAttachment) {
	out := new(UserInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetIUserBaseInfo", in, out)
}

func (c *clientApiClient) GetInitCode(ctx context.Context, in *Null, opts ...grpc_go.CallOption) (*ClientInfo, common.ErrorWithAttachment) {
	out := new(ClientInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetInitCode", in, out)
}

func (c *clientApiClient) GetUserOrgByPhone(ctx context.Context, in *UserInfo, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment) {
	out := new(Any)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetUserOrgByPhone", in, out)
}

func (c *clientApiClient) GetVisitorOrgByPhone(ctx context.Context, in *UserInfo, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment) {
	out := new(Any)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetVisitorOrgByPhone", in, out)
}

func (c *clientApiClient) GetOrgByName(ctx context.Context, in *ClientCompanyInfo, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment) {
	out := new(Any)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetOrgByName", in, out)
}

func (c *clientApiClient) GetClientIds(ctx context.Context, in *ClientInfo, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetClientIds", in, out)
}

// ClientApiServer is the server API for ClientApi service.
// All implementations must embed UnimplementedClientApiServer
// for forward compatibility
type ClientApiServer interface {
	GetClientAuth(context.Context, *ClientInfo) (*ClientInfo, error)
	GetClientAuthCallback(context.Context, *ClientInfo) (*UserInfo, error)
	GetClientCallback(context.Context, *MessageInfo) (*Null, error)
	GetJssdkConfig(context.Context, *ClientInfo) (*MessageInfo, error)
	GetClientWorkTest(context.Context, *MessageInfo) (*MessageInfo, error)
	GetClientMedia(context.Context, *MediaInfo) (*MediaInfo, error)
	GetClientOrganization(context.Context, *ClientInfo) (*ClientInfo, error)
	AsyncClientOrganization(context.Context, *ClientInfo) (*Null, error)
	GetClientUserInfo(context.Context, *UserInfo) (*User, error)
	UnbindWCClient(context.Context, *ClientInfo) (*Null, error)
	WeChatMessage(context.Context, *ClientInfo) (*Null, error)
	WorkMessage(context.Context, *ClientInfo) (*Null, error)
	DingTalkMessage(context.Context, *ClientInfo) (*Null, error)
	LarkMessage(context.Context, *ClientInfo) (*Null, error)
	SendIMessage(context.Context, *ClientInfo) (*Null, error)
	GetIUserBaseInfo(context.Context, *ClientInfo) (*UserInfo, error)
	GetInitCode(context.Context, *Null) (*ClientInfo, error)
	GetUserOrgByPhone(context.Context, *UserInfo) (*Any, error)
	GetVisitorOrgByPhone(context.Context, *UserInfo) (*Any, error)
	GetOrgByName(context.Context, *ClientCompanyInfo) (*Any, error)
	GetClientIds(context.Context, *ClientInfo) (*OrgRes, error)
	mustEmbedUnimplementedClientApiServer()
}

// UnimplementedClientApiServer must be embedded to have forward compatible implementations.
type UnimplementedClientApiServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedClientApiServer) GetClientAuth(context.Context, *ClientInfo) (*ClientInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientAuth not implemented")
}
func (UnimplementedClientApiServer) GetClientAuthCallback(context.Context, *ClientInfo) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientAuthCallback not implemented")
}
func (UnimplementedClientApiServer) GetClientCallback(context.Context, *MessageInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientCallback not implemented")
}
func (UnimplementedClientApiServer) GetJssdkConfig(context.Context, *ClientInfo) (*MessageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJssdkConfig not implemented")
}
func (UnimplementedClientApiServer) GetClientWorkTest(context.Context, *MessageInfo) (*MessageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientWorkTest not implemented")
}
func (UnimplementedClientApiServer) GetClientMedia(context.Context, *MediaInfo) (*MediaInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientMedia not implemented")
}
func (UnimplementedClientApiServer) GetClientOrganization(context.Context, *ClientInfo) (*ClientInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientOrganization not implemented")
}
func (UnimplementedClientApiServer) AsyncClientOrganization(context.Context, *ClientInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsyncClientOrganization not implemented")
}
func (UnimplementedClientApiServer) GetClientUserInfo(context.Context, *UserInfo) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientUserInfo not implemented")
}
func (UnimplementedClientApiServer) UnbindWCClient(context.Context, *ClientInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindWCClient not implemented")
}
func (UnimplementedClientApiServer) WeChatMessage(context.Context, *ClientInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeChatMessage not implemented")
}
func (UnimplementedClientApiServer) WorkMessage(context.Context, *ClientInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkMessage not implemented")
}
func (UnimplementedClientApiServer) DingTalkMessage(context.Context, *ClientInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DingTalkMessage not implemented")
}
func (UnimplementedClientApiServer) LarkMessage(context.Context, *ClientInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LarkMessage not implemented")
}
func (UnimplementedClientApiServer) SendIMessage(context.Context, *ClientInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendIMessage not implemented")
}
func (UnimplementedClientApiServer) GetIUserBaseInfo(context.Context, *ClientInfo) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIUserBaseInfo not implemented")
}
func (UnimplementedClientApiServer) GetInitCode(context.Context, *Null) (*ClientInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInitCode not implemented")
}
func (UnimplementedClientApiServer) GetUserOrgByPhone(context.Context, *UserInfo) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOrgByPhone not implemented")
}
func (UnimplementedClientApiServer) GetVisitorOrgByPhone(context.Context, *UserInfo) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisitorOrgByPhone not implemented")
}
func (UnimplementedClientApiServer) GetOrgByName(context.Context, *ClientCompanyInfo) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgByName not implemented")
}
func (UnimplementedClientApiServer) GetClientIds(context.Context, *ClientInfo) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientIds not implemented")
}
func (s *UnimplementedClientApiServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedClientApiServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedClientApiServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &ClientApi_ServiceDesc
}
func (UnimplementedClientApiServer) mustEmbedUnimplementedClientApiServer() {}

// UnsafeClientApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientApiServer will
// result in compilation errors.
type UnsafeClientApiServer interface {
	mustEmbedUnimplementedClientApiServer()
}

func RegisterClientApiServer(s grpc_go.ServiceRegistrar, srv ClientApiServer) {
	s.RegisterService(&ClientApi_ServiceDesc, srv)
}

func _ClientApi_GetClientAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetClientAuth", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/GetClientAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).GetClientAuth(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_GetClientAuthCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetClientAuthCallback", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/GetClientAuthCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).GetClientAuthCallback(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_GetClientCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetClientCallback", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/GetClientCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).GetClientCallback(ctx, req.(*MessageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_GetJssdkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetJssdkConfig", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/GetJssdkConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).GetJssdkConfig(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_GetClientWorkTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetClientWorkTest", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/GetClientWorkTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).GetClientWorkTest(ctx, req.(*MessageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_GetClientMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetClientMedia", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/GetClientMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).GetClientMedia(ctx, req.(*MediaInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_GetClientOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetClientOrganization", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/GetClientOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).GetClientOrganization(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_AsyncClientOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("AsyncClientOrganization", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/AsyncClientOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).AsyncClientOrganization(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_GetClientUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetClientUserInfo", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/GetClientUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).GetClientUserInfo(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_UnbindWCClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UnbindWCClient", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/UnbindWCClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).UnbindWCClient(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_WeChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("WeChatMessage", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/WeChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).WeChatMessage(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_WorkMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("WorkMessage", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/WorkMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).WorkMessage(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_DingTalkMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DingTalkMessage", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/DingTalkMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).DingTalkMessage(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_LarkMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("LarkMessage", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/LarkMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).LarkMessage(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_SendIMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SendIMessage", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/SendIMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).SendIMessage(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_GetIUserBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetIUserBaseInfo", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/GetIUserBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).GetIUserBaseInfo(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_GetInitCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetInitCode", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/GetInitCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).GetInitCode(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_GetUserOrgByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetUserOrgByPhone", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/GetUserOrgByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).GetUserOrgByPhone(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_GetVisitorOrgByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetVisitorOrgByPhone", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/GetVisitorOrgByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).GetVisitorOrgByPhone(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_GetOrgByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientCompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetOrgByName", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/GetOrgByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).GetOrgByName(ctx, req.(*ClientCompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientApi_GetClientIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetClientIds", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ClientApi/GetClientIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientApiServer).GetClientIds(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientApi_ServiceDesc is the grpc_go.ServiceDesc for ClientApi service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientApi_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "main.ClientApi",
	HandlerType: (*ClientApiServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "GetClientAuth",
			Handler:    _ClientApi_GetClientAuth_Handler,
		},
		{
			MethodName: "GetClientAuthCallback",
			Handler:    _ClientApi_GetClientAuthCallback_Handler,
		},
		{
			MethodName: "GetClientCallback",
			Handler:    _ClientApi_GetClientCallback_Handler,
		},
		{
			MethodName: "GetJssdkConfig",
			Handler:    _ClientApi_GetJssdkConfig_Handler,
		},
		{
			MethodName: "GetClientWorkTest",
			Handler:    _ClientApi_GetClientWorkTest_Handler,
		},
		{
			MethodName: "GetClientMedia",
			Handler:    _ClientApi_GetClientMedia_Handler,
		},
		{
			MethodName: "GetClientOrganization",
			Handler:    _ClientApi_GetClientOrganization_Handler,
		},
		{
			MethodName: "AsyncClientOrganization",
			Handler:    _ClientApi_AsyncClientOrganization_Handler,
		},
		{
			MethodName: "GetClientUserInfo",
			Handler:    _ClientApi_GetClientUserInfo_Handler,
		},
		{
			MethodName: "UnbindWCClient",
			Handler:    _ClientApi_UnbindWCClient_Handler,
		},
		{
			MethodName: "WeChatMessage",
			Handler:    _ClientApi_WeChatMessage_Handler,
		},
		{
			MethodName: "WorkMessage",
			Handler:    _ClientApi_WorkMessage_Handler,
		},
		{
			MethodName: "DingTalkMessage",
			Handler:    _ClientApi_DingTalkMessage_Handler,
		},
		{
			MethodName: "LarkMessage",
			Handler:    _ClientApi_LarkMessage_Handler,
		},
		{
			MethodName: "SendIMessage",
			Handler:    _ClientApi_SendIMessage_Handler,
		},
		{
			MethodName: "GetIUserBaseInfo",
			Handler:    _ClientApi_GetIUserBaseInfo_Handler,
		},
		{
			MethodName: "GetInitCode",
			Handler:    _ClientApi_GetInitCode_Handler,
		},
		{
			MethodName: "GetUserOrgByPhone",
			Handler:    _ClientApi_GetUserOrgByPhone_Handler,
		},
		{
			MethodName: "GetVisitorOrgByPhone",
			Handler:    _ClientApi_GetVisitorOrgByPhone_Handler,
		},
		{
			MethodName: "GetOrgByName",
			Handler:    _ClientApi_GetOrgByName_Handler,
		},
		{
			MethodName: "GetClientIds",
			Handler:    _ClientApi_GetClientIds_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}

// DeviceApiClient is the client API for DeviceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceApiClient interface {
	CreateCompany(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DeleteCompany(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	UpdateCompany(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	SearchCompany(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*CompanyList, common.ErrorWithAttachment)
	CreateArea(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DeleteArea(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	UpdateArea(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	SearchArea(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*CompanyList, common.ErrorWithAttachment)
	Prepare(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*CompanyInfo, common.ErrorWithAttachment)
	CreateMec(ctx context.Context, in *MecInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	UpdateMec(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	RemoveMec(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DeleteMec(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	SearchMec(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*MecList, common.ErrorWithAttachment)
	KeepAlive(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	AddDeviceVisitor(ctx context.Context, in *DeviceInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DeviceVisitorLeave(ctx context.Context, in *DeviceInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	AddDeviceTraffic(ctx context.Context, in *TrafficInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	GetDashboardDevicePassagePages(ctx context.Context, in *TrafficInfo, opts ...grpc_go.CallOption) (*TrafficList, common.ErrorWithAttachment)
	GetDevicePassageDetail(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*TrafficInfo, common.ErrorWithAttachment)
	DevicePassage(ctx context.Context, in *PassageInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DevicePassageIssue(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*RecordList, common.ErrorWithAttachment)
	DevicePassageSearch(ctx context.Context, in *DeviceUserInfo, opts ...grpc_go.CallOption) (*RecordList, common.ErrorWithAttachment)
	DevicePassageCallback(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
}

type deviceApiClient struct {
	cc *triple.TripleConn
}

type DeviceApiClientImpl struct {
	CreateCompany                  func(ctx context.Context, in *CompanyInfo) (*Null, error)
	DeleteCompany                  func(ctx context.Context, in *CompanyInfo) (*Null, error)
	UpdateCompany                  func(ctx context.Context, in *CompanyInfo) (*Null, error)
	SearchCompany                  func(ctx context.Context, in *CompanyInfo) (*CompanyList, error)
	CreateArea                     func(ctx context.Context, in *CompanyInfo) (*Null, error)
	DeleteArea                     func(ctx context.Context, in *CompanyInfo) (*Null, error)
	UpdateArea                     func(ctx context.Context, in *CompanyInfo) (*Null, error)
	SearchArea                     func(ctx context.Context, in *CompanyInfo) (*CompanyList, error)
	Prepare                        func(ctx context.Context, in *CompanyInfo) (*CompanyInfo, error)
	CreateMec                      func(ctx context.Context, in *MecInfo) (*Null, error)
	UpdateMec                      func(ctx context.Context, in *CompanyInfo) (*Null, error)
	RemoveMec                      func(ctx context.Context, in *CompanyInfo) (*Null, error)
	DeleteMec                      func(ctx context.Context, in *CompanyInfo) (*Null, error)
	SearchMec                      func(ctx context.Context, in *CompanyInfo) (*MecList, error)
	KeepAlive                      func(ctx context.Context, in *CompanyInfo) (*Null, error)
	AddDeviceVisitor               func(ctx context.Context, in *DeviceInfo) (*Null, error)
	DeviceVisitorLeave             func(ctx context.Context, in *DeviceInfo) (*Null, error)
	AddDeviceTraffic               func(ctx context.Context, in *TrafficInfo) (*Null, error)
	GetDashboardDevicePassagePages func(ctx context.Context, in *TrafficInfo) (*TrafficList, error)
	GetDevicePassageDetail         func(ctx context.Context, in *CompanyInfo) (*TrafficInfo, error)
	DevicePassage                  func(ctx context.Context, in *PassageInfo) (*Null, error)
	DevicePassageIssue             func(ctx context.Context, in *CompanyInfo) (*RecordList, error)
	DevicePassageSearch            func(ctx context.Context, in *DeviceUserInfo) (*RecordList, error)
	DevicePassageCallback          func(ctx context.Context, in *CompanyInfo) (*Null, error)
}

func (c *DeviceApiClientImpl) GetDubboStub(cc *triple.TripleConn) DeviceApiClient {
	return NewDeviceApiClient(cc)
}

func NewDeviceApiClient(cc *triple.TripleConn) DeviceApiClient {
	return &deviceApiClient{cc}
}

func (c *deviceApiClient) CreateCompany(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateCompany", in, out)
}

func (c *deviceApiClient) DeleteCompany(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteCompany", in, out)
}

func (c *deviceApiClient) UpdateCompany(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UpdateCompany", in, out)
}

func (c *deviceApiClient) SearchCompany(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*CompanyList, common.ErrorWithAttachment) {
	out := new(CompanyList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SearchCompany", in, out)
}

func (c *deviceApiClient) CreateArea(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateArea", in, out)
}

func (c *deviceApiClient) DeleteArea(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteArea", in, out)
}

func (c *deviceApiClient) UpdateArea(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UpdateArea", in, out)
}

func (c *deviceApiClient) SearchArea(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*CompanyList, common.ErrorWithAttachment) {
	out := new(CompanyList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SearchArea", in, out)
}

func (c *deviceApiClient) Prepare(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*CompanyInfo, common.ErrorWithAttachment) {
	out := new(CompanyInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Prepare", in, out)
}

func (c *deviceApiClient) CreateMec(ctx context.Context, in *MecInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateMec", in, out)
}

func (c *deviceApiClient) UpdateMec(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UpdateMec", in, out)
}

func (c *deviceApiClient) RemoveMec(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/RemoveMec", in, out)
}

func (c *deviceApiClient) DeleteMec(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteMec", in, out)
}

func (c *deviceApiClient) SearchMec(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*MecList, common.ErrorWithAttachment) {
	out := new(MecList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SearchMec", in, out)
}

func (c *deviceApiClient) KeepAlive(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/KeepAlive", in, out)
}

func (c *deviceApiClient) AddDeviceVisitor(ctx context.Context, in *DeviceInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/AddDeviceVisitor", in, out)
}

func (c *deviceApiClient) DeviceVisitorLeave(ctx context.Context, in *DeviceInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeviceVisitorLeave", in, out)
}

func (c *deviceApiClient) AddDeviceTraffic(ctx context.Context, in *TrafficInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/AddDeviceTraffic", in, out)
}

func (c *deviceApiClient) GetDashboardDevicePassagePages(ctx context.Context, in *TrafficInfo, opts ...grpc_go.CallOption) (*TrafficList, common.ErrorWithAttachment) {
	out := new(TrafficList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetDashboardDevicePassagePages", in, out)
}

func (c *deviceApiClient) GetDevicePassageDetail(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*TrafficInfo, common.ErrorWithAttachment) {
	out := new(TrafficInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetDevicePassageDetail", in, out)
}

func (c *deviceApiClient) DevicePassage(ctx context.Context, in *PassageInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DevicePassage", in, out)
}

func (c *deviceApiClient) DevicePassageIssue(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*RecordList, common.ErrorWithAttachment) {
	out := new(RecordList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DevicePassageIssue", in, out)
}

func (c *deviceApiClient) DevicePassageSearch(ctx context.Context, in *DeviceUserInfo, opts ...grpc_go.CallOption) (*RecordList, common.ErrorWithAttachment) {
	out := new(RecordList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DevicePassageSearch", in, out)
}

func (c *deviceApiClient) DevicePassageCallback(ctx context.Context, in *CompanyInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DevicePassageCallback", in, out)
}

// DeviceApiServer is the server API for DeviceApi service.
// All implementations must embed UnimplementedDeviceApiServer
// for forward compatibility
type DeviceApiServer interface {
	CreateCompany(context.Context, *CompanyInfo) (*Null, error)
	DeleteCompany(context.Context, *CompanyInfo) (*Null, error)
	UpdateCompany(context.Context, *CompanyInfo) (*Null, error)
	SearchCompany(context.Context, *CompanyInfo) (*CompanyList, error)
	CreateArea(context.Context, *CompanyInfo) (*Null, error)
	DeleteArea(context.Context, *CompanyInfo) (*Null, error)
	UpdateArea(context.Context, *CompanyInfo) (*Null, error)
	SearchArea(context.Context, *CompanyInfo) (*CompanyList, error)
	Prepare(context.Context, *CompanyInfo) (*CompanyInfo, error)
	CreateMec(context.Context, *MecInfo) (*Null, error)
	UpdateMec(context.Context, *CompanyInfo) (*Null, error)
	RemoveMec(context.Context, *CompanyInfo) (*Null, error)
	DeleteMec(context.Context, *CompanyInfo) (*Null, error)
	SearchMec(context.Context, *CompanyInfo) (*MecList, error)
	KeepAlive(context.Context, *CompanyInfo) (*Null, error)
	AddDeviceVisitor(context.Context, *DeviceInfo) (*Null, error)
	DeviceVisitorLeave(context.Context, *DeviceInfo) (*Null, error)
	AddDeviceTraffic(context.Context, *TrafficInfo) (*Null, error)
	GetDashboardDevicePassagePages(context.Context, *TrafficInfo) (*TrafficList, error)
	GetDevicePassageDetail(context.Context, *CompanyInfo) (*TrafficInfo, error)
	DevicePassage(context.Context, *PassageInfo) (*Null, error)
	DevicePassageIssue(context.Context, *CompanyInfo) (*RecordList, error)
	DevicePassageSearch(context.Context, *DeviceUserInfo) (*RecordList, error)
	DevicePassageCallback(context.Context, *CompanyInfo) (*Null, error)
	mustEmbedUnimplementedDeviceApiServer()
}

// UnimplementedDeviceApiServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceApiServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedDeviceApiServer) CreateCompany(context.Context, *CompanyInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (UnimplementedDeviceApiServer) DeleteCompany(context.Context, *CompanyInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompany not implemented")
}
func (UnimplementedDeviceApiServer) UpdateCompany(context.Context, *CompanyInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (UnimplementedDeviceApiServer) SearchCompany(context.Context, *CompanyInfo) (*CompanyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCompany not implemented")
}
func (UnimplementedDeviceApiServer) CreateArea(context.Context, *CompanyInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArea not implemented")
}
func (UnimplementedDeviceApiServer) DeleteArea(context.Context, *CompanyInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArea not implemented")
}
func (UnimplementedDeviceApiServer) UpdateArea(context.Context, *CompanyInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArea not implemented")
}
func (UnimplementedDeviceApiServer) SearchArea(context.Context, *CompanyInfo) (*CompanyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArea not implemented")
}
func (UnimplementedDeviceApiServer) Prepare(context.Context, *CompanyInfo) (*CompanyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedDeviceApiServer) CreateMec(context.Context, *MecInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMec not implemented")
}
func (UnimplementedDeviceApiServer) UpdateMec(context.Context, *CompanyInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMec not implemented")
}
func (UnimplementedDeviceApiServer) RemoveMec(context.Context, *CompanyInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMec not implemented")
}
func (UnimplementedDeviceApiServer) DeleteMec(context.Context, *CompanyInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMec not implemented")
}
func (UnimplementedDeviceApiServer) SearchMec(context.Context, *CompanyInfo) (*MecList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMec not implemented")
}
func (UnimplementedDeviceApiServer) KeepAlive(context.Context, *CompanyInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedDeviceApiServer) AddDeviceVisitor(context.Context, *DeviceInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeviceVisitor not implemented")
}
func (UnimplementedDeviceApiServer) DeviceVisitorLeave(context.Context, *DeviceInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceVisitorLeave not implemented")
}
func (UnimplementedDeviceApiServer) AddDeviceTraffic(context.Context, *TrafficInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeviceTraffic not implemented")
}
func (UnimplementedDeviceApiServer) GetDashboardDevicePassagePages(context.Context, *TrafficInfo) (*TrafficList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardDevicePassagePages not implemented")
}
func (UnimplementedDeviceApiServer) GetDevicePassageDetail(context.Context, *CompanyInfo) (*TrafficInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicePassageDetail not implemented")
}
func (UnimplementedDeviceApiServer) DevicePassage(context.Context, *PassageInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevicePassage not implemented")
}
func (UnimplementedDeviceApiServer) DevicePassageIssue(context.Context, *CompanyInfo) (*RecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevicePassageIssue not implemented")
}
func (UnimplementedDeviceApiServer) DevicePassageSearch(context.Context, *DeviceUserInfo) (*RecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevicePassageSearch not implemented")
}
func (UnimplementedDeviceApiServer) DevicePassageCallback(context.Context, *CompanyInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevicePassageCallback not implemented")
}
func (s *UnimplementedDeviceApiServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedDeviceApiServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedDeviceApiServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &DeviceApi_ServiceDesc
}
func (UnimplementedDeviceApiServer) mustEmbedUnimplementedDeviceApiServer() {}

// UnsafeDeviceApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceApiServer will
// result in compilation errors.
type UnsafeDeviceApiServer interface {
	mustEmbedUnimplementedDeviceApiServer()
}

func RegisterDeviceApiServer(s grpc_go.ServiceRegistrar, srv DeviceApiServer) {
	s.RegisterService(&DeviceApi_ServiceDesc, srv)
}

func _DeviceApi_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateCompany", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/CreateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).CreateCompany(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_DeleteCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteCompany", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/DeleteCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).DeleteCompany(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UpdateCompany", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).UpdateCompany(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_SearchCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SearchCompany", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/SearchCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).SearchCompany(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_CreateArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateArea", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/CreateArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).CreateArea(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_DeleteArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteArea", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/DeleteArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).DeleteArea(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_UpdateArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UpdateArea", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/UpdateArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).UpdateArea(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_SearchArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SearchArea", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/SearchArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).SearchArea(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Prepare", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).Prepare(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_CreateMec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(MecInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateMec", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/CreateMec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).CreateMec(ctx, req.(*MecInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_UpdateMec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UpdateMec", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/UpdateMec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).UpdateMec(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_RemoveMec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("RemoveMec", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/RemoveMec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).RemoveMec(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_DeleteMec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteMec", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/DeleteMec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).DeleteMec(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_SearchMec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SearchMec", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/SearchMec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).SearchMec(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("KeepAlive", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).KeepAlive(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_AddDeviceVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("AddDeviceVisitor", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/AddDeviceVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).AddDeviceVisitor(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_DeviceVisitorLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeviceVisitorLeave", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/DeviceVisitorLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).DeviceVisitorLeave(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_AddDeviceTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("AddDeviceTraffic", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/AddDeviceTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).AddDeviceTraffic(ctx, req.(*TrafficInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_GetDashboardDevicePassagePages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetDashboardDevicePassagePages", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/GetDashboardDevicePassagePages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).GetDashboardDevicePassagePages(ctx, req.(*TrafficInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_GetDevicePassageDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetDevicePassageDetail", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/GetDevicePassageDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).GetDevicePassageDetail(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_DevicePassage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DevicePassage", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/DevicePassage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).DevicePassage(ctx, req.(*PassageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_DevicePassageIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DevicePassageIssue", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/DevicePassageIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).DevicePassageIssue(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_DevicePassageSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DevicePassageSearch", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/DevicePassageSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).DevicePassageSearch(ctx, req.(*DeviceUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceApi_DevicePassageCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DevicePassageCallback", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeviceApi/DevicePassageCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceApiServer).DevicePassageCallback(ctx, req.(*CompanyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceApi_ServiceDesc is the grpc_go.ServiceDesc for DeviceApi service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceApi_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "main.DeviceApi",
	HandlerType: (*DeviceApiServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _DeviceApi_CreateCompany_Handler,
		},
		{
			MethodName: "DeleteCompany",
			Handler:    _DeviceApi_DeleteCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _DeviceApi_UpdateCompany_Handler,
		},
		{
			MethodName: "SearchCompany",
			Handler:    _DeviceApi_SearchCompany_Handler,
		},
		{
			MethodName: "CreateArea",
			Handler:    _DeviceApi_CreateArea_Handler,
		},
		{
			MethodName: "DeleteArea",
			Handler:    _DeviceApi_DeleteArea_Handler,
		},
		{
			MethodName: "UpdateArea",
			Handler:    _DeviceApi_UpdateArea_Handler,
		},
		{
			MethodName: "SearchArea",
			Handler:    _DeviceApi_SearchArea_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _DeviceApi_Prepare_Handler,
		},
		{
			MethodName: "CreateMec",
			Handler:    _DeviceApi_CreateMec_Handler,
		},
		{
			MethodName: "UpdateMec",
			Handler:    _DeviceApi_UpdateMec_Handler,
		},
		{
			MethodName: "RemoveMec",
			Handler:    _DeviceApi_RemoveMec_Handler,
		},
		{
			MethodName: "DeleteMec",
			Handler:    _DeviceApi_DeleteMec_Handler,
		},
		{
			MethodName: "SearchMec",
			Handler:    _DeviceApi_SearchMec_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _DeviceApi_KeepAlive_Handler,
		},
		{
			MethodName: "AddDeviceVisitor",
			Handler:    _DeviceApi_AddDeviceVisitor_Handler,
		},
		{
			MethodName: "DeviceVisitorLeave",
			Handler:    _DeviceApi_DeviceVisitorLeave_Handler,
		},
		{
			MethodName: "AddDeviceTraffic",
			Handler:    _DeviceApi_AddDeviceTraffic_Handler,
		},
		{
			MethodName: "GetDashboardDevicePassagePages",
			Handler:    _DeviceApi_GetDashboardDevicePassagePages_Handler,
		},
		{
			MethodName: "GetDevicePassageDetail",
			Handler:    _DeviceApi_GetDevicePassageDetail_Handler,
		},
		{
			MethodName: "DevicePassage",
			Handler:    _DeviceApi_DevicePassage_Handler,
		},
		{
			MethodName: "DevicePassageIssue",
			Handler:    _DeviceApi_DevicePassageIssue_Handler,
		},
		{
			MethodName: "DevicePassageSearch",
			Handler:    _DeviceApi_DevicePassageSearch_Handler,
		},
		{
			MethodName: "DevicePassageCallback",
			Handler:    _DeviceApi_DevicePassageCallback_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}

// HelperApiClient is the client API for HelperApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelperApiClient interface {
	CreateOneHelp(ctx context.Context, in *Faq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	UpdateOneHelp(ctx context.Context, in *Faq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DeleteOneHelp(ctx context.Context, in *Faq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	GetHelpCenterList(ctx context.Context, in *Faqs, opts ...grpc_go.CallOption) (*Faqs, common.ErrorWithAttachment)
}

type helperApiClient struct {
	cc *triple.TripleConn
}

type HelperApiClientImpl struct {
	CreateOneHelp     func(ctx context.Context, in *Faq) (*Null, error)
	UpdateOneHelp     func(ctx context.Context, in *Faq) (*Null, error)
	DeleteOneHelp     func(ctx context.Context, in *Faq) (*Null, error)
	GetHelpCenterList func(ctx context.Context, in *Faqs) (*Faqs, error)
}

func (c *HelperApiClientImpl) GetDubboStub(cc *triple.TripleConn) HelperApiClient {
	return NewHelperApiClient(cc)
}

func NewHelperApiClient(cc *triple.TripleConn) HelperApiClient {
	return &helperApiClient{cc}
}

func (c *helperApiClient) CreateOneHelp(ctx context.Context, in *Faq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateOneHelp", in, out)
}

func (c *helperApiClient) UpdateOneHelp(ctx context.Context, in *Faq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UpdateOneHelp", in, out)
}

func (c *helperApiClient) DeleteOneHelp(ctx context.Context, in *Faq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteOneHelp", in, out)
}

func (c *helperApiClient) GetHelpCenterList(ctx context.Context, in *Faqs, opts ...grpc_go.CallOption) (*Faqs, common.ErrorWithAttachment) {
	out := new(Faqs)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetHelpCenterList", in, out)
}

// HelperApiServer is the server API for HelperApi service.
// All implementations must embed UnimplementedHelperApiServer
// for forward compatibility
type HelperApiServer interface {
	CreateOneHelp(context.Context, *Faq) (*Null, error)
	UpdateOneHelp(context.Context, *Faq) (*Null, error)
	DeleteOneHelp(context.Context, *Faq) (*Null, error)
	GetHelpCenterList(context.Context, *Faqs) (*Faqs, error)
	mustEmbedUnimplementedHelperApiServer()
}

// UnimplementedHelperApiServer must be embedded to have forward compatible implementations.
type UnimplementedHelperApiServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedHelperApiServer) CreateOneHelp(context.Context, *Faq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneHelp not implemented")
}
func (UnimplementedHelperApiServer) UpdateOneHelp(context.Context, *Faq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneHelp not implemented")
}
func (UnimplementedHelperApiServer) DeleteOneHelp(context.Context, *Faq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneHelp not implemented")
}
func (UnimplementedHelperApiServer) GetHelpCenterList(context.Context, *Faqs) (*Faqs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelpCenterList not implemented")
}
func (s *UnimplementedHelperApiServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedHelperApiServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedHelperApiServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &HelperApi_ServiceDesc
}
func (UnimplementedHelperApiServer) mustEmbedUnimplementedHelperApiServer() {}

// UnsafeHelperApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelperApiServer will
// result in compilation errors.
type UnsafeHelperApiServer interface {
	mustEmbedUnimplementedHelperApiServer()
}

func RegisterHelperApiServer(s grpc_go.ServiceRegistrar, srv HelperApiServer) {
	s.RegisterService(&HelperApi_ServiceDesc, srv)
}

func _HelperApi_CreateOneHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Faq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateOneHelp", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.HelperApi/CreateOneHelp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperApiServer).CreateOneHelp(ctx, req.(*Faq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperApi_UpdateOneHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Faq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UpdateOneHelp", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.HelperApi/UpdateOneHelp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperApiServer).UpdateOneHelp(ctx, req.(*Faq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperApi_DeleteOneHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Faq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteOneHelp", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.HelperApi/DeleteOneHelp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperApiServer).DeleteOneHelp(ctx, req.(*Faq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperApi_GetHelpCenterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Faqs)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetHelpCenterList", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.HelperApi/GetHelpCenterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperApiServer).GetHelpCenterList(ctx, req.(*Faqs))
	}
	return interceptor(ctx, in, info, handler)
}

// HelperApi_ServiceDesc is the grpc_go.ServiceDesc for HelperApi service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelperApi_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "main.HelperApi",
	HandlerType: (*HelperApiServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "CreateOneHelp",
			Handler:    _HelperApi_CreateOneHelp_Handler,
		},
		{
			MethodName: "UpdateOneHelp",
			Handler:    _HelperApi_UpdateOneHelp_Handler,
		},
		{
			MethodName: "DeleteOneHelp",
			Handler:    _HelperApi_DeleteOneHelp_Handler,
		},
		{
			MethodName: "GetHelpCenterList",
			Handler:    _HelperApi_GetHelpCenterList_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}

// ManagerApiClient is the client API for ManagerApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerApiClient interface {
	RegisterManager(ctx context.Context, in *RegisterManagerReq, opts ...grpc_go.CallOption) (*RegisterManagerRes, common.ErrorWithAttachment)
	ChangeName(ctx context.Context, in *ChangeNameReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ChangeTFA(ctx context.Context, in *ChangeTFAReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ChangePhone(ctx context.Context, in *ChangePhoneReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ChangeAccountAndPassword(ctx context.Context, in *ChangeAccountAndPasswordReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ChangePasswordByPhone(ctx context.Context, in *ChangePasswordByPhoneReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	LoginByPhone(ctx context.Context, in *LoginByPhoneReq, opts ...grpc_go.CallOption) (*LoginByPhoneRes, common.ErrorWithAttachment)
	GetLoginManager(ctx context.Context, in *GetLoginManagerReq, opts ...grpc_go.CallOption) (*GetLoginManagerRes, common.ErrorWithAttachment)
	DeleteAccount(ctx context.Context, in *DeleteAccountReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	CreateTeam(ctx context.Context, in *CreateTeamReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
}

type managerApiClient struct {
	cc *triple.TripleConn
}

type ManagerApiClientImpl struct {
	RegisterManager          func(ctx context.Context, in *RegisterManagerReq) (*RegisterManagerRes, error)
	ChangeName               func(ctx context.Context, in *ChangeNameReq) (*Null, error)
	ChangeTFA                func(ctx context.Context, in *ChangeTFAReq) (*Null, error)
	ChangePhone              func(ctx context.Context, in *ChangePhoneReq) (*Null, error)
	ChangePassword           func(ctx context.Context, in *ChangePasswordReq) (*Null, error)
	ChangeAccountAndPassword func(ctx context.Context, in *ChangeAccountAndPasswordReq) (*Null, error)
	ChangePasswordByPhone    func(ctx context.Context, in *ChangePasswordByPhoneReq) (*Null, error)
	LoginByPhone             func(ctx context.Context, in *LoginByPhoneReq) (*LoginByPhoneRes, error)
	GetLoginManager          func(ctx context.Context, in *GetLoginManagerReq) (*GetLoginManagerRes, error)
	DeleteAccount            func(ctx context.Context, in *DeleteAccountReq) (*Null, error)
	CreateTeam               func(ctx context.Context, in *CreateTeamReq) (*Null, error)
}

func (c *ManagerApiClientImpl) GetDubboStub(cc *triple.TripleConn) ManagerApiClient {
	return NewManagerApiClient(cc)
}

func NewManagerApiClient(cc *triple.TripleConn) ManagerApiClient {
	return &managerApiClient{cc}
}

func (c *managerApiClient) RegisterManager(ctx context.Context, in *RegisterManagerReq, opts ...grpc_go.CallOption) (*RegisterManagerRes, common.ErrorWithAttachment) {
	out := new(RegisterManagerRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/RegisterManager", in, out)
}

func (c *managerApiClient) ChangeName(ctx context.Context, in *ChangeNameReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChangeName", in, out)
}

func (c *managerApiClient) ChangeTFA(ctx context.Context, in *ChangeTFAReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChangeTFA", in, out)
}

func (c *managerApiClient) ChangePhone(ctx context.Context, in *ChangePhoneReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChangePhone", in, out)
}

func (c *managerApiClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChangePassword", in, out)
}

func (c *managerApiClient) ChangeAccountAndPassword(ctx context.Context, in *ChangeAccountAndPasswordReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChangeAccountAndPassword", in, out)
}

func (c *managerApiClient) ChangePasswordByPhone(ctx context.Context, in *ChangePasswordByPhoneReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChangePasswordByPhone", in, out)
}

func (c *managerApiClient) LoginByPhone(ctx context.Context, in *LoginByPhoneReq, opts ...grpc_go.CallOption) (*LoginByPhoneRes, common.ErrorWithAttachment) {
	out := new(LoginByPhoneRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/LoginByPhone", in, out)
}

func (c *managerApiClient) GetLoginManager(ctx context.Context, in *GetLoginManagerReq, opts ...grpc_go.CallOption) (*GetLoginManagerRes, common.ErrorWithAttachment) {
	out := new(GetLoginManagerRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetLoginManager", in, out)
}

func (c *managerApiClient) DeleteAccount(ctx context.Context, in *DeleteAccountReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteAccount", in, out)
}

func (c *managerApiClient) CreateTeam(ctx context.Context, in *CreateTeamReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateTeam", in, out)
}

// ManagerApiServer is the server API for ManagerApi service.
// All implementations must embed UnimplementedManagerApiServer
// for forward compatibility
type ManagerApiServer interface {
	RegisterManager(context.Context, *RegisterManagerReq) (*RegisterManagerRes, error)
	ChangeName(context.Context, *ChangeNameReq) (*Null, error)
	ChangeTFA(context.Context, *ChangeTFAReq) (*Null, error)
	ChangePhone(context.Context, *ChangePhoneReq) (*Null, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*Null, error)
	ChangeAccountAndPassword(context.Context, *ChangeAccountAndPasswordReq) (*Null, error)
	ChangePasswordByPhone(context.Context, *ChangePasswordByPhoneReq) (*Null, error)
	LoginByPhone(context.Context, *LoginByPhoneReq) (*LoginByPhoneRes, error)
	GetLoginManager(context.Context, *GetLoginManagerReq) (*GetLoginManagerRes, error)
	DeleteAccount(context.Context, *DeleteAccountReq) (*Null, error)
	CreateTeam(context.Context, *CreateTeamReq) (*Null, error)
	mustEmbedUnimplementedManagerApiServer()
}

// UnimplementedManagerApiServer must be embedded to have forward compatible implementations.
type UnimplementedManagerApiServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedManagerApiServer) RegisterManager(context.Context, *RegisterManagerReq) (*RegisterManagerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterManager not implemented")
}
func (UnimplementedManagerApiServer) ChangeName(context.Context, *ChangeNameReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeName not implemented")
}
func (UnimplementedManagerApiServer) ChangeTFA(context.Context, *ChangeTFAReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTFA not implemented")
}
func (UnimplementedManagerApiServer) ChangePhone(context.Context, *ChangePhoneReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePhone not implemented")
}
func (UnimplementedManagerApiServer) ChangePassword(context.Context, *ChangePasswordReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedManagerApiServer) ChangeAccountAndPassword(context.Context, *ChangeAccountAndPasswordReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccountAndPassword not implemented")
}
func (UnimplementedManagerApiServer) ChangePasswordByPhone(context.Context, *ChangePasswordByPhoneReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePasswordByPhone not implemented")
}
func (UnimplementedManagerApiServer) LoginByPhone(context.Context, *LoginByPhoneReq) (*LoginByPhoneRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByPhone not implemented")
}
func (UnimplementedManagerApiServer) GetLoginManager(context.Context, *GetLoginManagerReq) (*GetLoginManagerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginManager not implemented")
}
func (UnimplementedManagerApiServer) DeleteAccount(context.Context, *DeleteAccountReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedManagerApiServer) CreateTeam(context.Context, *CreateTeamReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (s *UnimplementedManagerApiServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedManagerApiServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedManagerApiServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &ManagerApi_ServiceDesc
}
func (UnimplementedManagerApiServer) mustEmbedUnimplementedManagerApiServer() {}

// UnsafeManagerApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerApiServer will
// result in compilation errors.
type UnsafeManagerApiServer interface {
	mustEmbedUnimplementedManagerApiServer()
}

func RegisterManagerApiServer(s grpc_go.ServiceRegistrar, srv ManagerApiServer) {
	s.RegisterService(&ManagerApi_ServiceDesc, srv)
}

func _ManagerApi_RegisterManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterManagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("RegisterManager", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ManagerApi/RegisterManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerApiServer).RegisterManager(ctx, req.(*RegisterManagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerApi_ChangeName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChangeName", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ManagerApi/ChangeName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerApiServer).ChangeName(ctx, req.(*ChangeNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerApi_ChangeTFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTFAReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChangeTFA", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ManagerApi/ChangeTFA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerApiServer).ChangeTFA(ctx, req.(*ChangeTFAReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerApi_ChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChangePhone", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ManagerApi/ChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerApiServer).ChangePhone(ctx, req.(*ChangePhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerApi_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChangePassword", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ManagerApi/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerApiServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerApi_ChangeAccountAndPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAccountAndPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChangeAccountAndPassword", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ManagerApi/ChangeAccountAndPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerApiServer).ChangeAccountAndPassword(ctx, req.(*ChangeAccountAndPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerApi_ChangePasswordByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChangePasswordByPhone", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ManagerApi/ChangePasswordByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerApiServer).ChangePasswordByPhone(ctx, req.(*ChangePasswordByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerApi_LoginByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("LoginByPhone", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ManagerApi/LoginByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerApiServer).LoginByPhone(ctx, req.(*LoginByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerApi_GetLoginManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginManagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetLoginManager", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ManagerApi/GetLoginManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerApiServer).GetLoginManager(ctx, req.(*GetLoginManagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerApi_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteAccount", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ManagerApi/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerApiServer).DeleteAccount(ctx, req.(*DeleteAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerApi_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateTeam", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ManagerApi/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerApiServer).CreateTeam(ctx, req.(*CreateTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerApi_ServiceDesc is the grpc_go.ServiceDesc for ManagerApi service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerApi_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "main.ManagerApi",
	HandlerType: (*ManagerApiServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "RegisterManager",
			Handler:    _ManagerApi_RegisterManager_Handler,
		},
		{
			MethodName: "ChangeName",
			Handler:    _ManagerApi_ChangeName_Handler,
		},
		{
			MethodName: "ChangeTFA",
			Handler:    _ManagerApi_ChangeTFA_Handler,
		},
		{
			MethodName: "ChangePhone",
			Handler:    _ManagerApi_ChangePhone_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _ManagerApi_ChangePassword_Handler,
		},
		{
			MethodName: "ChangeAccountAndPassword",
			Handler:    _ManagerApi_ChangeAccountAndPassword_Handler,
		},
		{
			MethodName: "ChangePasswordByPhone",
			Handler:    _ManagerApi_ChangePasswordByPhone_Handler,
		},
		{
			MethodName: "LoginByPhone",
			Handler:    _ManagerApi_LoginByPhone_Handler,
		},
		{
			MethodName: "GetLoginManager",
			Handler:    _ManagerApi_GetLoginManager_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _ManagerApi_DeleteAccount_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _ManagerApi_CreateTeam_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}

// MessageApiClient is the client API for MessageApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageApiClient interface {
	GenerateAndroidMsg(ctx context.Context, in *AndroidMsg, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	GenerateCheckCode(ctx context.Context, in *CheckCode, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	VerifyCheckCode(ctx context.Context, in *CheckCode, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	TotalMessage(ctx context.Context, in *TotalMsg, opts ...grpc_go.CallOption) (*TotalMsg, common.ErrorWithAttachment)
}

type messageApiClient struct {
	cc *triple.TripleConn
}

type MessageApiClientImpl struct {
	GenerateAndroidMsg func(ctx context.Context, in *AndroidMsg) (*Null, error)
	GenerateCheckCode  func(ctx context.Context, in *CheckCode) (*Null, error)
	VerifyCheckCode    func(ctx context.Context, in *CheckCode) (*Null, error)
	TotalMessage       func(ctx context.Context, in *TotalMsg) (*TotalMsg, error)
}

func (c *MessageApiClientImpl) GetDubboStub(cc *triple.TripleConn) MessageApiClient {
	return NewMessageApiClient(cc)
}

func NewMessageApiClient(cc *triple.TripleConn) MessageApiClient {
	return &messageApiClient{cc}
}

func (c *messageApiClient) GenerateAndroidMsg(ctx context.Context, in *AndroidMsg, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GenerateAndroidMsg", in, out)
}

func (c *messageApiClient) GenerateCheckCode(ctx context.Context, in *CheckCode, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GenerateCheckCode", in, out)
}

func (c *messageApiClient) VerifyCheckCode(ctx context.Context, in *CheckCode, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/VerifyCheckCode", in, out)
}

func (c *messageApiClient) TotalMessage(ctx context.Context, in *TotalMsg, opts ...grpc_go.CallOption) (*TotalMsg, common.ErrorWithAttachment) {
	out := new(TotalMsg)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/TotalMessage", in, out)
}

// MessageApiServer is the server API for MessageApi service.
// All implementations must embed UnimplementedMessageApiServer
// for forward compatibility
type MessageApiServer interface {
	GenerateAndroidMsg(context.Context, *AndroidMsg) (*Null, error)
	GenerateCheckCode(context.Context, *CheckCode) (*Null, error)
	VerifyCheckCode(context.Context, *CheckCode) (*Null, error)
	TotalMessage(context.Context, *TotalMsg) (*TotalMsg, error)
	mustEmbedUnimplementedMessageApiServer()
}

// UnimplementedMessageApiServer must be embedded to have forward compatible implementations.
type UnimplementedMessageApiServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedMessageApiServer) GenerateAndroidMsg(context.Context, *AndroidMsg) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAndroidMsg not implemented")
}
func (UnimplementedMessageApiServer) GenerateCheckCode(context.Context, *CheckCode) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCheckCode not implemented")
}
func (UnimplementedMessageApiServer) VerifyCheckCode(context.Context, *CheckCode) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCheckCode not implemented")
}
func (UnimplementedMessageApiServer) TotalMessage(context.Context, *TotalMsg) (*TotalMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalMessage not implemented")
}
func (s *UnimplementedMessageApiServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedMessageApiServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedMessageApiServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &MessageApi_ServiceDesc
}
func (UnimplementedMessageApiServer) mustEmbedUnimplementedMessageApiServer() {}

// UnsafeMessageApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageApiServer will
// result in compilation errors.
type UnsafeMessageApiServer interface {
	mustEmbedUnimplementedMessageApiServer()
}

func RegisterMessageApiServer(s grpc_go.ServiceRegistrar, srv MessageApiServer) {
	s.RegisterService(&MessageApi_ServiceDesc, srv)
}

func _MessageApi_GenerateAndroidMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(AndroidMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GenerateAndroidMsg", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MessageApi/GenerateAndroidMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageApiServer).GenerateAndroidMsg(ctx, req.(*AndroidMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageApi_GenerateCheckCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GenerateCheckCode", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MessageApi/GenerateCheckCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageApiServer).GenerateCheckCode(ctx, req.(*CheckCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageApi_VerifyCheckCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("VerifyCheckCode", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MessageApi/VerifyCheckCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageApiServer).VerifyCheckCode(ctx, req.(*CheckCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageApi_TotalMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("TotalMessage", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MessageApi/TotalMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageApiServer).TotalMessage(ctx, req.(*TotalMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageApi_ServiceDesc is the grpc_go.ServiceDesc for MessageApi service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageApi_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "main.MessageApi",
	HandlerType: (*MessageApiServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "GenerateAndroidMsg",
			Handler:    _MessageApi_GenerateAndroidMsg_Handler,
		},
		{
			MethodName: "GenerateCheckCode",
			Handler:    _MessageApi_GenerateCheckCode_Handler,
		},
		{
			MethodName: "VerifyCheckCode",
			Handler:    _MessageApi_VerifyCheckCode_Handler,
		},
		{
			MethodName: "TotalMessage",
			Handler:    _MessageApi_TotalMessage_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}

// OrganizationApiClient is the client API for OrganizationApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationApiClient interface {
	OneUser(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	GetVisitorTicketInfo(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	OneTenantUser(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	DeleteUser(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	UserBase(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	UserBaseContainsIdCard(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	UnitUserBase(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	UnitMemberIds(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	UserIds(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	LeaderUuid(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	EmpIndistinct(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	EmpByNameAndPhoneIndistinct(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	EmpByNameAndPhoneAndDepName(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	UnitUser(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*AllUserMap, common.ErrorWithAttachment)
	VisitorsUser(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*AllUserMap, common.ErrorWithAttachment)
	UserByNameAndPhoneIndistinct(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	GetUserByNameAndPhoneIndistinct(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	UserUuidByPhone(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	UserMark(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	UserModify(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	UserFaceRedirect(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	OneUserTenant(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	RootUnit(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ChildUnit(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	RootUnitModify(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ChildUnitModify(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DeleteUnit(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	UnitRootTree(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment)
	UnitTreeByParUuid(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment)
	UnitRootTreeJson(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment)
	ParentUnitTree(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment)
	IsLeader(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	ChildUnitPagesList(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*ChildUnitMap, common.ErrorWithAttachment)
	RootUnitPagesList(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*ChildUnitMap, common.ErrorWithAttachment)
	UnitMemberByUnitUuid(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	UnitByUserUuid(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	SameUnitMemberList(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	UnitMemberModify(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DeleteUnitMember(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ExcelFileImport(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	ImportVisitors(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	AddOneVisitor(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	GetImportOrgResult(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment)
	GetImportVisitorOrgResult(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment)
	BaseInfoByBindPhone(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	ClientIds(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	WeChatUnBind(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	UserTenantByUserUuid(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	IsBlacklist(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment)
	UpdateIsBlacklist(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
}

type organizationApiClient struct {
	cc *triple.TripleConn
}

type OrganizationApiClientImpl struct {
	OneUser                         func(ctx context.Context, in *OrgReq) (*Null, error)
	GetVisitorTicketInfo            func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	OneTenantUser                   func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	DeleteUser                      func(ctx context.Context, in *OrgReq) (*Null, error)
	UserBase                        func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	UserBaseContainsIdCard          func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	UnitUserBase                    func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	UnitMemberIds                   func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	UserIds                         func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	LeaderUuid                      func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	EmpIndistinct                   func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	EmpByNameAndPhoneIndistinct     func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	EmpByNameAndPhoneAndDepName     func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	UnitUser                        func(ctx context.Context, in *OrgReq) (*AllUserMap, error)
	VisitorsUser                    func(ctx context.Context, in *OrgReq) (*AllUserMap, error)
	UserByNameAndPhoneIndistinct    func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	GetUserByNameAndPhoneIndistinct func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	UserUuidByPhone                 func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	UserMark                        func(ctx context.Context, in *OrgReq) (*Null, error)
	UserModify                      func(ctx context.Context, in *OrgReq) (*Null, error)
	UserFaceRedirect                func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	OneUserTenant                   func(ctx context.Context, in *OrgReq) (*Null, error)
	RootUnit                        func(ctx context.Context, in *OrgReq) (*Null, error)
	ChildUnit                       func(ctx context.Context, in *OrgReq) (*Null, error)
	RootUnitModify                  func(ctx context.Context, in *OrgReq) (*Null, error)
	ChildUnitModify                 func(ctx context.Context, in *OrgReq) (*Null, error)
	DeleteUnit                      func(ctx context.Context, in *OrgReq) (*Null, error)
	UnitRootTree                    func(ctx context.Context, in *OrgReq) (*Any, error)
	UnitTreeByParUuid               func(ctx context.Context, in *OrgReq) (*Any, error)
	UnitRootTreeJson                func(ctx context.Context, in *OrgReq) (*Any, error)
	ParentUnitTree                  func(ctx context.Context, in *OrgReq) (*Any, error)
	IsLeader                        func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	ChildUnitPagesList              func(ctx context.Context, in *OrgReq) (*ChildUnitMap, error)
	RootUnitPagesList               func(ctx context.Context, in *OrgReq) (*ChildUnitMap, error)
	UnitMemberByUnitUuid            func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	UnitByUserUuid                  func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	SameUnitMemberList              func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	UnitMemberModify                func(ctx context.Context, in *OrgReq) (*Null, error)
	DeleteUnitMember                func(ctx context.Context, in *OrgReq) (*Null, error)
	ExcelFileImport                 func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	ImportVisitors                  func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	AddOneVisitor                   func(ctx context.Context, in *OrgReq) (*Null, error)
	GetImportOrgResult              func(ctx context.Context, in *OrgReq) (*Any, error)
	GetImportVisitorOrgResult       func(ctx context.Context, in *OrgReq) (*Any, error)
	BaseInfoByBindPhone             func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	ClientIds                       func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	WeChatUnBind                    func(ctx context.Context, in *OrgReq) (*Null, error)
	UserTenantByUserUuid            func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	IsBlacklist                     func(ctx context.Context, in *OrgReq) (*OrgRes, error)
	UpdateIsBlacklist               func(ctx context.Context, in *OrgReq) (*Null, error)
}

func (c *OrganizationApiClientImpl) GetDubboStub(cc *triple.TripleConn) OrganizationApiClient {
	return NewOrganizationApiClient(cc)
}

func NewOrganizationApiClient(cc *triple.TripleConn) OrganizationApiClient {
	return &organizationApiClient{cc}
}

func (c *organizationApiClient) OneUser(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/OneUser", in, out)
}

func (c *organizationApiClient) GetVisitorTicketInfo(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetVisitorTicketInfo", in, out)
}

func (c *organizationApiClient) OneTenantUser(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/OneTenantUser", in, out)
}

func (c *organizationApiClient) DeleteUser(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteUser", in, out)
}

func (c *organizationApiClient) UserBase(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UserBase", in, out)
}

func (c *organizationApiClient) UserBaseContainsIdCard(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UserBaseContainsIdCard", in, out)
}

func (c *organizationApiClient) UnitUserBase(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UnitUserBase", in, out)
}

func (c *organizationApiClient) UnitMemberIds(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UnitMemberIds", in, out)
}

func (c *organizationApiClient) UserIds(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UserIds", in, out)
}

func (c *organizationApiClient) LeaderUuid(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/LeaderUuid", in, out)
}

func (c *organizationApiClient) EmpIndistinct(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/EmpIndistinct", in, out)
}

func (c *organizationApiClient) EmpByNameAndPhoneIndistinct(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/EmpByNameAndPhoneIndistinct", in, out)
}

func (c *organizationApiClient) EmpByNameAndPhoneAndDepName(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/EmpByNameAndPhoneAndDepName", in, out)
}

func (c *organizationApiClient) UnitUser(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*AllUserMap, common.ErrorWithAttachment) {
	out := new(AllUserMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UnitUser", in, out)
}

func (c *organizationApiClient) VisitorsUser(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*AllUserMap, common.ErrorWithAttachment) {
	out := new(AllUserMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/VisitorsUser", in, out)
}

func (c *organizationApiClient) UserByNameAndPhoneIndistinct(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UserByNameAndPhoneIndistinct", in, out)
}

func (c *organizationApiClient) GetUserByNameAndPhoneIndistinct(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetUserByNameAndPhoneIndistinct", in, out)
}

func (c *organizationApiClient) UserUuidByPhone(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UserUuidByPhone", in, out)
}

func (c *organizationApiClient) UserMark(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UserMark", in, out)
}

func (c *organizationApiClient) UserModify(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UserModify", in, out)
}

func (c *organizationApiClient) UserFaceRedirect(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UserFaceRedirect", in, out)
}

func (c *organizationApiClient) OneUserTenant(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/OneUserTenant", in, out)
}

func (c *organizationApiClient) RootUnit(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/RootUnit", in, out)
}

func (c *organizationApiClient) ChildUnit(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChildUnit", in, out)
}

func (c *organizationApiClient) RootUnitModify(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/RootUnitModify", in, out)
}

func (c *organizationApiClient) ChildUnitModify(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChildUnitModify", in, out)
}

func (c *organizationApiClient) DeleteUnit(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteUnit", in, out)
}

func (c *organizationApiClient) UnitRootTree(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment) {
	out := new(Any)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UnitRootTree", in, out)
}

func (c *organizationApiClient) UnitTreeByParUuid(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment) {
	out := new(Any)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UnitTreeByParUuid", in, out)
}

func (c *organizationApiClient) UnitRootTreeJson(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment) {
	out := new(Any)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UnitRootTreeJson", in, out)
}

func (c *organizationApiClient) ParentUnitTree(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment) {
	out := new(Any)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ParentUnitTree", in, out)
}

func (c *organizationApiClient) IsLeader(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/IsLeader", in, out)
}

func (c *organizationApiClient) ChildUnitPagesList(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*ChildUnitMap, common.ErrorWithAttachment) {
	out := new(ChildUnitMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChildUnitPagesList", in, out)
}

func (c *organizationApiClient) RootUnitPagesList(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*ChildUnitMap, common.ErrorWithAttachment) {
	out := new(ChildUnitMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/RootUnitPagesList", in, out)
}

func (c *organizationApiClient) UnitMemberByUnitUuid(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UnitMemberByUnitUuid", in, out)
}

func (c *organizationApiClient) UnitByUserUuid(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UnitByUserUuid", in, out)
}

func (c *organizationApiClient) SameUnitMemberList(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SameUnitMemberList", in, out)
}

func (c *organizationApiClient) UnitMemberModify(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UnitMemberModify", in, out)
}

func (c *organizationApiClient) DeleteUnitMember(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteUnitMember", in, out)
}

func (c *organizationApiClient) ExcelFileImport(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ExcelFileImport", in, out)
}

func (c *organizationApiClient) ImportVisitors(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ImportVisitors", in, out)
}

func (c *organizationApiClient) AddOneVisitor(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/AddOneVisitor", in, out)
}

func (c *organizationApiClient) GetImportOrgResult(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment) {
	out := new(Any)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetImportOrgResult", in, out)
}

func (c *organizationApiClient) GetImportVisitorOrgResult(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Any, common.ErrorWithAttachment) {
	out := new(Any)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetImportVisitorOrgResult", in, out)
}

func (c *organizationApiClient) BaseInfoByBindPhone(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/BaseInfoByBindPhone", in, out)
}

func (c *organizationApiClient) ClientIds(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ClientIds", in, out)
}

func (c *organizationApiClient) WeChatUnBind(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/WeChatUnBind", in, out)
}

func (c *organizationApiClient) UserTenantByUserUuid(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UserTenantByUserUuid", in, out)
}

func (c *organizationApiClient) IsBlacklist(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*OrgRes, common.ErrorWithAttachment) {
	out := new(OrgRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/IsBlacklist", in, out)
}

func (c *organizationApiClient) UpdateIsBlacklist(ctx context.Context, in *OrgReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UpdateIsBlacklist", in, out)
}

// OrganizationApiServer is the server API for OrganizationApi service.
// All implementations must embed UnimplementedOrganizationApiServer
// for forward compatibility
type OrganizationApiServer interface {
	OneUser(context.Context, *OrgReq) (*Null, error)
	GetVisitorTicketInfo(context.Context, *OrgReq) (*OrgRes, error)
	OneTenantUser(context.Context, *OrgReq) (*OrgRes, error)
	DeleteUser(context.Context, *OrgReq) (*Null, error)
	UserBase(context.Context, *OrgReq) (*OrgRes, error)
	UserBaseContainsIdCard(context.Context, *OrgReq) (*OrgRes, error)
	UnitUserBase(context.Context, *OrgReq) (*OrgRes, error)
	UnitMemberIds(context.Context, *OrgReq) (*OrgRes, error)
	UserIds(context.Context, *OrgReq) (*OrgRes, error)
	LeaderUuid(context.Context, *OrgReq) (*OrgRes, error)
	EmpIndistinct(context.Context, *OrgReq) (*OrgRes, error)
	EmpByNameAndPhoneIndistinct(context.Context, *OrgReq) (*OrgRes, error)
	EmpByNameAndPhoneAndDepName(context.Context, *OrgReq) (*OrgRes, error)
	UnitUser(context.Context, *OrgReq) (*AllUserMap, error)
	VisitorsUser(context.Context, *OrgReq) (*AllUserMap, error)
	UserByNameAndPhoneIndistinct(context.Context, *OrgReq) (*OrgRes, error)
	GetUserByNameAndPhoneIndistinct(context.Context, *OrgReq) (*OrgRes, error)
	UserUuidByPhone(context.Context, *OrgReq) (*OrgRes, error)
	UserMark(context.Context, *OrgReq) (*Null, error)
	UserModify(context.Context, *OrgReq) (*Null, error)
	UserFaceRedirect(context.Context, *OrgReq) (*OrgRes, error)
	OneUserTenant(context.Context, *OrgReq) (*Null, error)
	RootUnit(context.Context, *OrgReq) (*Null, error)
	ChildUnit(context.Context, *OrgReq) (*Null, error)
	RootUnitModify(context.Context, *OrgReq) (*Null, error)
	ChildUnitModify(context.Context, *OrgReq) (*Null, error)
	DeleteUnit(context.Context, *OrgReq) (*Null, error)
	UnitRootTree(context.Context, *OrgReq) (*Any, error)
	UnitTreeByParUuid(context.Context, *OrgReq) (*Any, error)
	UnitRootTreeJson(context.Context, *OrgReq) (*Any, error)
	ParentUnitTree(context.Context, *OrgReq) (*Any, error)
	IsLeader(context.Context, *OrgReq) (*OrgRes, error)
	ChildUnitPagesList(context.Context, *OrgReq) (*ChildUnitMap, error)
	RootUnitPagesList(context.Context, *OrgReq) (*ChildUnitMap, error)
	UnitMemberByUnitUuid(context.Context, *OrgReq) (*OrgRes, error)
	UnitByUserUuid(context.Context, *OrgReq) (*OrgRes, error)
	SameUnitMemberList(context.Context, *OrgReq) (*OrgRes, error)
	UnitMemberModify(context.Context, *OrgReq) (*Null, error)
	DeleteUnitMember(context.Context, *OrgReq) (*Null, error)
	ExcelFileImport(context.Context, *OrgReq) (*OrgRes, error)
	ImportVisitors(context.Context, *OrgReq) (*OrgRes, error)
	AddOneVisitor(context.Context, *OrgReq) (*Null, error)
	GetImportOrgResult(context.Context, *OrgReq) (*Any, error)
	GetImportVisitorOrgResult(context.Context, *OrgReq) (*Any, error)
	BaseInfoByBindPhone(context.Context, *OrgReq) (*OrgRes, error)
	ClientIds(context.Context, *OrgReq) (*OrgRes, error)
	WeChatUnBind(context.Context, *OrgReq) (*Null, error)
	UserTenantByUserUuid(context.Context, *OrgReq) (*OrgRes, error)
	IsBlacklist(context.Context, *OrgReq) (*OrgRes, error)
	UpdateIsBlacklist(context.Context, *OrgReq) (*Null, error)
	mustEmbedUnimplementedOrganizationApiServer()
}

// UnimplementedOrganizationApiServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationApiServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedOrganizationApiServer) OneUser(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OneUser not implemented")
}
func (UnimplementedOrganizationApiServer) GetVisitorTicketInfo(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisitorTicketInfo not implemented")
}
func (UnimplementedOrganizationApiServer) OneTenantUser(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OneTenantUser not implemented")
}
func (UnimplementedOrganizationApiServer) DeleteUser(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedOrganizationApiServer) UserBase(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBase not implemented")
}
func (UnimplementedOrganizationApiServer) UserBaseContainsIdCard(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBaseContainsIdCard not implemented")
}
func (UnimplementedOrganizationApiServer) UnitUserBase(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitUserBase not implemented")
}
func (UnimplementedOrganizationApiServer) UnitMemberIds(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitMemberIds not implemented")
}
func (UnimplementedOrganizationApiServer) UserIds(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIds not implemented")
}
func (UnimplementedOrganizationApiServer) LeaderUuid(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderUuid not implemented")
}
func (UnimplementedOrganizationApiServer) EmpIndistinct(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmpIndistinct not implemented")
}
func (UnimplementedOrganizationApiServer) EmpByNameAndPhoneIndistinct(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmpByNameAndPhoneIndistinct not implemented")
}
func (UnimplementedOrganizationApiServer) EmpByNameAndPhoneAndDepName(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmpByNameAndPhoneAndDepName not implemented")
}
func (UnimplementedOrganizationApiServer) UnitUser(context.Context, *OrgReq) (*AllUserMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitUser not implemented")
}
func (UnimplementedOrganizationApiServer) VisitorsUser(context.Context, *OrgReq) (*AllUserMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VisitorsUser not implemented")
}
func (UnimplementedOrganizationApiServer) UserByNameAndPhoneIndistinct(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserByNameAndPhoneIndistinct not implemented")
}
func (UnimplementedOrganizationApiServer) GetUserByNameAndPhoneIndistinct(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByNameAndPhoneIndistinct not implemented")
}
func (UnimplementedOrganizationApiServer) UserUuidByPhone(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUuidByPhone not implemented")
}
func (UnimplementedOrganizationApiServer) UserMark(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMark not implemented")
}
func (UnimplementedOrganizationApiServer) UserModify(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserModify not implemented")
}
func (UnimplementedOrganizationApiServer) UserFaceRedirect(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFaceRedirect not implemented")
}
func (UnimplementedOrganizationApiServer) OneUserTenant(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OneUserTenant not implemented")
}
func (UnimplementedOrganizationApiServer) RootUnit(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RootUnit not implemented")
}
func (UnimplementedOrganizationApiServer) ChildUnit(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChildUnit not implemented")
}
func (UnimplementedOrganizationApiServer) RootUnitModify(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RootUnitModify not implemented")
}
func (UnimplementedOrganizationApiServer) ChildUnitModify(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChildUnitModify not implemented")
}
func (UnimplementedOrganizationApiServer) DeleteUnit(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnit not implemented")
}
func (UnimplementedOrganizationApiServer) UnitRootTree(context.Context, *OrgReq) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitRootTree not implemented")
}
func (UnimplementedOrganizationApiServer) UnitTreeByParUuid(context.Context, *OrgReq) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitTreeByParUuid not implemented")
}
func (UnimplementedOrganizationApiServer) UnitRootTreeJson(context.Context, *OrgReq) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitRootTreeJson not implemented")
}
func (UnimplementedOrganizationApiServer) ParentUnitTree(context.Context, *OrgReq) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParentUnitTree not implemented")
}
func (UnimplementedOrganizationApiServer) IsLeader(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLeader not implemented")
}
func (UnimplementedOrganizationApiServer) ChildUnitPagesList(context.Context, *OrgReq) (*ChildUnitMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChildUnitPagesList not implemented")
}
func (UnimplementedOrganizationApiServer) RootUnitPagesList(context.Context, *OrgReq) (*ChildUnitMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RootUnitPagesList not implemented")
}
func (UnimplementedOrganizationApiServer) UnitMemberByUnitUuid(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitMemberByUnitUuid not implemented")
}
func (UnimplementedOrganizationApiServer) UnitByUserUuid(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitByUserUuid not implemented")
}
func (UnimplementedOrganizationApiServer) SameUnitMemberList(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SameUnitMemberList not implemented")
}
func (UnimplementedOrganizationApiServer) UnitMemberModify(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitMemberModify not implemented")
}
func (UnimplementedOrganizationApiServer) DeleteUnitMember(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnitMember not implemented")
}
func (UnimplementedOrganizationApiServer) ExcelFileImport(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExcelFileImport not implemented")
}
func (UnimplementedOrganizationApiServer) ImportVisitors(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportVisitors not implemented")
}
func (UnimplementedOrganizationApiServer) AddOneVisitor(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOneVisitor not implemented")
}
func (UnimplementedOrganizationApiServer) GetImportOrgResult(context.Context, *OrgReq) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportOrgResult not implemented")
}
func (UnimplementedOrganizationApiServer) GetImportVisitorOrgResult(context.Context, *OrgReq) (*Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportVisitorOrgResult not implemented")
}
func (UnimplementedOrganizationApiServer) BaseInfoByBindPhone(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseInfoByBindPhone not implemented")
}
func (UnimplementedOrganizationApiServer) ClientIds(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientIds not implemented")
}
func (UnimplementedOrganizationApiServer) WeChatUnBind(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeChatUnBind not implemented")
}
func (UnimplementedOrganizationApiServer) UserTenantByUserUuid(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserTenantByUserUuid not implemented")
}
func (UnimplementedOrganizationApiServer) IsBlacklist(context.Context, *OrgReq) (*OrgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBlacklist not implemented")
}
func (UnimplementedOrganizationApiServer) UpdateIsBlacklist(context.Context, *OrgReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIsBlacklist not implemented")
}
func (s *UnimplementedOrganizationApiServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedOrganizationApiServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedOrganizationApiServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &OrganizationApi_ServiceDesc
}
func (UnimplementedOrganizationApiServer) mustEmbedUnimplementedOrganizationApiServer() {}

// UnsafeOrganizationApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationApiServer will
// result in compilation errors.
type UnsafeOrganizationApiServer interface {
	mustEmbedUnimplementedOrganizationApiServer()
}

func RegisterOrganizationApiServer(s grpc_go.ServiceRegistrar, srv OrganizationApiServer) {
	s.RegisterService(&OrganizationApi_ServiceDesc, srv)
}

func _OrganizationApi_OneUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("OneUser", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/OneUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).OneUser(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_GetVisitorTicketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetVisitorTicketInfo", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/GetVisitorTicketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).GetVisitorTicketInfo(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_OneTenantUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("OneTenantUser", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/OneTenantUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).OneTenantUser(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteUser", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).DeleteUser(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UserBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UserBase", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UserBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UserBase(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UserBaseContainsIdCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UserBaseContainsIdCard", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UserBaseContainsIdCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UserBaseContainsIdCard(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UnitUserBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UnitUserBase", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UnitUserBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UnitUserBase(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UnitMemberIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UnitMemberIds", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UnitMemberIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UnitMemberIds(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UserIds", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UserIds(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_LeaderUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("LeaderUuid", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/LeaderUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).LeaderUuid(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_EmpIndistinct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("EmpIndistinct", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/EmpIndistinct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).EmpIndistinct(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_EmpByNameAndPhoneIndistinct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("EmpByNameAndPhoneIndistinct", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/EmpByNameAndPhoneIndistinct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).EmpByNameAndPhoneIndistinct(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_EmpByNameAndPhoneAndDepName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("EmpByNameAndPhoneAndDepName", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/EmpByNameAndPhoneAndDepName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).EmpByNameAndPhoneAndDepName(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UnitUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UnitUser", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UnitUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UnitUser(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_VisitorsUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("VisitorsUser", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/VisitorsUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).VisitorsUser(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UserByNameAndPhoneIndistinct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UserByNameAndPhoneIndistinct", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UserByNameAndPhoneIndistinct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UserByNameAndPhoneIndistinct(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_GetUserByNameAndPhoneIndistinct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetUserByNameAndPhoneIndistinct", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/GetUserByNameAndPhoneIndistinct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).GetUserByNameAndPhoneIndistinct(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UserUuidByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UserUuidByPhone", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UserUuidByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UserUuidByPhone(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UserMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UserMark", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UserMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UserMark(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UserModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UserModify", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UserModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UserModify(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UserFaceRedirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UserFaceRedirect", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UserFaceRedirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UserFaceRedirect(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_OneUserTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("OneUserTenant", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/OneUserTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).OneUserTenant(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_RootUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("RootUnit", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/RootUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).RootUnit(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_ChildUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChildUnit", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/ChildUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).ChildUnit(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_RootUnitModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("RootUnitModify", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/RootUnitModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).RootUnitModify(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_ChildUnitModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChildUnitModify", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/ChildUnitModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).ChildUnitModify(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_DeleteUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteUnit", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/DeleteUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).DeleteUnit(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UnitRootTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UnitRootTree", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UnitRootTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UnitRootTree(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UnitTreeByParUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UnitTreeByParUuid", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UnitTreeByParUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UnitTreeByParUuid(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UnitRootTreeJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UnitRootTreeJson", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UnitRootTreeJson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UnitRootTreeJson(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_ParentUnitTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ParentUnitTree", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/ParentUnitTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).ParentUnitTree(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_IsLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("IsLeader", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/IsLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).IsLeader(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_ChildUnitPagesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChildUnitPagesList", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/ChildUnitPagesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).ChildUnitPagesList(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_RootUnitPagesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("RootUnitPagesList", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/RootUnitPagesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).RootUnitPagesList(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UnitMemberByUnitUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UnitMemberByUnitUuid", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UnitMemberByUnitUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UnitMemberByUnitUuid(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UnitByUserUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UnitByUserUuid", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UnitByUserUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UnitByUserUuid(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_SameUnitMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SameUnitMemberList", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/SameUnitMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).SameUnitMemberList(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UnitMemberModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UnitMemberModify", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UnitMemberModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UnitMemberModify(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_DeleteUnitMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteUnitMember", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/DeleteUnitMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).DeleteUnitMember(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_ExcelFileImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ExcelFileImport", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/ExcelFileImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).ExcelFileImport(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_ImportVisitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ImportVisitors", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/ImportVisitors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).ImportVisitors(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_AddOneVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("AddOneVisitor", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/AddOneVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).AddOneVisitor(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_GetImportOrgResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetImportOrgResult", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/GetImportOrgResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).GetImportOrgResult(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_GetImportVisitorOrgResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetImportVisitorOrgResult", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/GetImportVisitorOrgResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).GetImportVisitorOrgResult(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_BaseInfoByBindPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("BaseInfoByBindPhone", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/BaseInfoByBindPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).BaseInfoByBindPhone(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_ClientIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ClientIds", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/ClientIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).ClientIds(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_WeChatUnBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("WeChatUnBind", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/WeChatUnBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).WeChatUnBind(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UserTenantByUserUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UserTenantByUserUuid", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UserTenantByUserUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UserTenantByUserUuid(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_IsBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("IsBlacklist", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/IsBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).IsBlacklist(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationApi_UpdateIsBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UpdateIsBlacklist", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.OrganizationApi/UpdateIsBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).UpdateIsBlacklist(ctx, req.(*OrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationApi_ServiceDesc is the grpc_go.ServiceDesc for OrganizationApi service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationApi_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "main.OrganizationApi",
	HandlerType: (*OrganizationApiServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "OneUser",
			Handler:    _OrganizationApi_OneUser_Handler,
		},
		{
			MethodName: "GetVisitorTicketInfo",
			Handler:    _OrganizationApi_GetVisitorTicketInfo_Handler,
		},
		{
			MethodName: "OneTenantUser",
			Handler:    _OrganizationApi_OneTenantUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _OrganizationApi_DeleteUser_Handler,
		},
		{
			MethodName: "UserBase",
			Handler:    _OrganizationApi_UserBase_Handler,
		},
		{
			MethodName: "UserBaseContainsIdCard",
			Handler:    _OrganizationApi_UserBaseContainsIdCard_Handler,
		},
		{
			MethodName: "UnitUserBase",
			Handler:    _OrganizationApi_UnitUserBase_Handler,
		},
		{
			MethodName: "UnitMemberIds",
			Handler:    _OrganizationApi_UnitMemberIds_Handler,
		},
		{
			MethodName: "UserIds",
			Handler:    _OrganizationApi_UserIds_Handler,
		},
		{
			MethodName: "LeaderUuid",
			Handler:    _OrganizationApi_LeaderUuid_Handler,
		},
		{
			MethodName: "EmpIndistinct",
			Handler:    _OrganizationApi_EmpIndistinct_Handler,
		},
		{
			MethodName: "EmpByNameAndPhoneIndistinct",
			Handler:    _OrganizationApi_EmpByNameAndPhoneIndistinct_Handler,
		},
		{
			MethodName: "EmpByNameAndPhoneAndDepName",
			Handler:    _OrganizationApi_EmpByNameAndPhoneAndDepName_Handler,
		},
		{
			MethodName: "UnitUser",
			Handler:    _OrganizationApi_UnitUser_Handler,
		},
		{
			MethodName: "VisitorsUser",
			Handler:    _OrganizationApi_VisitorsUser_Handler,
		},
		{
			MethodName: "UserByNameAndPhoneIndistinct",
			Handler:    _OrganizationApi_UserByNameAndPhoneIndistinct_Handler,
		},
		{
			MethodName: "GetUserByNameAndPhoneIndistinct",
			Handler:    _OrganizationApi_GetUserByNameAndPhoneIndistinct_Handler,
		},
		{
			MethodName: "UserUuidByPhone",
			Handler:    _OrganizationApi_UserUuidByPhone_Handler,
		},
		{
			MethodName: "UserMark",
			Handler:    _OrganizationApi_UserMark_Handler,
		},
		{
			MethodName: "UserModify",
			Handler:    _OrganizationApi_UserModify_Handler,
		},
		{
			MethodName: "UserFaceRedirect",
			Handler:    _OrganizationApi_UserFaceRedirect_Handler,
		},
		{
			MethodName: "OneUserTenant",
			Handler:    _OrganizationApi_OneUserTenant_Handler,
		},
		{
			MethodName: "RootUnit",
			Handler:    _OrganizationApi_RootUnit_Handler,
		},
		{
			MethodName: "ChildUnit",
			Handler:    _OrganizationApi_ChildUnit_Handler,
		},
		{
			MethodName: "RootUnitModify",
			Handler:    _OrganizationApi_RootUnitModify_Handler,
		},
		{
			MethodName: "ChildUnitModify",
			Handler:    _OrganizationApi_ChildUnitModify_Handler,
		},
		{
			MethodName: "DeleteUnit",
			Handler:    _OrganizationApi_DeleteUnit_Handler,
		},
		{
			MethodName: "UnitRootTree",
			Handler:    _OrganizationApi_UnitRootTree_Handler,
		},
		{
			MethodName: "UnitTreeByParUuid",
			Handler:    _OrganizationApi_UnitTreeByParUuid_Handler,
		},
		{
			MethodName: "UnitRootTreeJson",
			Handler:    _OrganizationApi_UnitRootTreeJson_Handler,
		},
		{
			MethodName: "ParentUnitTree",
			Handler:    _OrganizationApi_ParentUnitTree_Handler,
		},
		{
			MethodName: "IsLeader",
			Handler:    _OrganizationApi_IsLeader_Handler,
		},
		{
			MethodName: "ChildUnitPagesList",
			Handler:    _OrganizationApi_ChildUnitPagesList_Handler,
		},
		{
			MethodName: "RootUnitPagesList",
			Handler:    _OrganizationApi_RootUnitPagesList_Handler,
		},
		{
			MethodName: "UnitMemberByUnitUuid",
			Handler:    _OrganizationApi_UnitMemberByUnitUuid_Handler,
		},
		{
			MethodName: "UnitByUserUuid",
			Handler:    _OrganizationApi_UnitByUserUuid_Handler,
		},
		{
			MethodName: "SameUnitMemberList",
			Handler:    _OrganizationApi_SameUnitMemberList_Handler,
		},
		{
			MethodName: "UnitMemberModify",
			Handler:    _OrganizationApi_UnitMemberModify_Handler,
		},
		{
			MethodName: "DeleteUnitMember",
			Handler:    _OrganizationApi_DeleteUnitMember_Handler,
		},
		{
			MethodName: "ExcelFileImport",
			Handler:    _OrganizationApi_ExcelFileImport_Handler,
		},
		{
			MethodName: "ImportVisitors",
			Handler:    _OrganizationApi_ImportVisitors_Handler,
		},
		{
			MethodName: "AddOneVisitor",
			Handler:    _OrganizationApi_AddOneVisitor_Handler,
		},
		{
			MethodName: "GetImportOrgResult",
			Handler:    _OrganizationApi_GetImportOrgResult_Handler,
		},
		{
			MethodName: "GetImportVisitorOrgResult",
			Handler:    _OrganizationApi_GetImportVisitorOrgResult_Handler,
		},
		{
			MethodName: "BaseInfoByBindPhone",
			Handler:    _OrganizationApi_BaseInfoByBindPhone_Handler,
		},
		{
			MethodName: "ClientIds",
			Handler:    _OrganizationApi_ClientIds_Handler,
		},
		{
			MethodName: "WeChatUnBind",
			Handler:    _OrganizationApi_WeChatUnBind_Handler,
		},
		{
			MethodName: "UserTenantByUserUuid",
			Handler:    _OrganizationApi_UserTenantByUserUuid_Handler,
		},
		{
			MethodName: "IsBlacklist",
			Handler:    _OrganizationApi_IsBlacklist_Handler,
		},
		{
			MethodName: "UpdateIsBlacklist",
			Handler:    _OrganizationApi_UpdateIsBlacklist_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}

// PassageApiClient is the client API for PassageApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassageApiClient interface {
	PassageAddMyEmp(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment)
	PassageMyEmpPages(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageResMap, common.ErrorWithAttachment)
	PassageMyEmp(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	PassageMyEmpLists(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment)
	PassageBooking(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment)
	BatchPassageInvite(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment)
	GetInviteBatchPassageResult(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageResMap, common.ErrorWithAttachment)
	PassageInvite(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageResMap, common.ErrorWithAttachment)
	DeletePassage(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment)
	DeletePassageByPersonUuid(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment)
	PassageLists(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageResMap, common.ErrorWithAttachment)
	PassageBookingAll(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment)
	PassageInviteAll(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment)
	PassageBookingArrival(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment)
	PassageBookingStatus(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment)
	PassageBookingStatusPass(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment)
	PassageInviteArrival(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment)
	PassageInviteStatus(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment)
	PassageInviteStatusPass(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment)
	OneDetail(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment)
	VisitorTodayPass(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment)
	EmpTodayPass(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment)
	PassageAddMyVisitor(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment)
	PassageMyVisitorTop(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	PassageMyVisitorPages(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageResMap, common.ErrorWithAttachment)
	PassageMyVisitor(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageResMap, common.ErrorWithAttachment)
	PassageMyVisitorByUuid(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment)
	PassageMyVisitorLists(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment)
	WorkFlow(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	PassagePageLists(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment)
	PassageExcel(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment)
	DevicePassage(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	BasePassage(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	SpotVisitorDetail(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment)
	PassageSpotVisitorPages(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageSpotMap, common.ErrorWithAttachment)
	PassageSpotVisitor(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageSpotMap, common.ErrorWithAttachment)
}

type passageApiClient struct {
	cc *triple.TripleConn
}

type PassageApiClientImpl struct {
	PassageAddMyEmp             func(ctx context.Context, in *PassageReq) (*PassageRes, error)
	PassageMyEmpPages           func(ctx context.Context, in *PassageReq) (*PassageResMap, error)
	PassageMyEmp                func(ctx context.Context, in *PassageReq) (*Null, error)
	PassageMyEmpLists           func(ctx context.Context, in *PassageReq) (*PassageRes, error)
	PassageBooking              func(ctx context.Context, in *PassageReq) (*PassageRes, error)
	BatchPassageInvite          func(ctx context.Context, in *PassageReq) (*PassageRes, error)
	GetInviteBatchPassageResult func(ctx context.Context, in *PassageReq) (*PassageResMap, error)
	PassageInvite               func(ctx context.Context, in *PassageReq) (*PassageResMap, error)
	DeletePassage               func(ctx context.Context, in *PassageReq) (*PassageRes, error)
	DeletePassageByPersonUuid   func(ctx context.Context, in *PassageReq) (*PassageRes, error)
	PassageLists                func(ctx context.Context, in *PassageReq) (*PassageResMap, error)
	PassageBookingAll           func(ctx context.Context, in *PassageReq) (*PassageMap, error)
	PassageInviteAll            func(ctx context.Context, in *PassageReq) (*PassageMap, error)
	PassageBookingArrival       func(ctx context.Context, in *PassageReq) (*PassageMap, error)
	PassageBookingStatus        func(ctx context.Context, in *PassageReq) (*PassageMap, error)
	PassageBookingStatusPass    func(ctx context.Context, in *PassageReq) (*PassageMap, error)
	PassageInviteArrival        func(ctx context.Context, in *PassageReq) (*PassageMap, error)
	PassageInviteStatus         func(ctx context.Context, in *PassageReq) (*PassageMap, error)
	PassageInviteStatusPass     func(ctx context.Context, in *PassageReq) (*PassageMap, error)
	OneDetail                   func(ctx context.Context, in *PassageReq) (*PassageRes, error)
	VisitorTodayPass            func(ctx context.Context, in *PassageReq) (*PassageRes, error)
	EmpTodayPass                func(ctx context.Context, in *PassageReq) (*PassageRes, error)
	PassageAddMyVisitor         func(ctx context.Context, in *PassageReq) (*PassageRes, error)
	PassageMyVisitorTop         func(ctx context.Context, in *PassageReq) (*Null, error)
	PassageMyVisitorPages       func(ctx context.Context, in *PassageReq) (*PassageResMap, error)
	PassageMyVisitor            func(ctx context.Context, in *PassageReq) (*PassageResMap, error)
	PassageMyVisitorByUuid      func(ctx context.Context, in *PassageReq) (*PassageRes, error)
	PassageMyVisitorLists       func(ctx context.Context, in *PassageReq) (*PassageRes, error)
	WorkFlow                    func(ctx context.Context, in *PassageReq) (*Null, error)
	PassagePageLists            func(ctx context.Context, in *PassageReq) (*PassageMap, error)
	PassageExcel                func(ctx context.Context, in *PassageReq) (*PassageRes, error)
	DevicePassage               func(ctx context.Context, in *PassageReq) (*Null, error)
	BasePassage                 func(ctx context.Context, in *PassageReq) (*Null, error)
	SpotVisitorDetail           func(ctx context.Context, in *PassageReq) (*PassageRes, error)
	PassageSpotVisitorPages     func(ctx context.Context, in *PassageReq) (*PassageSpotMap, error)
	PassageSpotVisitor          func(ctx context.Context, in *PassageReq) (*PassageSpotMap, error)
}

func (c *PassageApiClientImpl) GetDubboStub(cc *triple.TripleConn) PassageApiClient {
	return NewPassageApiClient(cc)
}

func NewPassageApiClient(cc *triple.TripleConn) PassageApiClient {
	return &passageApiClient{cc}
}

func (c *passageApiClient) PassageAddMyEmp(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment) {
	out := new(PassageRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageAddMyEmp", in, out)
}

func (c *passageApiClient) PassageMyEmpPages(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageResMap, common.ErrorWithAttachment) {
	out := new(PassageResMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageMyEmpPages", in, out)
}

func (c *passageApiClient) PassageMyEmp(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageMyEmp", in, out)
}

func (c *passageApiClient) PassageMyEmpLists(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment) {
	out := new(PassageRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageMyEmpLists", in, out)
}

func (c *passageApiClient) PassageBooking(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment) {
	out := new(PassageRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageBooking", in, out)
}

func (c *passageApiClient) BatchPassageInvite(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment) {
	out := new(PassageRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/BatchPassageInvite", in, out)
}

func (c *passageApiClient) GetInviteBatchPassageResult(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageResMap, common.ErrorWithAttachment) {
	out := new(PassageResMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetInviteBatchPassageResult", in, out)
}

func (c *passageApiClient) PassageInvite(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageResMap, common.ErrorWithAttachment) {
	out := new(PassageResMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageInvite", in, out)
}

func (c *passageApiClient) DeletePassage(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment) {
	out := new(PassageRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeletePassage", in, out)
}

func (c *passageApiClient) DeletePassageByPersonUuid(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment) {
	out := new(PassageRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeletePassageByPersonUuid", in, out)
}

func (c *passageApiClient) PassageLists(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageResMap, common.ErrorWithAttachment) {
	out := new(PassageResMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageLists", in, out)
}

func (c *passageApiClient) PassageBookingAll(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment) {
	out := new(PassageMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageBookingAll", in, out)
}

func (c *passageApiClient) PassageInviteAll(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment) {
	out := new(PassageMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageInviteAll", in, out)
}

func (c *passageApiClient) PassageBookingArrival(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment) {
	out := new(PassageMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageBookingArrival", in, out)
}

func (c *passageApiClient) PassageBookingStatus(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment) {
	out := new(PassageMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageBookingStatus", in, out)
}

func (c *passageApiClient) PassageBookingStatusPass(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment) {
	out := new(PassageMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageBookingStatusPass", in, out)
}

func (c *passageApiClient) PassageInviteArrival(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment) {
	out := new(PassageMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageInviteArrival", in, out)
}

func (c *passageApiClient) PassageInviteStatus(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment) {
	out := new(PassageMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageInviteStatus", in, out)
}

func (c *passageApiClient) PassageInviteStatusPass(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment) {
	out := new(PassageMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageInviteStatusPass", in, out)
}

func (c *passageApiClient) OneDetail(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment) {
	out := new(PassageRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/OneDetail", in, out)
}

func (c *passageApiClient) VisitorTodayPass(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment) {
	out := new(PassageRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/VisitorTodayPass", in, out)
}

func (c *passageApiClient) EmpTodayPass(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment) {
	out := new(PassageRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/EmpTodayPass", in, out)
}

func (c *passageApiClient) PassageAddMyVisitor(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment) {
	out := new(PassageRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageAddMyVisitor", in, out)
}

func (c *passageApiClient) PassageMyVisitorTop(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageMyVisitorTop", in, out)
}

func (c *passageApiClient) PassageMyVisitorPages(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageResMap, common.ErrorWithAttachment) {
	out := new(PassageResMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageMyVisitorPages", in, out)
}

func (c *passageApiClient) PassageMyVisitor(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageResMap, common.ErrorWithAttachment) {
	out := new(PassageResMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageMyVisitor", in, out)
}

func (c *passageApiClient) PassageMyVisitorByUuid(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment) {
	out := new(PassageRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageMyVisitorByUuid", in, out)
}

func (c *passageApiClient) PassageMyVisitorLists(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment) {
	out := new(PassageRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageMyVisitorLists", in, out)
}

func (c *passageApiClient) WorkFlow(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/WorkFlow", in, out)
}

func (c *passageApiClient) PassagePageLists(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageMap, common.ErrorWithAttachment) {
	out := new(PassageMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassagePageLists", in, out)
}

func (c *passageApiClient) PassageExcel(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment) {
	out := new(PassageRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageExcel", in, out)
}

func (c *passageApiClient) DevicePassage(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DevicePassage", in, out)
}

func (c *passageApiClient) BasePassage(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/BasePassage", in, out)
}

func (c *passageApiClient) SpotVisitorDetail(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageRes, common.ErrorWithAttachment) {
	out := new(PassageRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SpotVisitorDetail", in, out)
}

func (c *passageApiClient) PassageSpotVisitorPages(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageSpotMap, common.ErrorWithAttachment) {
	out := new(PassageSpotMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageSpotVisitorPages", in, out)
}

func (c *passageApiClient) PassageSpotVisitor(ctx context.Context, in *PassageReq, opts ...grpc_go.CallOption) (*PassageSpotMap, common.ErrorWithAttachment) {
	out := new(PassageSpotMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PassageSpotVisitor", in, out)
}

// PassageApiServer is the server API for PassageApi service.
// All implementations must embed UnimplementedPassageApiServer
// for forward compatibility
type PassageApiServer interface {
	PassageAddMyEmp(context.Context, *PassageReq) (*PassageRes, error)
	PassageMyEmpPages(context.Context, *PassageReq) (*PassageResMap, error)
	PassageMyEmp(context.Context, *PassageReq) (*Null, error)
	PassageMyEmpLists(context.Context, *PassageReq) (*PassageRes, error)
	PassageBooking(context.Context, *PassageReq) (*PassageRes, error)
	BatchPassageInvite(context.Context, *PassageReq) (*PassageRes, error)
	GetInviteBatchPassageResult(context.Context, *PassageReq) (*PassageResMap, error)
	PassageInvite(context.Context, *PassageReq) (*PassageResMap, error)
	DeletePassage(context.Context, *PassageReq) (*PassageRes, error)
	DeletePassageByPersonUuid(context.Context, *PassageReq) (*PassageRes, error)
	PassageLists(context.Context, *PassageReq) (*PassageResMap, error)
	PassageBookingAll(context.Context, *PassageReq) (*PassageMap, error)
	PassageInviteAll(context.Context, *PassageReq) (*PassageMap, error)
	PassageBookingArrival(context.Context, *PassageReq) (*PassageMap, error)
	PassageBookingStatus(context.Context, *PassageReq) (*PassageMap, error)
	PassageBookingStatusPass(context.Context, *PassageReq) (*PassageMap, error)
	PassageInviteArrival(context.Context, *PassageReq) (*PassageMap, error)
	PassageInviteStatus(context.Context, *PassageReq) (*PassageMap, error)
	PassageInviteStatusPass(context.Context, *PassageReq) (*PassageMap, error)
	OneDetail(context.Context, *PassageReq) (*PassageRes, error)
	VisitorTodayPass(context.Context, *PassageReq) (*PassageRes, error)
	EmpTodayPass(context.Context, *PassageReq) (*PassageRes, error)
	PassageAddMyVisitor(context.Context, *PassageReq) (*PassageRes, error)
	PassageMyVisitorTop(context.Context, *PassageReq) (*Null, error)
	PassageMyVisitorPages(context.Context, *PassageReq) (*PassageResMap, error)
	PassageMyVisitor(context.Context, *PassageReq) (*PassageResMap, error)
	PassageMyVisitorByUuid(context.Context, *PassageReq) (*PassageRes, error)
	PassageMyVisitorLists(context.Context, *PassageReq) (*PassageRes, error)
	WorkFlow(context.Context, *PassageReq) (*Null, error)
	PassagePageLists(context.Context, *PassageReq) (*PassageMap, error)
	PassageExcel(context.Context, *PassageReq) (*PassageRes, error)
	DevicePassage(context.Context, *PassageReq) (*Null, error)
	BasePassage(context.Context, *PassageReq) (*Null, error)
	SpotVisitorDetail(context.Context, *PassageReq) (*PassageRes, error)
	PassageSpotVisitorPages(context.Context, *PassageReq) (*PassageSpotMap, error)
	PassageSpotVisitor(context.Context, *PassageReq) (*PassageSpotMap, error)
	mustEmbedUnimplementedPassageApiServer()
}

// UnimplementedPassageApiServer must be embedded to have forward compatible implementations.
type UnimplementedPassageApiServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedPassageApiServer) PassageAddMyEmp(context.Context, *PassageReq) (*PassageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageAddMyEmp not implemented")
}
func (UnimplementedPassageApiServer) PassageMyEmpPages(context.Context, *PassageReq) (*PassageResMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageMyEmpPages not implemented")
}
func (UnimplementedPassageApiServer) PassageMyEmp(context.Context, *PassageReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageMyEmp not implemented")
}
func (UnimplementedPassageApiServer) PassageMyEmpLists(context.Context, *PassageReq) (*PassageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageMyEmpLists not implemented")
}
func (UnimplementedPassageApiServer) PassageBooking(context.Context, *PassageReq) (*PassageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageBooking not implemented")
}
func (UnimplementedPassageApiServer) BatchPassageInvite(context.Context, *PassageReq) (*PassageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchPassageInvite not implemented")
}
func (UnimplementedPassageApiServer) GetInviteBatchPassageResult(context.Context, *PassageReq) (*PassageResMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteBatchPassageResult not implemented")
}
func (UnimplementedPassageApiServer) PassageInvite(context.Context, *PassageReq) (*PassageResMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageInvite not implemented")
}
func (UnimplementedPassageApiServer) DeletePassage(context.Context, *PassageReq) (*PassageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassage not implemented")
}
func (UnimplementedPassageApiServer) DeletePassageByPersonUuid(context.Context, *PassageReq) (*PassageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassageByPersonUuid not implemented")
}
func (UnimplementedPassageApiServer) PassageLists(context.Context, *PassageReq) (*PassageResMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageLists not implemented")
}
func (UnimplementedPassageApiServer) PassageBookingAll(context.Context, *PassageReq) (*PassageMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageBookingAll not implemented")
}
func (UnimplementedPassageApiServer) PassageInviteAll(context.Context, *PassageReq) (*PassageMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageInviteAll not implemented")
}
func (UnimplementedPassageApiServer) PassageBookingArrival(context.Context, *PassageReq) (*PassageMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageBookingArrival not implemented")
}
func (UnimplementedPassageApiServer) PassageBookingStatus(context.Context, *PassageReq) (*PassageMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageBookingStatus not implemented")
}
func (UnimplementedPassageApiServer) PassageBookingStatusPass(context.Context, *PassageReq) (*PassageMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageBookingStatusPass not implemented")
}
func (UnimplementedPassageApiServer) PassageInviteArrival(context.Context, *PassageReq) (*PassageMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageInviteArrival not implemented")
}
func (UnimplementedPassageApiServer) PassageInviteStatus(context.Context, *PassageReq) (*PassageMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageInviteStatus not implemented")
}
func (UnimplementedPassageApiServer) PassageInviteStatusPass(context.Context, *PassageReq) (*PassageMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageInviteStatusPass not implemented")
}
func (UnimplementedPassageApiServer) OneDetail(context.Context, *PassageReq) (*PassageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OneDetail not implemented")
}
func (UnimplementedPassageApiServer) VisitorTodayPass(context.Context, *PassageReq) (*PassageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VisitorTodayPass not implemented")
}
func (UnimplementedPassageApiServer) EmpTodayPass(context.Context, *PassageReq) (*PassageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmpTodayPass not implemented")
}
func (UnimplementedPassageApiServer) PassageAddMyVisitor(context.Context, *PassageReq) (*PassageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageAddMyVisitor not implemented")
}
func (UnimplementedPassageApiServer) PassageMyVisitorTop(context.Context, *PassageReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageMyVisitorTop not implemented")
}
func (UnimplementedPassageApiServer) PassageMyVisitorPages(context.Context, *PassageReq) (*PassageResMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageMyVisitorPages not implemented")
}
func (UnimplementedPassageApiServer) PassageMyVisitor(context.Context, *PassageReq) (*PassageResMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageMyVisitor not implemented")
}
func (UnimplementedPassageApiServer) PassageMyVisitorByUuid(context.Context, *PassageReq) (*PassageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageMyVisitorByUuid not implemented")
}
func (UnimplementedPassageApiServer) PassageMyVisitorLists(context.Context, *PassageReq) (*PassageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageMyVisitorLists not implemented")
}
func (UnimplementedPassageApiServer) WorkFlow(context.Context, *PassageReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkFlow not implemented")
}
func (UnimplementedPassageApiServer) PassagePageLists(context.Context, *PassageReq) (*PassageMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassagePageLists not implemented")
}
func (UnimplementedPassageApiServer) PassageExcel(context.Context, *PassageReq) (*PassageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageExcel not implemented")
}
func (UnimplementedPassageApiServer) DevicePassage(context.Context, *PassageReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevicePassage not implemented")
}
func (UnimplementedPassageApiServer) BasePassage(context.Context, *PassageReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BasePassage not implemented")
}
func (UnimplementedPassageApiServer) SpotVisitorDetail(context.Context, *PassageReq) (*PassageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotVisitorDetail not implemented")
}
func (UnimplementedPassageApiServer) PassageSpotVisitorPages(context.Context, *PassageReq) (*PassageSpotMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageSpotVisitorPages not implemented")
}
func (UnimplementedPassageApiServer) PassageSpotVisitor(context.Context, *PassageReq) (*PassageSpotMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassageSpotVisitor not implemented")
}
func (s *UnimplementedPassageApiServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedPassageApiServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedPassageApiServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &PassageApi_ServiceDesc
}
func (UnimplementedPassageApiServer) mustEmbedUnimplementedPassageApiServer() {}

// UnsafePassageApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassageApiServer will
// result in compilation errors.
type UnsafePassageApiServer interface {
	mustEmbedUnimplementedPassageApiServer()
}

func RegisterPassageApiServer(s grpc_go.ServiceRegistrar, srv PassageApiServer) {
	s.RegisterService(&PassageApi_ServiceDesc, srv)
}

func _PassageApi_PassageAddMyEmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageAddMyEmp", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageAddMyEmp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageAddMyEmp(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageMyEmpPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageMyEmpPages", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageMyEmpPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageMyEmpPages(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageMyEmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageMyEmp", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageMyEmp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageMyEmp(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageMyEmpLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageMyEmpLists", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageMyEmpLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageMyEmpLists(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageBooking", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageBooking(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_BatchPassageInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("BatchPassageInvite", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/BatchPassageInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).BatchPassageInvite(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_GetInviteBatchPassageResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetInviteBatchPassageResult", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/GetInviteBatchPassageResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).GetInviteBatchPassageResult(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageInvite", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageInvite(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_DeletePassage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeletePassage", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/DeletePassage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).DeletePassage(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_DeletePassageByPersonUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeletePassageByPersonUuid", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/DeletePassageByPersonUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).DeletePassageByPersonUuid(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageLists", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageLists(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageBookingAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageBookingAll", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageBookingAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageBookingAll(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageInviteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageInviteAll", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageInviteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageInviteAll(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageBookingArrival_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageBookingArrival", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageBookingArrival",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageBookingArrival(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageBookingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageBookingStatus", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageBookingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageBookingStatus(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageBookingStatusPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageBookingStatusPass", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageBookingStatusPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageBookingStatusPass(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageInviteArrival_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageInviteArrival", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageInviteArrival",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageInviteArrival(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageInviteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageInviteStatus", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageInviteStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageInviteStatus(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageInviteStatusPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageInviteStatusPass", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageInviteStatusPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageInviteStatusPass(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_OneDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("OneDetail", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/OneDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).OneDetail(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_VisitorTodayPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("VisitorTodayPass", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/VisitorTodayPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).VisitorTodayPass(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_EmpTodayPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("EmpTodayPass", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/EmpTodayPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).EmpTodayPass(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageAddMyVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageAddMyVisitor", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageAddMyVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageAddMyVisitor(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageMyVisitorTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageMyVisitorTop", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageMyVisitorTop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageMyVisitorTop(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageMyVisitorPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageMyVisitorPages", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageMyVisitorPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageMyVisitorPages(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageMyVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageMyVisitor", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageMyVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageMyVisitor(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageMyVisitorByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageMyVisitorByUuid", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageMyVisitorByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageMyVisitorByUuid(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageMyVisitorLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageMyVisitorLists", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageMyVisitorLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageMyVisitorLists(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_WorkFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("WorkFlow", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/WorkFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).WorkFlow(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassagePageLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassagePageLists", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassagePageLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassagePageLists(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageExcel", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageExcel(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_DevicePassage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DevicePassage", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/DevicePassage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).DevicePassage(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_BasePassage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("BasePassage", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/BasePassage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).BasePassage(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_SpotVisitorDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SpotVisitorDetail", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/SpotVisitorDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).SpotVisitorDetail(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageSpotVisitorPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageSpotVisitorPages", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageSpotVisitorPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageSpotVisitorPages(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageApi_PassageSpotVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PassageSpotVisitor", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PassageApi/PassageSpotVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageApiServer).PassageSpotVisitor(ctx, req.(*PassageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PassageApi_ServiceDesc is the grpc_go.ServiceDesc for PassageApi service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassageApi_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "main.PassageApi",
	HandlerType: (*PassageApiServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "PassageAddMyEmp",
			Handler:    _PassageApi_PassageAddMyEmp_Handler,
		},
		{
			MethodName: "PassageMyEmpPages",
			Handler:    _PassageApi_PassageMyEmpPages_Handler,
		},
		{
			MethodName: "PassageMyEmp",
			Handler:    _PassageApi_PassageMyEmp_Handler,
		},
		{
			MethodName: "PassageMyEmpLists",
			Handler:    _PassageApi_PassageMyEmpLists_Handler,
		},
		{
			MethodName: "PassageBooking",
			Handler:    _PassageApi_PassageBooking_Handler,
		},
		{
			MethodName: "BatchPassageInvite",
			Handler:    _PassageApi_BatchPassageInvite_Handler,
		},
		{
			MethodName: "GetInviteBatchPassageResult",
			Handler:    _PassageApi_GetInviteBatchPassageResult_Handler,
		},
		{
			MethodName: "PassageInvite",
			Handler:    _PassageApi_PassageInvite_Handler,
		},
		{
			MethodName: "DeletePassage",
			Handler:    _PassageApi_DeletePassage_Handler,
		},
		{
			MethodName: "DeletePassageByPersonUuid",
			Handler:    _PassageApi_DeletePassageByPersonUuid_Handler,
		},
		{
			MethodName: "PassageLists",
			Handler:    _PassageApi_PassageLists_Handler,
		},
		{
			MethodName: "PassageBookingAll",
			Handler:    _PassageApi_PassageBookingAll_Handler,
		},
		{
			MethodName: "PassageInviteAll",
			Handler:    _PassageApi_PassageInviteAll_Handler,
		},
		{
			MethodName: "PassageBookingArrival",
			Handler:    _PassageApi_PassageBookingArrival_Handler,
		},
		{
			MethodName: "PassageBookingStatus",
			Handler:    _PassageApi_PassageBookingStatus_Handler,
		},
		{
			MethodName: "PassageBookingStatusPass",
			Handler:    _PassageApi_PassageBookingStatusPass_Handler,
		},
		{
			MethodName: "PassageInviteArrival",
			Handler:    _PassageApi_PassageInviteArrival_Handler,
		},
		{
			MethodName: "PassageInviteStatus",
			Handler:    _PassageApi_PassageInviteStatus_Handler,
		},
		{
			MethodName: "PassageInviteStatusPass",
			Handler:    _PassageApi_PassageInviteStatusPass_Handler,
		},
		{
			MethodName: "OneDetail",
			Handler:    _PassageApi_OneDetail_Handler,
		},
		{
			MethodName: "VisitorTodayPass",
			Handler:    _PassageApi_VisitorTodayPass_Handler,
		},
		{
			MethodName: "EmpTodayPass",
			Handler:    _PassageApi_EmpTodayPass_Handler,
		},
		{
			MethodName: "PassageAddMyVisitor",
			Handler:    _PassageApi_PassageAddMyVisitor_Handler,
		},
		{
			MethodName: "PassageMyVisitorTop",
			Handler:    _PassageApi_PassageMyVisitorTop_Handler,
		},
		{
			MethodName: "PassageMyVisitorPages",
			Handler:    _PassageApi_PassageMyVisitorPages_Handler,
		},
		{
			MethodName: "PassageMyVisitor",
			Handler:    _PassageApi_PassageMyVisitor_Handler,
		},
		{
			MethodName: "PassageMyVisitorByUuid",
			Handler:    _PassageApi_PassageMyVisitorByUuid_Handler,
		},
		{
			MethodName: "PassageMyVisitorLists",
			Handler:    _PassageApi_PassageMyVisitorLists_Handler,
		},
		{
			MethodName: "WorkFlow",
			Handler:    _PassageApi_WorkFlow_Handler,
		},
		{
			MethodName: "PassagePageLists",
			Handler:    _PassageApi_PassagePageLists_Handler,
		},
		{
			MethodName: "PassageExcel",
			Handler:    _PassageApi_PassageExcel_Handler,
		},
		{
			MethodName: "DevicePassage",
			Handler:    _PassageApi_DevicePassage_Handler,
		},
		{
			MethodName: "BasePassage",
			Handler:    _PassageApi_BasePassage_Handler,
		},
		{
			MethodName: "SpotVisitorDetail",
			Handler:    _PassageApi_SpotVisitorDetail_Handler,
		},
		{
			MethodName: "PassageSpotVisitorPages",
			Handler:    _PassageApi_PassageSpotVisitorPages_Handler,
		},
		{
			MethodName: "PassageSpotVisitor",
			Handler:    _PassageApi_PassageSpotVisitor_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}

// QuestionnaireApiClient is the client API for QuestionnaireApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionnaireApiClient interface {
	InitQuestionnaire(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*NaireInfo, common.ErrorWithAttachment)
	AddQuestionnaire(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*NaireInfo, common.ErrorWithAttachment)
	UpdateQuestionnaire(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	GetQuestionnaire(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*QuestionList, common.ErrorWithAttachment)
	DeleteQuestionnaire(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	GetQuestionnaireList(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*QuestionList, common.ErrorWithAttachment)
	GetQuestionInfo(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*QuestionInfo, common.ErrorWithAttachment)
	AddOneQuestion(ctx context.Context, in *QuestionInfo, opts ...grpc_go.CallOption) (*QuestionInfo, common.ErrorWithAttachment)
	UpdateOneQuestion(ctx context.Context, in *QuestionInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DeleteQuestionByUuid(ctx context.Context, in *QuestionInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	GetQuestionList(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*QuestionList, common.ErrorWithAttachment)
	GetAnswerByUN(ctx context.Context, in *AnswerInfo, opts ...grpc_go.CallOption) (*AnswerList, common.ErrorWithAttachment)
	AddAnswerByUN(ctx context.Context, in *AnswerInfo, opts ...grpc_go.CallOption) (*AnswerInfo, common.ErrorWithAttachment)
	UpdateAnswerByAU(ctx context.Context, in *AnswerInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	GetIAnswerByQUuid(ctx context.Context, in *AnswerInfo, opts ...grpc_go.CallOption) (*AnswerList, common.ErrorWithAttachment)
	GetQNAnswerBYQN(ctx context.Context, in *AnswerInfo, opts ...grpc_go.CallOption) (*QuestionList, common.ErrorWithAttachment)
	DeleteUAnswerByQN(ctx context.Context, in *AnswerInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
}

type questionnaireApiClient struct {
	cc *triple.TripleConn
}

type QuestionnaireApiClientImpl struct {
	InitQuestionnaire    func(ctx context.Context, in *NaireInfo) (*NaireInfo, error)
	AddQuestionnaire     func(ctx context.Context, in *NaireInfo) (*NaireInfo, error)
	UpdateQuestionnaire  func(ctx context.Context, in *NaireInfo) (*Null, error)
	GetQuestionnaire     func(ctx context.Context, in *NaireInfo) (*QuestionList, error)
	DeleteQuestionnaire  func(ctx context.Context, in *NaireInfo) (*Null, error)
	GetQuestionnaireList func(ctx context.Context, in *NaireInfo) (*QuestionList, error)
	GetQuestionInfo      func(ctx context.Context, in *NaireInfo) (*QuestionInfo, error)
	AddOneQuestion       func(ctx context.Context, in *QuestionInfo) (*QuestionInfo, error)
	UpdateOneQuestion    func(ctx context.Context, in *QuestionInfo) (*Null, error)
	DeleteQuestionByUuid func(ctx context.Context, in *QuestionInfo) (*Null, error)
	GetQuestionList      func(ctx context.Context, in *NaireInfo) (*QuestionList, error)
	GetAnswerByUN        func(ctx context.Context, in *AnswerInfo) (*AnswerList, error)
	AddAnswerByUN        func(ctx context.Context, in *AnswerInfo) (*AnswerInfo, error)
	UpdateAnswerByAU     func(ctx context.Context, in *AnswerInfo) (*Null, error)
	GetIAnswerByQUuid    func(ctx context.Context, in *AnswerInfo) (*AnswerList, error)
	GetQNAnswerBYQN      func(ctx context.Context, in *AnswerInfo) (*QuestionList, error)
	DeleteUAnswerByQN    func(ctx context.Context, in *AnswerInfo) (*Null, error)
}

func (c *QuestionnaireApiClientImpl) GetDubboStub(cc *triple.TripleConn) QuestionnaireApiClient {
	return NewQuestionnaireApiClient(cc)
}

func NewQuestionnaireApiClient(cc *triple.TripleConn) QuestionnaireApiClient {
	return &questionnaireApiClient{cc}
}

func (c *questionnaireApiClient) InitQuestionnaire(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*NaireInfo, common.ErrorWithAttachment) {
	out := new(NaireInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/InitQuestionnaire", in, out)
}

func (c *questionnaireApiClient) AddQuestionnaire(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*NaireInfo, common.ErrorWithAttachment) {
	out := new(NaireInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/AddQuestionnaire", in, out)
}

func (c *questionnaireApiClient) UpdateQuestionnaire(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UpdateQuestionnaire", in, out)
}

func (c *questionnaireApiClient) GetQuestionnaire(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*QuestionList, common.ErrorWithAttachment) {
	out := new(QuestionList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetQuestionnaire", in, out)
}

func (c *questionnaireApiClient) DeleteQuestionnaire(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteQuestionnaire", in, out)
}

func (c *questionnaireApiClient) GetQuestionnaireList(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*QuestionList, common.ErrorWithAttachment) {
	out := new(QuestionList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetQuestionnaireList", in, out)
}

func (c *questionnaireApiClient) GetQuestionInfo(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*QuestionInfo, common.ErrorWithAttachment) {
	out := new(QuestionInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetQuestionInfo", in, out)
}

func (c *questionnaireApiClient) AddOneQuestion(ctx context.Context, in *QuestionInfo, opts ...grpc_go.CallOption) (*QuestionInfo, common.ErrorWithAttachment) {
	out := new(QuestionInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/AddOneQuestion", in, out)
}

func (c *questionnaireApiClient) UpdateOneQuestion(ctx context.Context, in *QuestionInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UpdateOneQuestion", in, out)
}

func (c *questionnaireApiClient) DeleteQuestionByUuid(ctx context.Context, in *QuestionInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteQuestionByUuid", in, out)
}

func (c *questionnaireApiClient) GetQuestionList(ctx context.Context, in *NaireInfo, opts ...grpc_go.CallOption) (*QuestionList, common.ErrorWithAttachment) {
	out := new(QuestionList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetQuestionList", in, out)
}

func (c *questionnaireApiClient) GetAnswerByUN(ctx context.Context, in *AnswerInfo, opts ...grpc_go.CallOption) (*AnswerList, common.ErrorWithAttachment) {
	out := new(AnswerList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetAnswerByUN", in, out)
}

func (c *questionnaireApiClient) AddAnswerByUN(ctx context.Context, in *AnswerInfo, opts ...grpc_go.CallOption) (*AnswerInfo, common.ErrorWithAttachment) {
	out := new(AnswerInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/AddAnswerByUN", in, out)
}

func (c *questionnaireApiClient) UpdateAnswerByAU(ctx context.Context, in *AnswerInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UpdateAnswerByAU", in, out)
}

func (c *questionnaireApiClient) GetIAnswerByQUuid(ctx context.Context, in *AnswerInfo, opts ...grpc_go.CallOption) (*AnswerList, common.ErrorWithAttachment) {
	out := new(AnswerList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetIAnswerByQUuid", in, out)
}

func (c *questionnaireApiClient) GetQNAnswerBYQN(ctx context.Context, in *AnswerInfo, opts ...grpc_go.CallOption) (*QuestionList, common.ErrorWithAttachment) {
	out := new(QuestionList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetQNAnswerBYQN", in, out)
}

func (c *questionnaireApiClient) DeleteUAnswerByQN(ctx context.Context, in *AnswerInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteUAnswerByQN", in, out)
}

// QuestionnaireApiServer is the server API for QuestionnaireApi service.
// All implementations must embed UnimplementedQuestionnaireApiServer
// for forward compatibility
type QuestionnaireApiServer interface {
	InitQuestionnaire(context.Context, *NaireInfo) (*NaireInfo, error)
	AddQuestionnaire(context.Context, *NaireInfo) (*NaireInfo, error)
	UpdateQuestionnaire(context.Context, *NaireInfo) (*Null, error)
	GetQuestionnaire(context.Context, *NaireInfo) (*QuestionList, error)
	DeleteQuestionnaire(context.Context, *NaireInfo) (*Null, error)
	GetQuestionnaireList(context.Context, *NaireInfo) (*QuestionList, error)
	GetQuestionInfo(context.Context, *NaireInfo) (*QuestionInfo, error)
	AddOneQuestion(context.Context, *QuestionInfo) (*QuestionInfo, error)
	UpdateOneQuestion(context.Context, *QuestionInfo) (*Null, error)
	DeleteQuestionByUuid(context.Context, *QuestionInfo) (*Null, error)
	GetQuestionList(context.Context, *NaireInfo) (*QuestionList, error)
	GetAnswerByUN(context.Context, *AnswerInfo) (*AnswerList, error)
	AddAnswerByUN(context.Context, *AnswerInfo) (*AnswerInfo, error)
	UpdateAnswerByAU(context.Context, *AnswerInfo) (*Null, error)
	GetIAnswerByQUuid(context.Context, *AnswerInfo) (*AnswerList, error)
	GetQNAnswerBYQN(context.Context, *AnswerInfo) (*QuestionList, error)
	DeleteUAnswerByQN(context.Context, *AnswerInfo) (*Null, error)
	mustEmbedUnimplementedQuestionnaireApiServer()
}

// UnimplementedQuestionnaireApiServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionnaireApiServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedQuestionnaireApiServer) InitQuestionnaire(context.Context, *NaireInfo) (*NaireInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitQuestionnaire not implemented")
}
func (UnimplementedQuestionnaireApiServer) AddQuestionnaire(context.Context, *NaireInfo) (*NaireInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuestionnaire not implemented")
}
func (UnimplementedQuestionnaireApiServer) UpdateQuestionnaire(context.Context, *NaireInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestionnaire not implemented")
}
func (UnimplementedQuestionnaireApiServer) GetQuestionnaire(context.Context, *NaireInfo) (*QuestionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionnaire not implemented")
}
func (UnimplementedQuestionnaireApiServer) DeleteQuestionnaire(context.Context, *NaireInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestionnaire not implemented")
}
func (UnimplementedQuestionnaireApiServer) GetQuestionnaireList(context.Context, *NaireInfo) (*QuestionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionnaireList not implemented")
}
func (UnimplementedQuestionnaireApiServer) GetQuestionInfo(context.Context, *NaireInfo) (*QuestionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionInfo not implemented")
}
func (UnimplementedQuestionnaireApiServer) AddOneQuestion(context.Context, *QuestionInfo) (*QuestionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOneQuestion not implemented")
}
func (UnimplementedQuestionnaireApiServer) UpdateOneQuestion(context.Context, *QuestionInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneQuestion not implemented")
}
func (UnimplementedQuestionnaireApiServer) DeleteQuestionByUuid(context.Context, *QuestionInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestionByUuid not implemented")
}
func (UnimplementedQuestionnaireApiServer) GetQuestionList(context.Context, *NaireInfo) (*QuestionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionList not implemented")
}
func (UnimplementedQuestionnaireApiServer) GetAnswerByUN(context.Context, *AnswerInfo) (*AnswerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswerByUN not implemented")
}
func (UnimplementedQuestionnaireApiServer) AddAnswerByUN(context.Context, *AnswerInfo) (*AnswerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnswerByUN not implemented")
}
func (UnimplementedQuestionnaireApiServer) UpdateAnswerByAU(context.Context, *AnswerInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnswerByAU not implemented")
}
func (UnimplementedQuestionnaireApiServer) GetIAnswerByQUuid(context.Context, *AnswerInfo) (*AnswerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIAnswerByQUuid not implemented")
}
func (UnimplementedQuestionnaireApiServer) GetQNAnswerBYQN(context.Context, *AnswerInfo) (*QuestionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQNAnswerBYQN not implemented")
}
func (UnimplementedQuestionnaireApiServer) DeleteUAnswerByQN(context.Context, *AnswerInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUAnswerByQN not implemented")
}
func (s *UnimplementedQuestionnaireApiServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedQuestionnaireApiServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedQuestionnaireApiServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &QuestionnaireApi_ServiceDesc
}
func (UnimplementedQuestionnaireApiServer) mustEmbedUnimplementedQuestionnaireApiServer() {}

// UnsafeQuestionnaireApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionnaireApiServer will
// result in compilation errors.
type UnsafeQuestionnaireApiServer interface {
	mustEmbedUnimplementedQuestionnaireApiServer()
}

func RegisterQuestionnaireApiServer(s grpc_go.ServiceRegistrar, srv QuestionnaireApiServer) {
	s.RegisterService(&QuestionnaireApi_ServiceDesc, srv)
}

func _QuestionnaireApi_InitQuestionnaire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaireInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("InitQuestionnaire", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/InitQuestionnaire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).InitQuestionnaire(ctx, req.(*NaireInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_AddQuestionnaire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaireInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("AddQuestionnaire", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/AddQuestionnaire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).AddQuestionnaire(ctx, req.(*NaireInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_UpdateQuestionnaire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaireInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UpdateQuestionnaire", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/UpdateQuestionnaire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).UpdateQuestionnaire(ctx, req.(*NaireInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_GetQuestionnaire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaireInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetQuestionnaire", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/GetQuestionnaire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).GetQuestionnaire(ctx, req.(*NaireInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_DeleteQuestionnaire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaireInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteQuestionnaire", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/DeleteQuestionnaire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).DeleteQuestionnaire(ctx, req.(*NaireInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_GetQuestionnaireList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaireInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetQuestionnaireList", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/GetQuestionnaireList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).GetQuestionnaireList(ctx, req.(*NaireInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_GetQuestionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaireInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetQuestionInfo", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/GetQuestionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).GetQuestionInfo(ctx, req.(*NaireInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_AddOneQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("AddOneQuestion", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/AddOneQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).AddOneQuestion(ctx, req.(*QuestionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_UpdateOneQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UpdateOneQuestion", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/UpdateOneQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).UpdateOneQuestion(ctx, req.(*QuestionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_DeleteQuestionByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteQuestionByUuid", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/DeleteQuestionByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).DeleteQuestionByUuid(ctx, req.(*QuestionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_GetQuestionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaireInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetQuestionList", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/GetQuestionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).GetQuestionList(ctx, req.(*NaireInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_GetAnswerByUN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetAnswerByUN", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/GetAnswerByUN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).GetAnswerByUN(ctx, req.(*AnswerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_AddAnswerByUN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("AddAnswerByUN", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/AddAnswerByUN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).AddAnswerByUN(ctx, req.(*AnswerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_UpdateAnswerByAU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UpdateAnswerByAU", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/UpdateAnswerByAU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).UpdateAnswerByAU(ctx, req.(*AnswerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_GetIAnswerByQUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetIAnswerByQUuid", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/GetIAnswerByQUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).GetIAnswerByQUuid(ctx, req.(*AnswerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_GetQNAnswerBYQN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetQNAnswerBYQN", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/GetQNAnswerBYQN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).GetQNAnswerBYQN(ctx, req.(*AnswerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireApi_DeleteUAnswerByQN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteUAnswerByQN", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.QuestionnaireApi/DeleteUAnswerByQN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireApiServer).DeleteUAnswerByQN(ctx, req.(*AnswerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionnaireApi_ServiceDesc is the grpc_go.ServiceDesc for QuestionnaireApi service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionnaireApi_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "main.QuestionnaireApi",
	HandlerType: (*QuestionnaireApiServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "InitQuestionnaire",
			Handler:    _QuestionnaireApi_InitQuestionnaire_Handler,
		},
		{
			MethodName: "AddQuestionnaire",
			Handler:    _QuestionnaireApi_AddQuestionnaire_Handler,
		},
		{
			MethodName: "UpdateQuestionnaire",
			Handler:    _QuestionnaireApi_UpdateQuestionnaire_Handler,
		},
		{
			MethodName: "GetQuestionnaire",
			Handler:    _QuestionnaireApi_GetQuestionnaire_Handler,
		},
		{
			MethodName: "DeleteQuestionnaire",
			Handler:    _QuestionnaireApi_DeleteQuestionnaire_Handler,
		},
		{
			MethodName: "GetQuestionnaireList",
			Handler:    _QuestionnaireApi_GetQuestionnaireList_Handler,
		},
		{
			MethodName: "GetQuestionInfo",
			Handler:    _QuestionnaireApi_GetQuestionInfo_Handler,
		},
		{
			MethodName: "AddOneQuestion",
			Handler:    _QuestionnaireApi_AddOneQuestion_Handler,
		},
		{
			MethodName: "UpdateOneQuestion",
			Handler:    _QuestionnaireApi_UpdateOneQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestionByUuid",
			Handler:    _QuestionnaireApi_DeleteQuestionByUuid_Handler,
		},
		{
			MethodName: "GetQuestionList",
			Handler:    _QuestionnaireApi_GetQuestionList_Handler,
		},
		{
			MethodName: "GetAnswerByUN",
			Handler:    _QuestionnaireApi_GetAnswerByUN_Handler,
		},
		{
			MethodName: "AddAnswerByUN",
			Handler:    _QuestionnaireApi_AddAnswerByUN_Handler,
		},
		{
			MethodName: "UpdateAnswerByAU",
			Handler:    _QuestionnaireApi_UpdateAnswerByAU_Handler,
		},
		{
			MethodName: "GetIAnswerByQUuid",
			Handler:    _QuestionnaireApi_GetIAnswerByQUuid_Handler,
		},
		{
			MethodName: "GetQNAnswerBYQN",
			Handler:    _QuestionnaireApi_GetQNAnswerBYQN_Handler,
		},
		{
			MethodName: "DeleteUAnswerByQN",
			Handler:    _QuestionnaireApi_DeleteUAnswerByQN_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}

// SecureApiClient is the client API for SecureApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecureApiClient interface {
	GenerateToken(ctx context.Context, in *Jwt, opts ...grpc_go.CallOption) (*Jwt, common.ErrorWithAttachment)
	ParseToken(ctx context.Context, in *Jwt, opts ...grpc_go.CallOption) (*Jwt, common.ErrorWithAttachment)
	RefreshToken(ctx context.Context, in *Jwt, opts ...grpc_go.CallOption) (*Jwt, common.ErrorWithAttachment)
}

type secureApiClient struct {
	cc *triple.TripleConn
}

type SecureApiClientImpl struct {
	GenerateToken func(ctx context.Context, in *Jwt) (*Jwt, error)
	ParseToken    func(ctx context.Context, in *Jwt) (*Jwt, error)
	RefreshToken  func(ctx context.Context, in *Jwt) (*Jwt, error)
}

func (c *SecureApiClientImpl) GetDubboStub(cc *triple.TripleConn) SecureApiClient {
	return NewSecureApiClient(cc)
}

func NewSecureApiClient(cc *triple.TripleConn) SecureApiClient {
	return &secureApiClient{cc}
}

func (c *secureApiClient) GenerateToken(ctx context.Context, in *Jwt, opts ...grpc_go.CallOption) (*Jwt, common.ErrorWithAttachment) {
	out := new(Jwt)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GenerateToken", in, out)
}

func (c *secureApiClient) ParseToken(ctx context.Context, in *Jwt, opts ...grpc_go.CallOption) (*Jwt, common.ErrorWithAttachment) {
	out := new(Jwt)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ParseToken", in, out)
}

func (c *secureApiClient) RefreshToken(ctx context.Context, in *Jwt, opts ...grpc_go.CallOption) (*Jwt, common.ErrorWithAttachment) {
	out := new(Jwt)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/RefreshToken", in, out)
}

// SecureApiServer is the server API for SecureApi service.
// All implementations must embed UnimplementedSecureApiServer
// for forward compatibility
type SecureApiServer interface {
	GenerateToken(context.Context, *Jwt) (*Jwt, error)
	ParseToken(context.Context, *Jwt) (*Jwt, error)
	RefreshToken(context.Context, *Jwt) (*Jwt, error)
	mustEmbedUnimplementedSecureApiServer()
}

// UnimplementedSecureApiServer must be embedded to have forward compatible implementations.
type UnimplementedSecureApiServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedSecureApiServer) GenerateToken(context.Context, *Jwt) (*Jwt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedSecureApiServer) ParseToken(context.Context, *Jwt) (*Jwt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseToken not implemented")
}
func (UnimplementedSecureApiServer) RefreshToken(context.Context, *Jwt) (*Jwt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (s *UnimplementedSecureApiServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedSecureApiServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedSecureApiServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &SecureApi_ServiceDesc
}
func (UnimplementedSecureApiServer) mustEmbedUnimplementedSecureApiServer() {}

// UnsafeSecureApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecureApiServer will
// result in compilation errors.
type UnsafeSecureApiServer interface {
	mustEmbedUnimplementedSecureApiServer()
}

func RegisterSecureApiServer(s grpc_go.ServiceRegistrar, srv SecureApiServer) {
	s.RegisterService(&SecureApi_ServiceDesc, srv)
}

func _SecureApi_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jwt)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GenerateToken", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.SecureApi/GenerateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureApiServer).GenerateToken(ctx, req.(*Jwt))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureApi_ParseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jwt)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ParseToken", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.SecureApi/ParseToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureApiServer).ParseToken(ctx, req.(*Jwt))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureApi_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jwt)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("RefreshToken", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.SecureApi/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureApiServer).RefreshToken(ctx, req.(*Jwt))
	}
	return interceptor(ctx, in, info, handler)
}

// SecureApi_ServiceDesc is the grpc_go.ServiceDesc for SecureApi service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecureApi_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "main.SecureApi",
	HandlerType: (*SecureApiServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "GenerateToken",
			Handler:    _SecureApi_GenerateToken_Handler,
		},
		{
			MethodName: "ParseToken",
			Handler:    _SecureApi_ParseToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _SecureApi_RefreshToken_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}

// TaskApiClient is the client API for TaskApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskApiClient interface {
	RegisterUser(ctx context.Context, in *Amqp, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	CreateVhost(ctx context.Context, in *Amqp, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DestroyVhost(ctx context.Context, in *Amqp, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	CreateExchange(ctx context.Context, in *Amqp, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DestroyExchange(ctx context.Context, in *Amqp, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	CreateQueue(ctx context.Context, in *Amqp, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DestroyQueue(ctx context.Context, in *Amqp, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	Task(ctx context.Context, in *AmqpTask, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
}

type taskApiClient struct {
	cc *triple.TripleConn
}

type TaskApiClientImpl struct {
	RegisterUser    func(ctx context.Context, in *Amqp) (*Null, error)
	CreateVhost     func(ctx context.Context, in *Amqp) (*Null, error)
	DestroyVhost    func(ctx context.Context, in *Amqp) (*Null, error)
	CreateExchange  func(ctx context.Context, in *Amqp) (*Null, error)
	DestroyExchange func(ctx context.Context, in *Amqp) (*Null, error)
	CreateQueue     func(ctx context.Context, in *Amqp) (*Null, error)
	DestroyQueue    func(ctx context.Context, in *Amqp) (*Null, error)
	Task            func(ctx context.Context, in *AmqpTask) (*Null, error)
}

func (c *TaskApiClientImpl) GetDubboStub(cc *triple.TripleConn) TaskApiClient {
	return NewTaskApiClient(cc)
}

func NewTaskApiClient(cc *triple.TripleConn) TaskApiClient {
	return &taskApiClient{cc}
}

func (c *taskApiClient) RegisterUser(ctx context.Context, in *Amqp, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/RegisterUser", in, out)
}

func (c *taskApiClient) CreateVhost(ctx context.Context, in *Amqp, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateVhost", in, out)
}

func (c *taskApiClient) DestroyVhost(ctx context.Context, in *Amqp, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DestroyVhost", in, out)
}

func (c *taskApiClient) CreateExchange(ctx context.Context, in *Amqp, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateExchange", in, out)
}

func (c *taskApiClient) DestroyExchange(ctx context.Context, in *Amqp, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DestroyExchange", in, out)
}

func (c *taskApiClient) CreateQueue(ctx context.Context, in *Amqp, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateQueue", in, out)
}

func (c *taskApiClient) DestroyQueue(ctx context.Context, in *Amqp, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DestroyQueue", in, out)
}

func (c *taskApiClient) Task(ctx context.Context, in *AmqpTask, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Task", in, out)
}

// TaskApiServer is the server API for TaskApi service.
// All implementations must embed UnimplementedTaskApiServer
// for forward compatibility
type TaskApiServer interface {
	RegisterUser(context.Context, *Amqp) (*Null, error)
	CreateVhost(context.Context, *Amqp) (*Null, error)
	DestroyVhost(context.Context, *Amqp) (*Null, error)
	CreateExchange(context.Context, *Amqp) (*Null, error)
	DestroyExchange(context.Context, *Amqp) (*Null, error)
	CreateQueue(context.Context, *Amqp) (*Null, error)
	DestroyQueue(context.Context, *Amqp) (*Null, error)
	Task(context.Context, *AmqpTask) (*Null, error)
	mustEmbedUnimplementedTaskApiServer()
}

// UnimplementedTaskApiServer must be embedded to have forward compatible implementations.
type UnimplementedTaskApiServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedTaskApiServer) RegisterUser(context.Context, *Amqp) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedTaskApiServer) CreateVhost(context.Context, *Amqp) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVhost not implemented")
}
func (UnimplementedTaskApiServer) DestroyVhost(context.Context, *Amqp) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyVhost not implemented")
}
func (UnimplementedTaskApiServer) CreateExchange(context.Context, *Amqp) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExchange not implemented")
}
func (UnimplementedTaskApiServer) DestroyExchange(context.Context, *Amqp) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyExchange not implemented")
}
func (UnimplementedTaskApiServer) CreateQueue(context.Context, *Amqp) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedTaskApiServer) DestroyQueue(context.Context, *Amqp) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyQueue not implemented")
}
func (UnimplementedTaskApiServer) Task(context.Context, *AmqpTask) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Task not implemented")
}
func (s *UnimplementedTaskApiServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedTaskApiServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedTaskApiServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &TaskApi_ServiceDesc
}
func (UnimplementedTaskApiServer) mustEmbedUnimplementedTaskApiServer() {}

// UnsafeTaskApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskApiServer will
// result in compilation errors.
type UnsafeTaskApiServer interface {
	mustEmbedUnimplementedTaskApiServer()
}

func RegisterTaskApiServer(s grpc_go.ServiceRegistrar, srv TaskApiServer) {
	s.RegisterService(&TaskApi_ServiceDesc, srv)
}

func _TaskApi_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Amqp)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("RegisterUser", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TaskApi/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskApiServer).RegisterUser(ctx, req.(*Amqp))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskApi_CreateVhost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Amqp)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateVhost", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TaskApi/CreateVhost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskApiServer).CreateVhost(ctx, req.(*Amqp))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskApi_DestroyVhost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Amqp)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DestroyVhost", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TaskApi/DestroyVhost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskApiServer).DestroyVhost(ctx, req.(*Amqp))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskApi_CreateExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Amqp)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateExchange", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TaskApi/CreateExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskApiServer).CreateExchange(ctx, req.(*Amqp))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskApi_DestroyExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Amqp)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DestroyExchange", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TaskApi/DestroyExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskApiServer).DestroyExchange(ctx, req.(*Amqp))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskApi_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Amqp)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateQueue", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TaskApi/CreateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskApiServer).CreateQueue(ctx, req.(*Amqp))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskApi_DestroyQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Amqp)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DestroyQueue", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TaskApi/DestroyQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskApiServer).DestroyQueue(ctx, req.(*Amqp))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskApi_Task_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmqpTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Task", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TaskApi/Task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskApiServer).Task(ctx, req.(*AmqpTask))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskApi_ServiceDesc is the grpc_go.ServiceDesc for TaskApi service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskApi_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "main.TaskApi",
	HandlerType: (*TaskApiServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _TaskApi_RegisterUser_Handler,
		},
		{
			MethodName: "CreateVhost",
			Handler:    _TaskApi_CreateVhost_Handler,
		},
		{
			MethodName: "DestroyVhost",
			Handler:    _TaskApi_DestroyVhost_Handler,
		},
		{
			MethodName: "CreateExchange",
			Handler:    _TaskApi_CreateExchange_Handler,
		},
		{
			MethodName: "DestroyExchange",
			Handler:    _TaskApi_DestroyExchange_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _TaskApi_CreateQueue_Handler,
		},
		{
			MethodName: "DestroyQueue",
			Handler:    _TaskApi_DestroyQueue_Handler,
		},
		{
			MethodName: "Task",
			Handler:    _TaskApi_Task_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}

// TenantApiClient is the client API for TenantApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantApiClient interface {
	RefTenantReshRedis(ctx context.Context, in *Null, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ClientByUuid(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*TenantRes, common.ErrorWithAttachment)
	ClientByOrgId(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*TenantRes, common.ErrorWithAttachment)
	SettingByUuid(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Tenant, common.ErrorWithAttachment)
	AccountByPhone(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*TenantRes, common.ErrorWithAttachment)
	AuthByDevice(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*TenantRes, common.ErrorWithAttachment)
	PhoneByAccount(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*TenantRes, common.ErrorWithAttachment)
	InfoByUuid(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Tenant, common.ErrorWithAttachment)
	InfoByOrgId(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Tenant, common.ErrorWithAttachment)
	InfoByPassword(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Tenant, common.ErrorWithAttachment)
	ListTenant(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*TenantResMap, common.ErrorWithAttachment)
	RegisterTenant(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Tenant, common.ErrorWithAttachment)
	GenerateTenant(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Tenant, common.ErrorWithAttachment)
	TenantResetPassword(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ChangePassword(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	RecoveryPassword(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ChangeDevice(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ChangeContact(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ChangeSelf(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ChangeBanner(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ChangePhone(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	ChangeExpireIn(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	IsAdmin(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	SetWeChat(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	SetWork(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	SetDingTalk(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	SetLark(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	SetSetting(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DebugSetting(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	SystemBase(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*System, common.ErrorWithAttachment)
	SystemInfo(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*System, common.ErrorWithAttachment)
	UpgradeSystem(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
}

type tenantApiClient struct {
	cc *triple.TripleConn
}

type TenantApiClientImpl struct {
	RefTenantReshRedis  func(ctx context.Context, in *Null) (*Null, error)
	ClientByUuid        func(ctx context.Context, in *TenantReq) (*TenantRes, error)
	ClientByOrgId       func(ctx context.Context, in *TenantReq) (*TenantRes, error)
	SettingByUuid       func(ctx context.Context, in *TenantReq) (*Tenant, error)
	AccountByPhone      func(ctx context.Context, in *TenantReq) (*TenantRes, error)
	AuthByDevice        func(ctx context.Context, in *TenantReq) (*TenantRes, error)
	PhoneByAccount      func(ctx context.Context, in *TenantReq) (*TenantRes, error)
	InfoByUuid          func(ctx context.Context, in *TenantReq) (*Tenant, error)
	InfoByOrgId         func(ctx context.Context, in *TenantReq) (*Tenant, error)
	InfoByPassword      func(ctx context.Context, in *TenantReq) (*Tenant, error)
	ListTenant          func(ctx context.Context, in *TenantReq) (*TenantResMap, error)
	RegisterTenant      func(ctx context.Context, in *TenantReq) (*Tenant, error)
	GenerateTenant      func(ctx context.Context, in *TenantReq) (*Tenant, error)
	TenantResetPassword func(ctx context.Context, in *TenantReq) (*Null, error)
	ChangePassword      func(ctx context.Context, in *TenantReq) (*Null, error)
	RecoveryPassword    func(ctx context.Context, in *TenantReq) (*Null, error)
	ChangeDevice        func(ctx context.Context, in *TenantReq) (*Null, error)
	ChangeContact       func(ctx context.Context, in *TenantReq) (*Null, error)
	ChangeSelf          func(ctx context.Context, in *TenantReq) (*Null, error)
	ChangeBanner        func(ctx context.Context, in *TenantReq) (*Null, error)
	ChangePhone         func(ctx context.Context, in *TenantReq) (*Null, error)
	ChangeExpireIn      func(ctx context.Context, in *TenantReq) (*Null, error)
	IsAdmin             func(ctx context.Context, in *TenantReq) (*Null, error)
	SetWeChat           func(ctx context.Context, in *TenantReq) (*Null, error)
	SetWork             func(ctx context.Context, in *TenantReq) (*Null, error)
	SetDingTalk         func(ctx context.Context, in *TenantReq) (*Null, error)
	SetLark             func(ctx context.Context, in *TenantReq) (*Null, error)
	SetSetting          func(ctx context.Context, in *TenantReq) (*Null, error)
	DebugSetting        func(ctx context.Context, in *TenantReq) (*Null, error)
	SystemBase          func(ctx context.Context, in *TenantReq) (*System, error)
	SystemInfo          func(ctx context.Context, in *TenantReq) (*System, error)
	UpgradeSystem       func(ctx context.Context, in *TenantReq) (*Null, error)
}

func (c *TenantApiClientImpl) GetDubboStub(cc *triple.TripleConn) TenantApiClient {
	return NewTenantApiClient(cc)
}

func NewTenantApiClient(cc *triple.TripleConn) TenantApiClient {
	return &tenantApiClient{cc}
}

func (c *tenantApiClient) RefTenantReshRedis(ctx context.Context, in *Null, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/RefTenantReshRedis", in, out)
}

func (c *tenantApiClient) ClientByUuid(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*TenantRes, common.ErrorWithAttachment) {
	out := new(TenantRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ClientByUuid", in, out)
}

func (c *tenantApiClient) ClientByOrgId(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*TenantRes, common.ErrorWithAttachment) {
	out := new(TenantRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ClientByOrgId", in, out)
}

func (c *tenantApiClient) SettingByUuid(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Tenant, common.ErrorWithAttachment) {
	out := new(Tenant)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SettingByUuid", in, out)
}

func (c *tenantApiClient) AccountByPhone(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*TenantRes, common.ErrorWithAttachment) {
	out := new(TenantRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/AccountByPhone", in, out)
}

func (c *tenantApiClient) AuthByDevice(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*TenantRes, common.ErrorWithAttachment) {
	out := new(TenantRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/AuthByDevice", in, out)
}

func (c *tenantApiClient) PhoneByAccount(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*TenantRes, common.ErrorWithAttachment) {
	out := new(TenantRes)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/PhoneByAccount", in, out)
}

func (c *tenantApiClient) InfoByUuid(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Tenant, common.ErrorWithAttachment) {
	out := new(Tenant)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/InfoByUuid", in, out)
}

func (c *tenantApiClient) InfoByOrgId(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Tenant, common.ErrorWithAttachment) {
	out := new(Tenant)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/InfoByOrgId", in, out)
}

func (c *tenantApiClient) InfoByPassword(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Tenant, common.ErrorWithAttachment) {
	out := new(Tenant)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/InfoByPassword", in, out)
}

func (c *tenantApiClient) ListTenant(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*TenantResMap, common.ErrorWithAttachment) {
	out := new(TenantResMap)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ListTenant", in, out)
}

func (c *tenantApiClient) RegisterTenant(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Tenant, common.ErrorWithAttachment) {
	out := new(Tenant)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/RegisterTenant", in, out)
}

func (c *tenantApiClient) GenerateTenant(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Tenant, common.ErrorWithAttachment) {
	out := new(Tenant)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GenerateTenant", in, out)
}

func (c *tenantApiClient) TenantResetPassword(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/TenantResetPassword", in, out)
}

func (c *tenantApiClient) ChangePassword(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChangePassword", in, out)
}

func (c *tenantApiClient) RecoveryPassword(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/RecoveryPassword", in, out)
}

func (c *tenantApiClient) ChangeDevice(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChangeDevice", in, out)
}

func (c *tenantApiClient) ChangeContact(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChangeContact", in, out)
}

func (c *tenantApiClient) ChangeSelf(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChangeSelf", in, out)
}

func (c *tenantApiClient) ChangeBanner(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChangeBanner", in, out)
}

func (c *tenantApiClient) ChangePhone(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChangePhone", in, out)
}

func (c *tenantApiClient) ChangeExpireIn(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ChangeExpireIn", in, out)
}

func (c *tenantApiClient) IsAdmin(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/IsAdmin", in, out)
}

func (c *tenantApiClient) SetWeChat(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SetWeChat", in, out)
}

func (c *tenantApiClient) SetWork(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SetWork", in, out)
}

func (c *tenantApiClient) SetDingTalk(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SetDingTalk", in, out)
}

func (c *tenantApiClient) SetLark(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SetLark", in, out)
}

func (c *tenantApiClient) SetSetting(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SetSetting", in, out)
}

func (c *tenantApiClient) DebugSetting(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DebugSetting", in, out)
}

func (c *tenantApiClient) SystemBase(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*System, common.ErrorWithAttachment) {
	out := new(System)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SystemBase", in, out)
}

func (c *tenantApiClient) SystemInfo(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*System, common.ErrorWithAttachment) {
	out := new(System)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SystemInfo", in, out)
}

func (c *tenantApiClient) UpgradeSystem(ctx context.Context, in *TenantReq, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UpgradeSystem", in, out)
}

// TenantApiServer is the server API for TenantApi service.
// All implementations must embed UnimplementedTenantApiServer
// for forward compatibility
type TenantApiServer interface {
	RefTenantReshRedis(context.Context, *Null) (*Null, error)
	ClientByUuid(context.Context, *TenantReq) (*TenantRes, error)
	ClientByOrgId(context.Context, *TenantReq) (*TenantRes, error)
	SettingByUuid(context.Context, *TenantReq) (*Tenant, error)
	AccountByPhone(context.Context, *TenantReq) (*TenantRes, error)
	AuthByDevice(context.Context, *TenantReq) (*TenantRes, error)
	PhoneByAccount(context.Context, *TenantReq) (*TenantRes, error)
	InfoByUuid(context.Context, *TenantReq) (*Tenant, error)
	InfoByOrgId(context.Context, *TenantReq) (*Tenant, error)
	InfoByPassword(context.Context, *TenantReq) (*Tenant, error)
	ListTenant(context.Context, *TenantReq) (*TenantResMap, error)
	RegisterTenant(context.Context, *TenantReq) (*Tenant, error)
	GenerateTenant(context.Context, *TenantReq) (*Tenant, error)
	TenantResetPassword(context.Context, *TenantReq) (*Null, error)
	ChangePassword(context.Context, *TenantReq) (*Null, error)
	RecoveryPassword(context.Context, *TenantReq) (*Null, error)
	ChangeDevice(context.Context, *TenantReq) (*Null, error)
	ChangeContact(context.Context, *TenantReq) (*Null, error)
	ChangeSelf(context.Context, *TenantReq) (*Null, error)
	ChangeBanner(context.Context, *TenantReq) (*Null, error)
	ChangePhone(context.Context, *TenantReq) (*Null, error)
	ChangeExpireIn(context.Context, *TenantReq) (*Null, error)
	IsAdmin(context.Context, *TenantReq) (*Null, error)
	SetWeChat(context.Context, *TenantReq) (*Null, error)
	SetWork(context.Context, *TenantReq) (*Null, error)
	SetDingTalk(context.Context, *TenantReq) (*Null, error)
	SetLark(context.Context, *TenantReq) (*Null, error)
	SetSetting(context.Context, *TenantReq) (*Null, error)
	DebugSetting(context.Context, *TenantReq) (*Null, error)
	SystemBase(context.Context, *TenantReq) (*System, error)
	SystemInfo(context.Context, *TenantReq) (*System, error)
	UpgradeSystem(context.Context, *TenantReq) (*Null, error)
	mustEmbedUnimplementedTenantApiServer()
}

// UnimplementedTenantApiServer must be embedded to have forward compatible implementations.
type UnimplementedTenantApiServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedTenantApiServer) RefTenantReshRedis(context.Context, *Null) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefTenantReshRedis not implemented")
}
func (UnimplementedTenantApiServer) ClientByUuid(context.Context, *TenantReq) (*TenantRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientByUuid not implemented")
}
func (UnimplementedTenantApiServer) ClientByOrgId(context.Context, *TenantReq) (*TenantRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientByOrgId not implemented")
}
func (UnimplementedTenantApiServer) SettingByUuid(context.Context, *TenantReq) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingByUuid not implemented")
}
func (UnimplementedTenantApiServer) AccountByPhone(context.Context, *TenantReq) (*TenantRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountByPhone not implemented")
}
func (UnimplementedTenantApiServer) AuthByDevice(context.Context, *TenantReq) (*TenantRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthByDevice not implemented")
}
func (UnimplementedTenantApiServer) PhoneByAccount(context.Context, *TenantReq) (*TenantRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneByAccount not implemented")
}
func (UnimplementedTenantApiServer) InfoByUuid(context.Context, *TenantReq) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoByUuid not implemented")
}
func (UnimplementedTenantApiServer) InfoByOrgId(context.Context, *TenantReq) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoByOrgId not implemented")
}
func (UnimplementedTenantApiServer) InfoByPassword(context.Context, *TenantReq) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoByPassword not implemented")
}
func (UnimplementedTenantApiServer) ListTenant(context.Context, *TenantReq) (*TenantResMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenant not implemented")
}
func (UnimplementedTenantApiServer) RegisterTenant(context.Context, *TenantReq) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTenant not implemented")
}
func (UnimplementedTenantApiServer) GenerateTenant(context.Context, *TenantReq) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTenant not implemented")
}
func (UnimplementedTenantApiServer) TenantResetPassword(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantResetPassword not implemented")
}
func (UnimplementedTenantApiServer) ChangePassword(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedTenantApiServer) RecoveryPassword(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoveryPassword not implemented")
}
func (UnimplementedTenantApiServer) ChangeDevice(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDevice not implemented")
}
func (UnimplementedTenantApiServer) ChangeContact(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeContact not implemented")
}
func (UnimplementedTenantApiServer) ChangeSelf(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSelf not implemented")
}
func (UnimplementedTenantApiServer) ChangeBanner(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeBanner not implemented")
}
func (UnimplementedTenantApiServer) ChangePhone(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePhone not implemented")
}
func (UnimplementedTenantApiServer) ChangeExpireIn(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeExpireIn not implemented")
}
func (UnimplementedTenantApiServer) IsAdmin(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAdmin not implemented")
}
func (UnimplementedTenantApiServer) SetWeChat(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWeChat not implemented")
}
func (UnimplementedTenantApiServer) SetWork(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWork not implemented")
}
func (UnimplementedTenantApiServer) SetDingTalk(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDingTalk not implemented")
}
func (UnimplementedTenantApiServer) SetLark(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLark not implemented")
}
func (UnimplementedTenantApiServer) SetSetting(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSetting not implemented")
}
func (UnimplementedTenantApiServer) DebugSetting(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugSetting not implemented")
}
func (UnimplementedTenantApiServer) SystemBase(context.Context, *TenantReq) (*System, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemBase not implemented")
}
func (UnimplementedTenantApiServer) SystemInfo(context.Context, *TenantReq) (*System, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemInfo not implemented")
}
func (UnimplementedTenantApiServer) UpgradeSystem(context.Context, *TenantReq) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeSystem not implemented")
}
func (s *UnimplementedTenantApiServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedTenantApiServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedTenantApiServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &TenantApi_ServiceDesc
}
func (UnimplementedTenantApiServer) mustEmbedUnimplementedTenantApiServer() {}

// UnsafeTenantApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantApiServer will
// result in compilation errors.
type UnsafeTenantApiServer interface {
	mustEmbedUnimplementedTenantApiServer()
}

func RegisterTenantApiServer(s grpc_go.ServiceRegistrar, srv TenantApiServer) {
	s.RegisterService(&TenantApi_ServiceDesc, srv)
}

func _TenantApi_RefTenantReshRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("RefTenantReshRedis", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/RefTenantReshRedis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).RefTenantReshRedis(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_ClientByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ClientByUuid", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/ClientByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).ClientByUuid(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_ClientByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ClientByOrgId", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/ClientByOrgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).ClientByOrgId(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_SettingByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SettingByUuid", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/SettingByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).SettingByUuid(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_AccountByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("AccountByPhone", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/AccountByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).AccountByPhone(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_AuthByDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("AuthByDevice", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/AuthByDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).AuthByDevice(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_PhoneByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("PhoneByAccount", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/PhoneByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).PhoneByAccount(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_InfoByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("InfoByUuid", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/InfoByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).InfoByUuid(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_InfoByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("InfoByOrgId", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/InfoByOrgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).InfoByOrgId(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_InfoByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("InfoByPassword", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/InfoByPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).InfoByPassword(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_ListTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ListTenant", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/ListTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).ListTenant(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_RegisterTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("RegisterTenant", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/RegisterTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).RegisterTenant(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_GenerateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GenerateTenant", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/GenerateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).GenerateTenant(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_TenantResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("TenantResetPassword", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/TenantResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).TenantResetPassword(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChangePassword", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).ChangePassword(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_RecoveryPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("RecoveryPassword", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/RecoveryPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).RecoveryPassword(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_ChangeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChangeDevice", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/ChangeDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).ChangeDevice(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_ChangeContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChangeContact", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/ChangeContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).ChangeContact(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_ChangeSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChangeSelf", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/ChangeSelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).ChangeSelf(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_ChangeBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChangeBanner", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/ChangeBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).ChangeBanner(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_ChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChangePhone", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/ChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).ChangePhone(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_ChangeExpireIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ChangeExpireIn", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/ChangeExpireIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).ChangeExpireIn(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_IsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("IsAdmin", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/IsAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).IsAdmin(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_SetWeChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SetWeChat", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/SetWeChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).SetWeChat(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_SetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SetWork", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/SetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).SetWork(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_SetDingTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SetDingTalk", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/SetDingTalk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).SetDingTalk(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_SetLark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SetLark", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/SetLark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).SetLark(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_SetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SetSetting", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/SetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).SetSetting(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_DebugSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DebugSetting", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/DebugSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).DebugSetting(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_SystemBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SystemBase", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/SystemBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).SystemBase(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_SystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SystemInfo", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/SystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).SystemInfo(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_UpgradeSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UpgradeSystem", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TenantApi/UpgradeSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).UpgradeSystem(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantApi_ServiceDesc is the grpc_go.ServiceDesc for TenantApi service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantApi_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "main.TenantApi",
	HandlerType: (*TenantApiServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "RefTenantReshRedis",
			Handler:    _TenantApi_RefTenantReshRedis_Handler,
		},
		{
			MethodName: "ClientByUuid",
			Handler:    _TenantApi_ClientByUuid_Handler,
		},
		{
			MethodName: "ClientByOrgId",
			Handler:    _TenantApi_ClientByOrgId_Handler,
		},
		{
			MethodName: "SettingByUuid",
			Handler:    _TenantApi_SettingByUuid_Handler,
		},
		{
			MethodName: "AccountByPhone",
			Handler:    _TenantApi_AccountByPhone_Handler,
		},
		{
			MethodName: "AuthByDevice",
			Handler:    _TenantApi_AuthByDevice_Handler,
		},
		{
			MethodName: "PhoneByAccount",
			Handler:    _TenantApi_PhoneByAccount_Handler,
		},
		{
			MethodName: "InfoByUuid",
			Handler:    _TenantApi_InfoByUuid_Handler,
		},
		{
			MethodName: "InfoByOrgId",
			Handler:    _TenantApi_InfoByOrgId_Handler,
		},
		{
			MethodName: "InfoByPassword",
			Handler:    _TenantApi_InfoByPassword_Handler,
		},
		{
			MethodName: "ListTenant",
			Handler:    _TenantApi_ListTenant_Handler,
		},
		{
			MethodName: "RegisterTenant",
			Handler:    _TenantApi_RegisterTenant_Handler,
		},
		{
			MethodName: "GenerateTenant",
			Handler:    _TenantApi_GenerateTenant_Handler,
		},
		{
			MethodName: "TenantResetPassword",
			Handler:    _TenantApi_TenantResetPassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _TenantApi_ChangePassword_Handler,
		},
		{
			MethodName: "RecoveryPassword",
			Handler:    _TenantApi_RecoveryPassword_Handler,
		},
		{
			MethodName: "ChangeDevice",
			Handler:    _TenantApi_ChangeDevice_Handler,
		},
		{
			MethodName: "ChangeContact",
			Handler:    _TenantApi_ChangeContact_Handler,
		},
		{
			MethodName: "ChangeSelf",
			Handler:    _TenantApi_ChangeSelf_Handler,
		},
		{
			MethodName: "ChangeBanner",
			Handler:    _TenantApi_ChangeBanner_Handler,
		},
		{
			MethodName: "ChangePhone",
			Handler:    _TenantApi_ChangePhone_Handler,
		},
		{
			MethodName: "ChangeExpireIn",
			Handler:    _TenantApi_ChangeExpireIn_Handler,
		},
		{
			MethodName: "IsAdmin",
			Handler:    _TenantApi_IsAdmin_Handler,
		},
		{
			MethodName: "SetWeChat",
			Handler:    _TenantApi_SetWeChat_Handler,
		},
		{
			MethodName: "SetWork",
			Handler:    _TenantApi_SetWork_Handler,
		},
		{
			MethodName: "SetDingTalk",
			Handler:    _TenantApi_SetDingTalk_Handler,
		},
		{
			MethodName: "SetLark",
			Handler:    _TenantApi_SetLark_Handler,
		},
		{
			MethodName: "SetSetting",
			Handler:    _TenantApi_SetSetting_Handler,
		},
		{
			MethodName: "DebugSetting",
			Handler:    _TenantApi_DebugSetting_Handler,
		},
		{
			MethodName: "SystemBase",
			Handler:    _TenantApi_SystemBase_Handler,
		},
		{
			MethodName: "SystemInfo",
			Handler:    _TenantApi_SystemInfo_Handler,
		},
		{
			MethodName: "UpgradeSystem",
			Handler:    _TenantApi_UpgradeSystem_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}

// ToolApiClient is the client API for ToolApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToolApiClient interface {
	ShortUrl(ctx context.Context, in *Url, opts ...grpc_go.CallOption) (*Url, common.ErrorWithAttachment)
	LongUrl(ctx context.Context, in *Url, opts ...grpc_go.CallOption) (*Url, common.ErrorWithAttachment)
	GetDomainUrl(ctx context.Context, in *Req, opts ...grpc_go.CallOption) (*Url, common.ErrorWithAttachment)
	GetCallbackUrl(ctx context.Context, in *Req, opts ...grpc_go.CallOption) (*Url, common.ErrorWithAttachment)
	QrCode(ctx context.Context, in *Req, opts ...grpc_go.CallOption) (*File, common.ErrorWithAttachment)
	CreateBinaryFile(ctx context.Context, in *File, opts ...grpc_go.CallOption) (*File, common.ErrorWithAttachment)
	CreateBase64File(ctx context.Context, in *File, opts ...grpc_go.CallOption) (*File, common.ErrorWithAttachment)
	CreateRemoteFile(ctx context.Context, in *File, opts ...grpc_go.CallOption) (*File, common.ErrorWithAttachment)
	GetFile(ctx context.Context, in *File, opts ...grpc_go.CallOption) (*File, common.ErrorWithAttachment)
	DeleteFile(ctx context.Context, in *File, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
}

type toolApiClient struct {
	cc *triple.TripleConn
}

type ToolApiClientImpl struct {
	ShortUrl         func(ctx context.Context, in *Url) (*Url, error)
	LongUrl          func(ctx context.Context, in *Url) (*Url, error)
	GetDomainUrl     func(ctx context.Context, in *Req) (*Url, error)
	GetCallbackUrl   func(ctx context.Context, in *Req) (*Url, error)
	QrCode           func(ctx context.Context, in *Req) (*File, error)
	CreateBinaryFile func(ctx context.Context, in *File) (*File, error)
	CreateBase64File func(ctx context.Context, in *File) (*File, error)
	CreateRemoteFile func(ctx context.Context, in *File) (*File, error)
	GetFile          func(ctx context.Context, in *File) (*File, error)
	DeleteFile       func(ctx context.Context, in *File) (*Null, error)
}

func (c *ToolApiClientImpl) GetDubboStub(cc *triple.TripleConn) ToolApiClient {
	return NewToolApiClient(cc)
}

func NewToolApiClient(cc *triple.TripleConn) ToolApiClient {
	return &toolApiClient{cc}
}

func (c *toolApiClient) ShortUrl(ctx context.Context, in *Url, opts ...grpc_go.CallOption) (*Url, common.ErrorWithAttachment) {
	out := new(Url)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ShortUrl", in, out)
}

func (c *toolApiClient) LongUrl(ctx context.Context, in *Url, opts ...grpc_go.CallOption) (*Url, common.ErrorWithAttachment) {
	out := new(Url)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/LongUrl", in, out)
}

func (c *toolApiClient) GetDomainUrl(ctx context.Context, in *Req, opts ...grpc_go.CallOption) (*Url, common.ErrorWithAttachment) {
	out := new(Url)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetDomainUrl", in, out)
}

func (c *toolApiClient) GetCallbackUrl(ctx context.Context, in *Req, opts ...grpc_go.CallOption) (*Url, common.ErrorWithAttachment) {
	out := new(Url)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetCallbackUrl", in, out)
}

func (c *toolApiClient) QrCode(ctx context.Context, in *Req, opts ...grpc_go.CallOption) (*File, common.ErrorWithAttachment) {
	out := new(File)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/QrCode", in, out)
}

func (c *toolApiClient) CreateBinaryFile(ctx context.Context, in *File, opts ...grpc_go.CallOption) (*File, common.ErrorWithAttachment) {
	out := new(File)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateBinaryFile", in, out)
}

func (c *toolApiClient) CreateBase64File(ctx context.Context, in *File, opts ...grpc_go.CallOption) (*File, common.ErrorWithAttachment) {
	out := new(File)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateBase64File", in, out)
}

func (c *toolApiClient) CreateRemoteFile(ctx context.Context, in *File, opts ...grpc_go.CallOption) (*File, common.ErrorWithAttachment) {
	out := new(File)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateRemoteFile", in, out)
}

func (c *toolApiClient) GetFile(ctx context.Context, in *File, opts ...grpc_go.CallOption) (*File, common.ErrorWithAttachment) {
	out := new(File)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetFile", in, out)
}

func (c *toolApiClient) DeleteFile(ctx context.Context, in *File, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteFile", in, out)
}

// ToolApiServer is the server API for ToolApi service.
// All implementations must embed UnimplementedToolApiServer
// for forward compatibility
type ToolApiServer interface {
	ShortUrl(context.Context, *Url) (*Url, error)
	LongUrl(context.Context, *Url) (*Url, error)
	GetDomainUrl(context.Context, *Req) (*Url, error)
	GetCallbackUrl(context.Context, *Req) (*Url, error)
	QrCode(context.Context, *Req) (*File, error)
	CreateBinaryFile(context.Context, *File) (*File, error)
	CreateBase64File(context.Context, *File) (*File, error)
	CreateRemoteFile(context.Context, *File) (*File, error)
	GetFile(context.Context, *File) (*File, error)
	DeleteFile(context.Context, *File) (*Null, error)
	mustEmbedUnimplementedToolApiServer()
}

// UnimplementedToolApiServer must be embedded to have forward compatible implementations.
type UnimplementedToolApiServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedToolApiServer) ShortUrl(context.Context, *Url) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortUrl not implemented")
}
func (UnimplementedToolApiServer) LongUrl(context.Context, *Url) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LongUrl not implemented")
}
func (UnimplementedToolApiServer) GetDomainUrl(context.Context, *Req) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainUrl not implemented")
}
func (UnimplementedToolApiServer) GetCallbackUrl(context.Context, *Req) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallbackUrl not implemented")
}
func (UnimplementedToolApiServer) QrCode(context.Context, *Req) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QrCode not implemented")
}
func (UnimplementedToolApiServer) CreateBinaryFile(context.Context, *File) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBinaryFile not implemented")
}
func (UnimplementedToolApiServer) CreateBase64File(context.Context, *File) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBase64File not implemented")
}
func (UnimplementedToolApiServer) CreateRemoteFile(context.Context, *File) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemoteFile not implemented")
}
func (UnimplementedToolApiServer) GetFile(context.Context, *File) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedToolApiServer) DeleteFile(context.Context, *File) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (s *UnimplementedToolApiServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedToolApiServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedToolApiServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &ToolApi_ServiceDesc
}
func (UnimplementedToolApiServer) mustEmbedUnimplementedToolApiServer() {}

// UnsafeToolApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolApiServer will
// result in compilation errors.
type UnsafeToolApiServer interface {
	mustEmbedUnimplementedToolApiServer()
}

func RegisterToolApiServer(s grpc_go.ServiceRegistrar, srv ToolApiServer) {
	s.RegisterService(&ToolApi_ServiceDesc, srv)
}

func _ToolApi_ShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Url)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ShortUrl", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ToolApi/ShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolApiServer).ShortUrl(ctx, req.(*Url))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolApi_LongUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Url)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("LongUrl", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ToolApi/LongUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolApiServer).LongUrl(ctx, req.(*Url))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolApi_GetDomainUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetDomainUrl", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ToolApi/GetDomainUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolApiServer).GetDomainUrl(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolApi_GetCallbackUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetCallbackUrl", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ToolApi/GetCallbackUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolApiServer).GetCallbackUrl(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolApi_QrCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("QrCode", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ToolApi/QrCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolApiServer).QrCode(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolApi_CreateBinaryFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateBinaryFile", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ToolApi/CreateBinaryFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolApiServer).CreateBinaryFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolApi_CreateBase64File_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateBase64File", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ToolApi/CreateBase64File",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolApiServer).CreateBase64File(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolApi_CreateRemoteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateRemoteFile", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ToolApi/CreateRemoteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolApiServer).CreateRemoteFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolApi_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetFile", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ToolApi/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolApiServer).GetFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToolApi_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteFile", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ToolApi/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolApiServer).DeleteFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

// ToolApi_ServiceDesc is the grpc_go.ServiceDesc for ToolApi service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToolApi_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "main.ToolApi",
	HandlerType: (*ToolApiServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "ShortUrl",
			Handler:    _ToolApi_ShortUrl_Handler,
		},
		{
			MethodName: "LongUrl",
			Handler:    _ToolApi_LongUrl_Handler,
		},
		{
			MethodName: "GetDomainUrl",
			Handler:    _ToolApi_GetDomainUrl_Handler,
		},
		{
			MethodName: "GetCallbackUrl",
			Handler:    _ToolApi_GetCallbackUrl_Handler,
		},
		{
			MethodName: "QrCode",
			Handler:    _ToolApi_QrCode_Handler,
		},
		{
			MethodName: "CreateBinaryFile",
			Handler:    _ToolApi_CreateBinaryFile_Handler,
		},
		{
			MethodName: "CreateBase64File",
			Handler:    _ToolApi_CreateBase64File_Handler,
		},
		{
			MethodName: "CreateRemoteFile",
			Handler:    _ToolApi_CreateRemoteFile_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _ToolApi_GetFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _ToolApi_DeleteFile_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}

// WorkflowApiClient is the client API for WorkflowApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowApiClient interface {
	GetAvoidWorkFlowNode(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*FormList, common.ErrorWithAttachment)
	FormIndex(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*FormList, common.ErrorWithAttachment)
	AddFormIndex(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*ResponseInfo, common.ErrorWithAttachment)
	UpdateFormIndex(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	FormIndexDelete(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	CreateNode(ctx context.Context, in *FormInfo, opts ...grpc_go.CallOption) (*ResponseInfo, common.ErrorWithAttachment)
	ModifyNode(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DeleteNode(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	CreateTask(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	DeleteTask(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	SetRecipient(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	SetSetting(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	FlowInfo(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*RequestInfo, common.ErrorWithAttachment)
	RecordInfo(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*RecordInfo, common.ErrorWithAttachment)
	ModifyRecord(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	RecipientByPk(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*RequestInfo, common.ErrorWithAttachment)
	DefaultRecipients(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*ResponseInfo, common.ErrorWithAttachment)
	ModifyRecipient(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	TotalTodo(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*ResponseInfo, common.ErrorWithAttachment)
	IsApproval(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*ResponseInfo, common.ErrorWithAttachment)
	InitFlow(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	CreateRecord(ctx context.Context, in *RecordInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment)
	GetWorkflowSetting(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*RequestInfo, common.ErrorWithAttachment)
}

type workflowApiClient struct {
	cc *triple.TripleConn
}

type WorkflowApiClientImpl struct {
	GetAvoidWorkFlowNode func(ctx context.Context, in *RequestInfo) (*FormList, error)
	FormIndex            func(ctx context.Context, in *RequestInfo) (*FormList, error)
	AddFormIndex         func(ctx context.Context, in *RequestInfo) (*ResponseInfo, error)
	UpdateFormIndex      func(ctx context.Context, in *RequestInfo) (*Null, error)
	FormIndexDelete      func(ctx context.Context, in *RequestInfo) (*Null, error)
	CreateNode           func(ctx context.Context, in *FormInfo) (*ResponseInfo, error)
	ModifyNode           func(ctx context.Context, in *RequestInfo) (*Null, error)
	DeleteNode           func(ctx context.Context, in *RequestInfo) (*Null, error)
	CreateTask           func(ctx context.Context, in *RequestInfo) (*Null, error)
	DeleteTask           func(ctx context.Context, in *RequestInfo) (*Null, error)
	SetRecipient         func(ctx context.Context, in *RequestInfo) (*Null, error)
	SetSetting           func(ctx context.Context, in *RequestInfo) (*Null, error)
	FlowInfo             func(ctx context.Context, in *RequestInfo) (*RequestInfo, error)
	RecordInfo           func(ctx context.Context, in *RequestInfo) (*RecordInfo, error)
	ModifyRecord         func(ctx context.Context, in *RequestInfo) (*Null, error)
	RecipientByPk        func(ctx context.Context, in *RequestInfo) (*RequestInfo, error)
	DefaultRecipients    func(ctx context.Context, in *RequestInfo) (*ResponseInfo, error)
	ModifyRecipient      func(ctx context.Context, in *RequestInfo) (*Null, error)
	TotalTodo            func(ctx context.Context, in *RequestInfo) (*ResponseInfo, error)
	IsApproval           func(ctx context.Context, in *RequestInfo) (*ResponseInfo, error)
	InitFlow             func(ctx context.Context, in *RequestInfo) (*Null, error)
	CreateRecord         func(ctx context.Context, in *RecordInfo) (*Null, error)
	GetWorkflowSetting   func(ctx context.Context, in *RequestInfo) (*RequestInfo, error)
}

func (c *WorkflowApiClientImpl) GetDubboStub(cc *triple.TripleConn) WorkflowApiClient {
	return NewWorkflowApiClient(cc)
}

func NewWorkflowApiClient(cc *triple.TripleConn) WorkflowApiClient {
	return &workflowApiClient{cc}
}

func (c *workflowApiClient) GetAvoidWorkFlowNode(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*FormList, common.ErrorWithAttachment) {
	out := new(FormList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetAvoidWorkFlowNode", in, out)
}

func (c *workflowApiClient) FormIndex(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*FormList, common.ErrorWithAttachment) {
	out := new(FormList)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/FormIndex", in, out)
}

func (c *workflowApiClient) AddFormIndex(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*ResponseInfo, common.ErrorWithAttachment) {
	out := new(ResponseInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/AddFormIndex", in, out)
}

func (c *workflowApiClient) UpdateFormIndex(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UpdateFormIndex", in, out)
}

func (c *workflowApiClient) FormIndexDelete(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/FormIndexDelete", in, out)
}

func (c *workflowApiClient) CreateNode(ctx context.Context, in *FormInfo, opts ...grpc_go.CallOption) (*ResponseInfo, common.ErrorWithAttachment) {
	out := new(ResponseInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateNode", in, out)
}

func (c *workflowApiClient) ModifyNode(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ModifyNode", in, out)
}

func (c *workflowApiClient) DeleteNode(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteNode", in, out)
}

func (c *workflowApiClient) CreateTask(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateTask", in, out)
}

func (c *workflowApiClient) DeleteTask(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DeleteTask", in, out)
}

func (c *workflowApiClient) SetRecipient(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SetRecipient", in, out)
}

func (c *workflowApiClient) SetSetting(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/SetSetting", in, out)
}

func (c *workflowApiClient) FlowInfo(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*RequestInfo, common.ErrorWithAttachment) {
	out := new(RequestInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/FlowInfo", in, out)
}

func (c *workflowApiClient) RecordInfo(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*RecordInfo, common.ErrorWithAttachment) {
	out := new(RecordInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/RecordInfo", in, out)
}

func (c *workflowApiClient) ModifyRecord(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ModifyRecord", in, out)
}

func (c *workflowApiClient) RecipientByPk(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*RequestInfo, common.ErrorWithAttachment) {
	out := new(RequestInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/RecipientByPk", in, out)
}

func (c *workflowApiClient) DefaultRecipients(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*ResponseInfo, common.ErrorWithAttachment) {
	out := new(ResponseInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/DefaultRecipients", in, out)
}

func (c *workflowApiClient) ModifyRecipient(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ModifyRecipient", in, out)
}

func (c *workflowApiClient) TotalTodo(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*ResponseInfo, common.ErrorWithAttachment) {
	out := new(ResponseInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/TotalTodo", in, out)
}

func (c *workflowApiClient) IsApproval(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*ResponseInfo, common.ErrorWithAttachment) {
	out := new(ResponseInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/IsApproval", in, out)
}

func (c *workflowApiClient) InitFlow(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/InitFlow", in, out)
}

func (c *workflowApiClient) CreateRecord(ctx context.Context, in *RecordInfo, opts ...grpc_go.CallOption) (*Null, common.ErrorWithAttachment) {
	out := new(Null)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CreateRecord", in, out)
}

func (c *workflowApiClient) GetWorkflowSetting(ctx context.Context, in *RequestInfo, opts ...grpc_go.CallOption) (*RequestInfo, common.ErrorWithAttachment) {
	out := new(RequestInfo)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetWorkflowSetting", in, out)
}

// WorkflowApiServer is the server API for WorkflowApi service.
// All implementations must embed UnimplementedWorkflowApiServer
// for forward compatibility
type WorkflowApiServer interface {
	GetAvoidWorkFlowNode(context.Context, *RequestInfo) (*FormList, error)
	FormIndex(context.Context, *RequestInfo) (*FormList, error)
	AddFormIndex(context.Context, *RequestInfo) (*ResponseInfo, error)
	UpdateFormIndex(context.Context, *RequestInfo) (*Null, error)
	FormIndexDelete(context.Context, *RequestInfo) (*Null, error)
	CreateNode(context.Context, *FormInfo) (*ResponseInfo, error)
	ModifyNode(context.Context, *RequestInfo) (*Null, error)
	DeleteNode(context.Context, *RequestInfo) (*Null, error)
	CreateTask(context.Context, *RequestInfo) (*Null, error)
	DeleteTask(context.Context, *RequestInfo) (*Null, error)
	SetRecipient(context.Context, *RequestInfo) (*Null, error)
	SetSetting(context.Context, *RequestInfo) (*Null, error)
	FlowInfo(context.Context, *RequestInfo) (*RequestInfo, error)
	RecordInfo(context.Context, *RequestInfo) (*RecordInfo, error)
	ModifyRecord(context.Context, *RequestInfo) (*Null, error)
	RecipientByPk(context.Context, *RequestInfo) (*RequestInfo, error)
	DefaultRecipients(context.Context, *RequestInfo) (*ResponseInfo, error)
	ModifyRecipient(context.Context, *RequestInfo) (*Null, error)
	TotalTodo(context.Context, *RequestInfo) (*ResponseInfo, error)
	IsApproval(context.Context, *RequestInfo) (*ResponseInfo, error)
	InitFlow(context.Context, *RequestInfo) (*Null, error)
	CreateRecord(context.Context, *RecordInfo) (*Null, error)
	GetWorkflowSetting(context.Context, *RequestInfo) (*RequestInfo, error)
	mustEmbedUnimplementedWorkflowApiServer()
}

// UnimplementedWorkflowApiServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowApiServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedWorkflowApiServer) GetAvoidWorkFlowNode(context.Context, *RequestInfo) (*FormList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvoidWorkFlowNode not implemented")
}
func (UnimplementedWorkflowApiServer) FormIndex(context.Context, *RequestInfo) (*FormList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormIndex not implemented")
}
func (UnimplementedWorkflowApiServer) AddFormIndex(context.Context, *RequestInfo) (*ResponseInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFormIndex not implemented")
}
func (UnimplementedWorkflowApiServer) UpdateFormIndex(context.Context, *RequestInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFormIndex not implemented")
}
func (UnimplementedWorkflowApiServer) FormIndexDelete(context.Context, *RequestInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormIndexDelete not implemented")
}
func (UnimplementedWorkflowApiServer) CreateNode(context.Context, *FormInfo) (*ResponseInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedWorkflowApiServer) ModifyNode(context.Context, *RequestInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyNode not implemented")
}
func (UnimplementedWorkflowApiServer) DeleteNode(context.Context, *RequestInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedWorkflowApiServer) CreateTask(context.Context, *RequestInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedWorkflowApiServer) DeleteTask(context.Context, *RequestInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedWorkflowApiServer) SetRecipient(context.Context, *RequestInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecipient not implemented")
}
func (UnimplementedWorkflowApiServer) SetSetting(context.Context, *RequestInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSetting not implemented")
}
func (UnimplementedWorkflowApiServer) FlowInfo(context.Context, *RequestInfo) (*RequestInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowInfo not implemented")
}
func (UnimplementedWorkflowApiServer) RecordInfo(context.Context, *RequestInfo) (*RecordInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordInfo not implemented")
}
func (UnimplementedWorkflowApiServer) ModifyRecord(context.Context, *RequestInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyRecord not implemented")
}
func (UnimplementedWorkflowApiServer) RecipientByPk(context.Context, *RequestInfo) (*RequestInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecipientByPk not implemented")
}
func (UnimplementedWorkflowApiServer) DefaultRecipients(context.Context, *RequestInfo) (*ResponseInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultRecipients not implemented")
}
func (UnimplementedWorkflowApiServer) ModifyRecipient(context.Context, *RequestInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyRecipient not implemented")
}
func (UnimplementedWorkflowApiServer) TotalTodo(context.Context, *RequestInfo) (*ResponseInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalTodo not implemented")
}
func (UnimplementedWorkflowApiServer) IsApproval(context.Context, *RequestInfo) (*ResponseInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsApproval not implemented")
}
func (UnimplementedWorkflowApiServer) InitFlow(context.Context, *RequestInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitFlow not implemented")
}
func (UnimplementedWorkflowApiServer) CreateRecord(context.Context, *RecordInfo) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedWorkflowApiServer) GetWorkflowSetting(context.Context, *RequestInfo) (*RequestInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowSetting not implemented")
}
func (s *UnimplementedWorkflowApiServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedWorkflowApiServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedWorkflowApiServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &WorkflowApi_ServiceDesc
}
func (UnimplementedWorkflowApiServer) mustEmbedUnimplementedWorkflowApiServer() {}

// UnsafeWorkflowApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowApiServer will
// result in compilation errors.
type UnsafeWorkflowApiServer interface {
	mustEmbedUnimplementedWorkflowApiServer()
}

func RegisterWorkflowApiServer(s grpc_go.ServiceRegistrar, srv WorkflowApiServer) {
	s.RegisterService(&WorkflowApi_ServiceDesc, srv)
}

func _WorkflowApi_GetAvoidWorkFlowNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetAvoidWorkFlowNode", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/GetAvoidWorkFlowNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).GetAvoidWorkFlowNode(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_FormIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("FormIndex", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/FormIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).FormIndex(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_AddFormIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("AddFormIndex", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/AddFormIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).AddFormIndex(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_UpdateFormIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UpdateFormIndex", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/UpdateFormIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).UpdateFormIndex(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_FormIndexDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("FormIndexDelete", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/FormIndexDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).FormIndexDelete(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateNode", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).CreateNode(ctx, req.(*FormInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_ModifyNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ModifyNode", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/ModifyNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).ModifyNode(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteNode", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).DeleteNode(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateTask", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).CreateTask(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DeleteTask", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).DeleteTask(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_SetRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SetRecipient", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/SetRecipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).SetRecipient(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_SetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("SetSetting", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/SetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).SetSetting(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_FlowInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("FlowInfo", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/FlowInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).FlowInfo(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_RecordInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("RecordInfo", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/RecordInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).RecordInfo(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_ModifyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ModifyRecord", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/ModifyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).ModifyRecord(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_RecipientByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("RecipientByPk", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/RecipientByPk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).RecipientByPk(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_DefaultRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("DefaultRecipients", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/DefaultRecipients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).DefaultRecipients(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_ModifyRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ModifyRecipient", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/ModifyRecipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).ModifyRecipient(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_TotalTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("TotalTodo", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/TotalTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).TotalTodo(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_IsApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("IsApproval", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/IsApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).IsApproval(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_InitFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("InitFlow", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/InitFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).InitFlow(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CreateRecord", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).CreateRecord(ctx, req.(*RecordInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_GetWorkflowSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetWorkflowSetting", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.workflowApi/GetWorkflowSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).GetWorkflowSetting(ctx, req.(*RequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowApi_ServiceDesc is the grpc_go.ServiceDesc for WorkflowApi service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowApi_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "main.workflowApi",
	HandlerType: (*WorkflowApiServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "GetAvoidWorkFlowNode",
			Handler:    _WorkflowApi_GetAvoidWorkFlowNode_Handler,
		},
		{
			MethodName: "FormIndex",
			Handler:    _WorkflowApi_FormIndex_Handler,
		},
		{
			MethodName: "AddFormIndex",
			Handler:    _WorkflowApi_AddFormIndex_Handler,
		},
		{
			MethodName: "UpdateFormIndex",
			Handler:    _WorkflowApi_UpdateFormIndex_Handler,
		},
		{
			MethodName: "FormIndexDelete",
			Handler:    _WorkflowApi_FormIndexDelete_Handler,
		},
		{
			MethodName: "CreateNode",
			Handler:    _WorkflowApi_CreateNode_Handler,
		},
		{
			MethodName: "ModifyNode",
			Handler:    _WorkflowApi_ModifyNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _WorkflowApi_DeleteNode_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _WorkflowApi_CreateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _WorkflowApi_DeleteTask_Handler,
		},
		{
			MethodName: "SetRecipient",
			Handler:    _WorkflowApi_SetRecipient_Handler,
		},
		{
			MethodName: "SetSetting",
			Handler:    _WorkflowApi_SetSetting_Handler,
		},
		{
			MethodName: "FlowInfo",
			Handler:    _WorkflowApi_FlowInfo_Handler,
		},
		{
			MethodName: "RecordInfo",
			Handler:    _WorkflowApi_RecordInfo_Handler,
		},
		{
			MethodName: "ModifyRecord",
			Handler:    _WorkflowApi_ModifyRecord_Handler,
		},
		{
			MethodName: "RecipientByPk",
			Handler:    _WorkflowApi_RecipientByPk_Handler,
		},
		{
			MethodName: "DefaultRecipients",
			Handler:    _WorkflowApi_DefaultRecipients_Handler,
		},
		{
			MethodName: "ModifyRecipient",
			Handler:    _WorkflowApi_ModifyRecipient_Handler,
		},
		{
			MethodName: "TotalTodo",
			Handler:    _WorkflowApi_TotalTodo_Handler,
		},
		{
			MethodName: "IsApproval",
			Handler:    _WorkflowApi_IsApproval_Handler,
		},
		{
			MethodName: "InitFlow",
			Handler:    _WorkflowApi_InitFlow_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _WorkflowApi_CreateRecord_Handler,
		},
		{
			MethodName: "GetWorkflowSetting",
			Handler:    _WorkflowApi_GetWorkflowSetting_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}
